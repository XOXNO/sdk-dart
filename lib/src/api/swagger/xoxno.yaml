openapi: 3.0.0
paths:
  /user/{address}/network-account:
    get:
      operationId: UserDataController_retrieveUserMvxAccount
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User network info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNetworkInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user network info
      tags:
        - User
  /user/{address}/token-inventory:
    get:
      operationId: UserDataController_retrieveUserTokenBalance
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User token inventory response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenInventoryResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get User Token Inventory
      tags:
        - User
  /user/network-account:
    post:
      operationId: UserDataController_retrieveBulkUserMvxAccount
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '201':
          description: User bulk network info response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserNetworkInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user bulk network info
      tags:
        - User
  /user/me/profile:
    get:
      operationId: UserDataController_retrieveMyProfile
      parameters: []
      responses:
        '200':
          description: User private profile info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get user private profile response with email
      tags:
        - User
  /user/{address}/profile:
    get:
      operationId: UserDataController_retrieveUserProfile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User public profile response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get User Public Profile
      tags:
        - User
    patch:
      operationId: UserDataController_editUserProfile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileEditDto'
      responses:
        '200':
          description: User edit profile patch response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Edit user profile
      tags:
        - User
  /user/me:
    get:
      operationId: UserDataController_retrieveUserMyProfile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get me user profile
      tags:
        - User
  /user/me/settings:
    get:
      operationId: UserDataController_retrieveMySettings
      parameters:
        - name: unsubscribeToken
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - optionalAny: []
        - bearer: []
      summary: Get user settings
      tags:
        - User
  /user/me/settings/notification-preferences:
    patch:
      operationId: UserDataController_setNotificationPreferences
      parameters:
        - name: unsubscribeToken
          required: false
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferencesPostDto'
      responses:
        '200':
          description: User notification settings saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - optionalAny: []
        - bearer: []
      summary: Get user notification settings after update
      tags:
        - User
  /user/me/settings/email:
    patch:
      operationId: UserDataController_updateEmailSettings
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetEmailDto'
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Patch user email settings
      tags:
        - User
    delete:
      operationId: UserDataController_deleteEmailSettings
      parameters: []
      responses:
        '200':
          description: Delete settings successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredJwt: []
        - bearer: []
      summary: Delete user email settings
      tags:
        - User
  /user/me/settings/phone:
    patch:
      operationId: UserDataController_updatePhoneSettings
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPhoneDto'
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Patch user phone settings
      tags:
        - User
  /user/me/settings/billing:
    patch:
      operationId: UserDataController_updateBillingSettings
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserBillingDetails'
      responses:
        '200':
          description: User billing settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Patch user billing settings
      tags:
        - User
  /user/me/settings/verify-email:
    post:
      operationId: UserDataController_verifyEmailAddress
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailDto'
      responses:
        '201':
          description: Email verification flow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Verify user pending email!
      tags:
        - User
  /user/buy/signature:
    post:
      operationId: UserDataController_buyTokens
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
              example:
                partnerId: ...
                addressTo: ...
      responses:
        '201':
          description: Signature for buys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TradesilvaniaSignature'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Tradesilvania signature
      tags:
        - User
  /user/{address}/upload-picture:
    put:
      operationId: UserDataController_setUserProfilePicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: referer
          required: false
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: User profile picture upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Set user profile public picture
      tags:
        - User
  /user/{address}/upload-banner:
    put:
      operationId: UserDataController_setUserBannerPicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: User public banner image upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Set user public banner image
      tags:
        - User
  /user/{address}/reset-picture:
    put:
      operationId: UserDataController_resetUserProfilePicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Response of a public profile picture reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Reset to default the public profile picture of a user
      tags:
        - User
  /user/{address}/reset-banner:
    put:
      operationId: UserDataController_resetUserBanner
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Response of a public banner picture reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Reset to default the public banner picture of a user
      tags:
        - User
  /user/{tag}/creator/is-registered:
    get:
      operationId: UserDataController_retrieveUserTagIsCreator
      parameters:
        - name: tag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Check if a the brand name is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Is the creator/organisor unique brand tag registered
      tags:
        - User
  /user/{address}/creator/profile:
    get:
      operationId: UserDataController_retrieveUserCreatorProfile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile information fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get creator profile information
      tags:
        - User
    patch:
      operationId: CollectionDataController_editUserCreatorProfile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatorProfileEditDto'
      responses:
        '200':
          description: Creator profile information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update creator profile information
      tags:
        - CollectionData
        - User
  /user/{address}/creator/upload-picture:
    put:
      operationId: UserDataController_setUserCreatorProfilePicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Creator profile picture updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update creator profile picture
      tags:
        - User
  /user/{address}/creator/upload-banner:
    put:
      operationId: UserDataController_setUserCreatorBannerPicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Creator profile banner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update creator profile banner
      tags:
        - User
  /user/{address}/creator/reset-picture:
    put:
      operationId: UserDataController_resetUserCreatorProfilePicture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile picture reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Reset creator profile picture
      tags:
        - User
  /user/{address}/creator/reset-banner:
    put:
      operationId: UserDataController_resetUserCreatorBanner
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile banner reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Reset creator profile banner
      tags:
        - User
  /user/{address}/favorite/collections:
    get:
      operationId: UserDataController_retrieveUserFavoriteCollections
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/CollectionStatsFilter'
      responses:
        '200':
          description: Explore collections statistics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user followed collections tickers
      tags:
        - User
        - User
  /user/favorite/{favoriteId}:
    get:
      operationId: UserDataController_retrieveUserFavorite
      parameters:
        - name: favoriteId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Like status checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckLikeStatusResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Check if user has liked an NFT
      tags:
        - User
        - User
  /user/{address}/follow:
    post:
      operationId: UserDataController_followUser
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: User follow status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFavoriteResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Follow or unfollow a user
      tags:
        - User
        - User
  /user/{address}/favorite/users:
    get:
      operationId: UserDataController_retrieveUserFavoriteUsers
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of followed addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Check user list of followed addresses
      tags:
        - User
        - User
  /tokens:
    get:
      operationId: TokenDataController_retrieveTokens
      parameters:
        - name: identifier
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: array
            items:
              type: string
        - name: category
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: array
            items:
              $ref: '#/components/schemas/TokenCategory'
        - name: chain
          required: false
          in: query
          description: Comma separated chain list
          schema:
            type: array
            items:
              $ref: '#/components/schemas/ActivityChain'
      responses:
        '200':
          description: List of tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDataDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get tokens
      tags:
        - Token
  /tokens/swap:
    get:
      operationId: TokenDataController_retrieveTokensForSwap
      parameters: []
      responses:
        '200':
          description: List of tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDataDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get tokens for swap
      tags:
        - Token
  /tokens/usd-price:
    get:
      operationId: TokenDataController_retrieveTokensPrice
      parameters:
        - name: identifier
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: array
            items:
              type: string
        - name: cache
          required: false
          in: query
          description: Cache the result
          schema:
            type: boolean
      responses:
        '200':
          description: XOXNO usd prices
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  EGLD: 30.45
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/egld/fiat-price:
    get:
      operationId: TokenDataController_retrieveEgldFiatPrice
      parameters:
        - name: value
          required: false
          in: query
          description: Value to convert. Default is 1
          schema:
            type: number
        - name: fiatCurrencies
          required: false
          in: query
          description: Comma separated fiat currencies. Default is EUR
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: XOXNO usd prices
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  EUR: 12.45
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/xoxno/info:
    get:
      operationId: TokenDataController_getXOXNOSummaryLending
      parameters: []
      responses:
        '200':
          description: XOXNO info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XoxnoInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch XOXNO statistics
      tags:
        - Token
  /liquid/xoxno/stats:
    get:
      operationId: TokenDataController_getXoxnoLiquidStats
      parameters: []
      responses:
        '200':
          description: Xoxno Liquid statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XoxnoLiquidStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch XOXNO liquid staking statistics
      tags:
        - Token
        - LiquidXOXNO
  /liquid/egld/stats:
    get:
      operationId: TokenDataController_getEGLDLiquidStats
      parameters: []
      responses:
        '200':
          description: EGLD Liquid statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XoxnoLiquidStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch EGLD liquid staking statistics
      tags:
        - Token
        - LiquidEGLD
  /liquid/sui/stats:
    get:
      operationId: TokenDataController_getSuiLiquidStats
      parameters: []
      responses:
        '200':
          description: SUI Liquid statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XoxnoLiquidStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch SUI liquid staking statistics
      tags:
        - Token
        - LiquidSUIStats
  /liquid/xoxno/rate:
    get:
      operationId: XoxnoLiquidScController_getExchangeRate
      parameters: []
      responses:
        '200':
          description: Liquid XOXNO rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch XOXNO liquid staking ratio
      tags:
        - LiquidXOXNO
  /liquid/xoxno/liquid-supply:
    get:
      operationId: XoxnoLiquidScController_getTotalLSSupply
      parameters: []
      responses:
        '200':
          description: Liquid XOXNO supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch XOXNO liquid staking supply
      tags:
        - LiquidXOXNO
  /liquid/xoxno/staked:
    get:
      operationId: XoxnoLiquidScController_getTotalStaked
      parameters: []
      responses:
        '200':
          description: XOXNO staked supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch XOXNO liquid staking total staked supply
      tags:
        - LiquidXOXNO
  /analytics/marketplace-unique-users:
    get:
      operationId: KustoDataController_getMarketplaceUniqueUsers
      parameters:
        - name: before
          required: true
          in: query
          schema:
            type: string
        - name: after
          required: true
          in: query
          schema:
            type: string
        - name: bin
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Marketplace unique users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticsMarketplaceUniqueUsers'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get marketplace unique users
      tags:
        - KustoData
        - NftActivity
  /liquid/egld/rate:
    get:
      operationId: XoxnoEgldLiquidScController_getExchangeRate
      parameters: []
      responses:
        '200':
          description: Liquid EGLD rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD ratio
      tags:
        - LiquidEGLD
  /liquid/egld/liquid-supply:
    get:
      operationId: XoxnoEgldLiquidScController_getTotalLSSupply
      parameters: []
      responses:
        '200':
          description: Liquid EGLD supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD supply
      tags:
        - LiquidEGLD
  /liquid/egld/staked:
    get:
      operationId: XoxnoEgldLiquidScController_getTotalStaked
      parameters: []
      responses:
        '200':
          description: EGLD staked supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD total staked supply
      tags:
        - LiquidEGLD
  /liquid/egld/pending-fees:
    get:
      operationId: XoxnoEgldLiquidScController_getPendingFees
      parameters: []
      responses:
        '200':
          description: EGLD pending rewards as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD pending fees
      tags:
        - LiquidEGLD
  /liquid/egld/pending-undelegate:
    get:
      operationId: XoxnoEgldLiquidScController_getPendingUndelegate
      parameters: []
      responses:
        '200':
          description: EGLD pending undelegate as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD pending undelegate
      tags:
        - LiquidEGLD
  /liquid/egld/pending-delegate:
    get:
      operationId: XoxnoEgldLiquidScController_getPendingDelegate
      parameters: []
      responses:
        '200':
          description: EGLD pending delegate as number
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD pending delegate
      tags:
        - LiquidEGLD
  /liquid/egld/execute-delegate:
    get:
      operationId: XoxnoEgldLiquidScController_executePendingDelegate
      parameters: []
      responses:
        '200':
          description: EGLD pending delegate as number
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Execute Liquid EGLD pending delegate
      tags:
        - LiquidEGLD
  /liquid/egld/execute-undelegate:
    get:
      operationId: XoxnoEgldLiquidScController_executePendingUnDelegate
      parameters: []
      responses:
        '200':
          description: EGLD pending undelegate as number
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Execute Liquid EGLD pending undelegate
      tags:
        - LiquidEGLD
  /liquid/egld/protocol-apr:
    get:
      operationId: XoxnoEgldLiquidScController_getProtocolAPR
      parameters: []
      responses:
        '200':
          description: EGLD protocol APR & APYs as number
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProtocolAprType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD protocol APR
      tags:
        - LiquidEGLD
  /liquid/egld/providers:
    get:
      operationId: XoxnoEgldLiquidScController_getProviders
      parameters: []
      responses:
        '200':
          description: EGLD providers list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProviderDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch Liquid EGLD providers
      tags:
        - LiquidEGLD
  /user/{address}/delegation:
    get:
      operationId: DelegationDataController_getDelegations
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The user's staking delegation data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DelegationDataOutput'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /ash/min-token-quantity:
    get:
      operationId: AshAggregatorController_getMinTokenQuantity
      parameters:
        - name: originalToken
          required: true
          in: query
          schema:
            type: string
        - name: originalTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchSwapRoutesResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch swap routes
      tags:
        - Ash Aggregator
  /ash/max-token-quantity:
    get:
      operationId: AshAggregatorController_getMaxTokenQuantity
      parameters:
        - name: paymentTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
        - name: wantedToken
          required: true
          in: query
          schema:
            type: string
        - name: slippage
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchSwapRoutesResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch swap routes
      tags:
        - Ash Aggregator
  /arda/max-token-quantity:
    get:
      operationId: AshAggregatorController_getArdaMaxTokenQuantity
      parameters:
        - name: paymentTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
        - name: wantedToken
          required: true
          in: query
          schema:
            type: string
        - name: slippage
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArdaSwapResultDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch swap routes
      tags:
        - Ash Aggregator
  /arda/min-token-quantity:
    get:
      operationId: AshAggregatorController_getArdaMinTokenQuantity
      parameters:
        - name: originalToken
          required: true
          in: query
          schema:
            type: string
        - name: originalTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArdaSwapResultDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch swap routes
      tags:
        - Ash Aggregator
  /lending/market/{token}/profile:
    get:
      operationId: LendingDataController_retrieveMarketProfile
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get lending market profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingMarketProfile'
      summary: Get lending market profile
      tags:
        - Lending And Borrowing
  /lending/market/query:
    get:
      operationId: LendingDataController_retrieveMarketProfiles
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/LendingMarketProfileFilter'
      responses:
        '200':
          description: Explore lending markets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingMarketProfileQuery'
      summary: Get lending markets overview
      tags:
        - Lending And Borrowing
  /user/lending/{address}:
    get:
      operationId: LendingDataController_retrieveUserLendingPosition
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: token
          required: false
          in: query
          description: Market token
          schema:
            type: string
      responses:
        '200':
          description: User lending positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingAccountProfile'
      summary: Get my lending & borrowing positions
      tags:
        - Lending And Borrowing
  /lending/market/indexes:
    get:
      operationId: LendingDataController_retrieveMarketIndexes
      parameters: []
      responses:
        '200':
          description: Lending market indexes
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/LendingIndexesDto'
      summary: Get lending market indexes
      tags:
        - Lending And Borrowing
  /user/lending/position/{identifier}:
    get:
      operationId: LendingDataController_retrieveUserLendingSinglePosition
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User lending position
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingAccountProfile'
      summary: Get single lending & borrowing position
      tags:
        - Lending And Borrowing
  /lending/pnl/{identifier}:
    get:
      operationId: LendingDataController_retrieveLendingPnl
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User lending pnl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingAccountPnl'
      summary: Get single lending & borrowing pnl
      tags:
        - Lending And Borrowing
  /user/lending/pnl/{address}:
    get:
      operationId: LendingDataController_retrieveUserLendingPnl
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User lending pnl
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingAccountPnl'
      summary: Get user lending & borrowing pnl
      tags:
        - Lending And Borrowing
  /user/lending/summary/{identifier}:
    get:
      operationId: LendingDataController_retrieveUserAccountSinglePosition
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User lending summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingAccountSummary'
      summary: Get single lending & borrowing summary
      tags:
        - Lending And Borrowing
  /user/lending/image/{nonce}:
    get:
      operationId: LendingDataController_retrieveLendingImage
      parameters:
        - name: nonce
          required: true
          in: path
          schema:
            type: string
        - name: isStatic
          required: true
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: User lending image as svg
          content:
            application/json:
              schema:
                type: string
      summary: Get picture of lending position
      tags:
        - Lending And Borrowing
  /lending/market/emode-categories:
    get:
      operationId: LendingDataController_retrieveMarketProfilesByCategoryIds
      parameters:
        - name: categoryIds
          required: false
          in: query
          description: Comma separated list of category IDs
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Get lending market profiles by category IDs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingEModeCategoryProfile'
      summary: Get lending market profiles by category IDs
      tags:
        - Lending And Borrowing
  /lending/market/{token}/emode-categories:
    get:
      operationId: LendingDataController_retrieveMarketEModeProfiles
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get lending market available e-mode profile
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingEModeCategoryProfile'
      summary: Get lending market available e-mode profile
      tags:
        - Lending And Borrowing
  /lending/market/{token}/analytics:
    get:
      operationId: LendingDataController_retrieveMarketAnalytics
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
        - name: startTime
          required: false
          in: query
          description: Start date as 'yyyy-MM-dd'
          schema:
            type: string
        - name: endTime
          required: false
          in: query
          description: End date as yyyy-MM-dd
          schema:
            type: string
        - name: bin
          required: false
          in: query
          description: Bin size in days, as a number followed by a letter (e.g. 1d)
          schema:
            type: string
      responses:
        '200':
          description: Lending market analytics graph data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingMarketAnalyticsGraph'
      summary: Get lending market analytics graph data
      tags:
        - Lending And Borrowing
  /lending/market/{token}/average:
    get:
      operationId: LendingDataController_retrieveMarketAverages
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Lending market analytics graph data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingMarketAverageGraph'
      summary: Get lending market average analytics graph data
      tags:
        - Lending And Borrowing
  /lending/leaderboard:
    get:
      operationId: LendingDataController_retrieveLendingLeaderboard
      parameters:
        - name: skip
          required: false
          in: query
          description: The number of records to skip
          schema:
            type: number
        - name: top
          required: false
          in: query
          description: The number of records to return
          schema:
            type: number
        - name: orderBy
          required: false
          in: query
          description: The field to order by
          schema:
            $ref: '#/components/schemas/LendingPositionOrderByColumn'
        - name: orderDirection
          required: false
          in: query
          description: The order direction
          schema:
            $ref: '#/components/schemas/KustoOrderDirection'
        - name: token
          required: false
          in: query
          description: The token to filter by
          schema:
            type: string
      responses:
        '200':
          description: List of lending positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingPositionStatus'
      summary: Get lending position leaderboard
      tags:
        - Lending And Borrowing
        - User
  /lending/leaderboard/liquidate:
    get:
      operationId: LendingDataController_retrieveLiquidateablePositions
      parameters: []
      responses:
        '200':
          description: List of liquidateable positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingPositionStatus'
      summary: Get lending liquidateable positions
      tags:
        - Lending And Borrowing
        - User
  /lending/leaderboard/clean-bad-debt:
    get:
      operationId: LendingDataController_retrieveCleanBadDebtPositions
      parameters: []
      responses:
        '200':
          description: List of clean debt positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingPositionStatus'
      summary: Get lending clean debt positions
      tags:
        - Lending And Borrowing
        - User
  /lending/stats:
    get:
      operationId: LendingDataController_retrieveLendingStats
      parameters: []
      responses:
        '200':
          description: Lending protocol stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingOverallStats'
      summary: Get lending protocol stats
      tags:
        - Lending And Borrowing
  /lending/market/prices:
    get:
      operationId: LendingDataController_retrieveLendingMarketsPrices
      parameters:
        - name: returnAsUsd
          required: false
          in: query
          description: Return prices in USD
          schema:
            type: boolean
      responses:
        '200':
          description: Lending markets prices
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  EGLD: 1
      summary: Get token prices as EGLD for all lending markets
      tags:
        - Lending And Borrowing
  /nft/query:
    get:
      operationId: NftDataController_retrieveNfts
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/NftDocFilter'
      responses:
        '200':
          description: NFT query response for the used filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch NFTs based on the query filter
      tags:
        - NftData
        - Nft
  /nft/{identifier}/like:
    post:
      operationId: NftDataController_likeNft
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Like NFT response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeNftDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Like an NFT
      tags:
        - NftData
        - Nft
  /user/{address}/inventory-summary:
    get:
      operationId: NftDataController_retrieveUserInventorySummary
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: activeAuction
          required: false
          in: query
          description: Filter by active auctions
          schema:
            type: boolean
      responses:
        '200':
          description: List of inventory summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventorySummaryDtoHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get inventory summary for collections by user wallet
      tags:
        - NftData
        - User
  /user/{address}/offers:
    get:
      operationId: NftDataController_retrieveUserOffers
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: Type of offers to retrieve
          schema:
            $ref: '#/components/schemas/OfferType'
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftOfferPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user offers
      tags:
        - NftData
        - User
  /nft/offer/query:
    get:
      operationId: NftDataController_retrieveNftOffers
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/NftOfferDocFilter'
      responses:
        '200':
          description: User offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftOfferPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get nft offers
      tags:
        - NftData
        - Nft
  /nft/offer/{identifier}:
    get:
      operationId: NftDataController_retrieveUserSingleOffer
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Offer
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NftOfferDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get single offer
      tags:
        - NftData
  /user/{address}/favorite/nfts:
    get:
      operationId: NftDataController_retrieveUserFavoriteNfts
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User favorite NFTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get the liked NFTs by an user
      tags:
        - NftData
        - User
  /collection/{collection}/attributes:
    get:
      operationId: NftDataController_retrieveCollectionAttributes
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Fetch collection unique attributes and their information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  allOf:
                    - $ref: '#/components/schemas/ValueFp'
                    - type: object
                      additionalProperties:
                        $ref: '#/components/schemas/TraitInfo'
                example:
                  Background:
                    Blue:
                      onSaleCount: 23
                  Type:
                    General:
                      onSaleCount: 23
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get attributes
      tags:
        - NftData
        - Collection
  /nft/{identifier}/offers:
    get:
      operationId: NftDataController_retrieveSingleNftOffers
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
        - name: skip
          required: true
          in: query
          schema:
            type: number
        - name: top
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Single NFT offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftOfferPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get single NFT offers
      tags:
        - NftData
        - Nft
  /collection/{collection}/ranks:
    get:
      operationId: NftDataController_retrieveCollectionRanks
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of ranks order from 1 to the latest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionRanksDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch collection ranks
      tags:
        - NftData
        - Collection
  /collection/{collection}/listings:
    get:
      operationId: NftDataController_retrieveCollectionListings
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Listings of a collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection listings
      tags:
        - NftData
        - Collection
  /nft/pinned:
    get:
      operationId: NftDataController_retrievePinnedCollection
      parameters:
        - name: chain
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Pinned NFTs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NftDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get homepage pinned NFTs
      tags:
        - NftData
        - Nft
  /nft/sign-withdraw:
    post:
      operationId: NftDataController_signListingWithdraw
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignWithdrawDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get signed data
      tags:
        - NftData
        - Nft
  /collection/{collection}/sign-offer:
    post:
      operationId: NftDataController_signOffer
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignAcceptGlobalOfferDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get signed data
      tags:
        - NftData
        - Collection
  /collection/{collection}/sign-mint:
    post:
      operationId: NftDataController_signMint
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignMintDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get signed data
      tags:
        - NftData
        - Collection
  /nft/{identifier}:
    get:
      operationId: NftDataController_retrieveSingleNft
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Single NFT response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftDocFull'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get a single NFT
      tags:
        - NftData
        - Nft
  /collection/{collection}/profile:
    get:
      operationId: CollectionDataController_retrieveCollectionProfile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection profile
      tags:
        - CollectionData
        - Collection
    patch:
      operationId: CollectionDataController_editCollectionProfile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionProfileEditDto'
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection profile
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/floor-price:
    get:
      operationId: CollectionDataController_retrieveCollectionFloorPrice
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - name: token
          required: false
          in: query
          schema:
            default: EGLD
            type: string
      responses:
        '200':
          description: Floor price of the collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorPriceDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get floor price of a collection
      tags:
        - CollectionData
        - Collection
  /collection/floor-price:
    get:
      operationId: CollectionDataController_retrieveBulkCollectionFloorPrice
      parameters:
        - name: collection
          required: false
          in: query
          description: >-
            Comma separated list of collection tickers. For example:
            collection=TEST-123,TEST2-123. Maximum 10 collections.
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Floor price of the collections
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  collection1: 123.45
                  collection2: 67.89
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get floor price of a list of collections
      tags:
        - CollectionData
        - Collection
  /collection/pinned:
    get:
      operationId: CollectionDataController_retrievePinnedCollection
      parameters:
        - name: chain
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Pinned collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PinnedCollectionDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get pinned collections
      tags:
        - CollectionData
        - Collection
  /collection/pinned-drops:
    get:
      operationId: CollectionDataController_retrieveDropsPinnedCollection
      parameters:
        - name: chain
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Pinned drops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionMintProfileDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/pinned-drops:
    get:
      operationId: CollectionDataController_retrieveCollectionPinnedToDrops
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drops page pinned status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPinnedStatusDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Return pin status for collection within drops page
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/pinned:
    get:
      operationId: CollectionDataController_retrieveCollectionPinned
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Home page pinned status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPinnedStatusDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Return pin status for collection within home page
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/follow:
    post:
      operationId: CollectionDataController_followCollection
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Follow a specific collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowCollectionDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Follow a specific collection
      tags:
        - CollectionData
        - Collection
  /collection/query:
    get:
      operationId: CollectionDataController_retrieveCollections
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            $ref: '#/components/schemas/CollectionProfileFilter'
      responses:
        '200':
          description: Drops query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfilePaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch and filter collections
      tags:
        - CollectionData
        - Collection
  /collection/drops/query:
    get:
      operationId: CollectionDataController_retrieveCollectionDrops
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            $ref: '#/components/schemas/CollectionMintProfileFilter'
      responses:
        '200':
          description: Drops query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMintProfilePaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get drops query
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/drop-info:
    get:
      operationId: CollectionDataController_retrieveCollectionMintInfo
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drop info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMintProfileDocWithStages'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - optionalAny: []
      summary: Get drop info
      tags:
        - CollectionData
        - Collection
  /collection/{creatorTag}/{collectionTag}/drop-info:
    get:
      operationId: CollectionDataController_retrieveCollectionMintInfoByTags
      parameters:
        - name: creatorTag
          required: true
          in: path
          schema:
            type: string
        - name: collectionTag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drop info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMintProfileDocWithStages'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - optionalAny: []
      summary: Get drop info
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/upload-picture:
    put:
      operationId: CollectionDataController_setCollectionProfilePicture
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection profile
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/upload-banner:
    put:
      operationId: CollectionDataController_setCollectionBanner
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection profile
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/reset-picture:
    put:
      operationId: CollectionDataController_resetCollectionProfilePicture
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection profile
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/reset-banner:
    put:
      operationId: CollectionDataController_resetCollectionBanner
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection profile
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/holders:
    get:
      operationId: CollectionDataController_retrieveCollectionHolders
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Details of collection holders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionHoldersDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection holders by collection ID
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/holders/export:
    get:
      operationId: CollectionDataController_exportCollectionHolders
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Details of collection holders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionHoldersExportDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection holders by collection ID
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/owner:
    get:
      operationId: CollectionDataController_retrieveCollectionOwner
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The owner of the collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionOwnerDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection owner by collection ID
      tags:
        - CollectionData
        - Collection
  /collection/{collection}/stats:
    get:
      operationId: CollectionDataController_retrieveCollectionStatisticsByCollection
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The collection stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection stats
      tags:
        - CollectionData
        - Collection
  /collection/stats/query:
    get:
      operationId: CollectionDataController_retrieveCollectionStatistics
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/CollectionStatsFilter'
      responses:
        '200':
          description: Explore collections statistics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get explore collections statistics
      tags:
        - CollectionData
        - Collection
  /collection/global-offer/query:
    get:
      operationId: CollectionDataController_retrieveCollectionOffers
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/CollectionOffersFilter'
      responses:
        '200':
          description: Global offers response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalOfferPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get global offers
      tags:
        - CollectionData
        - Collection
  /user/{address}/creator/listing:
    get:
      operationId: CollectionDataController_retrieveCreatorListing
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get creator listings response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get creator all listings
      tags:
        - CollectionData
        - User
  /user/{address}/creator/details:
    get:
      operationId: CollectionDataController_retrieveCreatorDetails
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get creator details information
      tags:
        - CollectionData
        - User
  /launchpad/{scAddress}/shareholders/royalties:
    get:
      operationId: XoxnoMinterScController_getRoyaltiesShareholders
      parameters:
        - name: scAddress
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get Royalties Shareholders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShareholderDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Launchpad
  /launchpad/{scAddress}/shareholders/collection/{collectionTag}:
    get:
      operationId: XoxnoMinterScController_getCollectionShareholders
      parameters:
        - name: scAddress
          required: true
          in: path
          schema:
            type: string
        - name: collectionTag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get Royalties Shareholders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShareholderDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Launchpad
  /user/native-token:
    get:
      operationId: Web2UserDataController_getNativeToken
      parameters:
        - name: originalUrl
          required: false
          in: query
          description: The original URL
          schema:
            type: string
        - name: extraInfo
          required: false
          in: query
          description: The extra info as a string JSON
          schema:
            type: string
      responses:
        '200':
          description: Returns the native token
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      summary: Get native token for the user
      tags:
        - Web2User
  /user/web2:
    get:
      operationId: Web2UserDataController_getWeb2User
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Get Web2 user data
      tags:
        - Web2User
  /user/web2/session-cookie:
    post:
      operationId: Web2UserDataController_createSessionCookie
      parameters: []
      responses:
        '200':
          description: Returns session cookie creation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessWithMessageDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Create session cookie
      tags:
        - Web2User
  /user/web2/wallet:
    post:
      operationId: Web2UserDataController_createWeb2UserWallet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeWalletDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Create Web2 user native wallet
      tags:
        - Web2User
  /user/web2/wallet-switch:
    post:
      operationId: Web2UserDataController_switchWeb2UserWallet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SwitchWalletDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Switch to another wallet
      tags:
        - Web2User
  /user/web2/wallet-link:
    post:
      operationId: Web2UserDataController_linkExternalWallet
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Web2WalletDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Link external wallet
      tags:
        - Web2User
  /user/web2/{index}/wallet-link:
    delete:
      operationId: Web2UserDataController_unlinkExternalWallet
      parameters:
        - name: index
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Unlink external wallet
      tags:
        - Web2User
  /user/web2/shards:
    get:
      operationId: Web2UserDataController_getWeb2UserShards
      parameters: []
      responses:
        '200':
          description: Returns user shards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserShardsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Get Web2 user shards
      tags:
        - Web2User
  /pool/{poolId}/profile:
    get:
      operationId: StakingDataController_retrievePoolDetails
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection staking pool summary
      tags:
        - StakingData
        - Staking
    patch:
      operationId: StakingDataController_editStakingPoolProfile
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StakingEditDto'
      responses:
        '200':
          description: Update staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingPoolDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection staking pool summary
      tags:
        - StakingData
        - Staking
  /pool/{poolId}/whitelist:
    get:
      operationId: StakingDataController_retrievePoolWhitelist
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: NFTs whitelisted by staking pool id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NftDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get the whitelisted NFTs of a staking pool
      tags:
        - StakingData
        - Staking
  /pool/{poolId}/upload-picture:
    put:
      operationId: StakingDataController_setCollectionProfilePicture
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Update staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingPoolDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Update collection staking pool summary
      tags:
        - StakingData
        - Staking
  /user/{address}/staking/available-pools:
    get:
      operationId: StakingDataController_retrieveUserAvailablePools
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking pool summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection staking pool summary
      tags:
        - StakingData
        - User
  /user/{address}/staking/owned-collections:
    get:
      operationId: StakingDataController_retrieveUserOwnedCollections
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Details of owned collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedCollectionsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get owned collections by user ID
      tags:
        - StakingData
        - User
  /user/{address}/staking/owned-pools:
    get:
      operationId: StakingDataController_retrieveUserOwnedPools
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking owned staking pools summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get owned collections staking pools summary
      tags:
        - StakingData
        - User
  /user/{address}/staking/summary:
    get:
      operationId: StakingDataController_retrieveUserStakingSummary
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User staking summary
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStakingSummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user staking summary by user ID
      tags:
        - StakingData
        - User
  /user/{address}/staking/creator:
    get:
      operationId: StakingDataController_retrieveUserStakingCreator
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get staking creator config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingCreatorDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get creator settings for staking
      tags:
        - StakingData
        - User
  /user/{address}/staking/collection/{collection}:
    get:
      operationId: StakingDataController_retrieveUserCollectionStaking
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get staking creator config
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user staking details by collection
      tags:
        - StakingData
        - User
  /user/{address}/staking/pool/{poolId}/nfts:
    get:
      operationId: StakingDataController_retrieveUserPoolStaking
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: poolId
          required: true
          in: path
          schema:
            type: number
        - name: status
          required: false
          in: query
          description: >-
            The status of the NFTs to retrieve. Options are: staked, unStaked,
            available. Default is staked.
          schema:
            $ref: '#/components/schemas/StakingStatus'
      responses:
        '200':
          description: Get user staking NFTs by poolId and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingUserPoolNfts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get user staking NFTs by poolId and status
      tags:
        - StakingData
        - User
  /collection/{collection}/staking/summary:
    get:
      operationId: StakingDataController_retrieveCollectionPoolStaking
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - optionalAny: []
      summary: Get collection staking summary
      tags:
        - StakingData
        - Collection
  /collection/{collection}/staking/delegators:
    get:
      operationId: StakingDataController_retrieveCollectionStakingDelegators
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of staking delegators addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get collection all staking delegators
      tags:
        - StakingData
        - Collection
  /collection/staking/explore:
    get:
      operationId: StakingDataController_exploreCollectionPoolStaking
      parameters: []
      responses:
        '200':
          description: List of staking pools and their details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingExploreDtoHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get explore staking pools
      tags:
        - StakingData
        - Collection
  /user/{creatorTag}/owned-services:
    get:
      operationId: StakingDataController_retrieveCreatorOwnedServicesByTag
      parameters:
        - name: creatorTag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: All owned services by a brand identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedServicesDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get all owned services by a brand
      tags:
        - StakingData
        - User
  /search:
    get:
      operationId: SearchDataController_globalSearch
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/FilterQueryDto'
      responses:
        '200':
          description: Global search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResourcesPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Global Search
      tags:
        - Search
  /user/search:
    get:
      operationId: SearchDataController_userSearch
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/FilterQueryDto'
      responses:
        '200':
          description: Global user search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResourcesPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Global User Search
      tags:
        - Search
  /collection/search:
    get:
      operationId: SearchDataController_collectionSearch
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/FilterQueryDto'
      responses:
        '200':
          description: Global collection search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResourcesPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Global collection Search
      tags:
        - Search
  /collection/drops/search:
    get:
      operationId: SearchDataController_collectionDropsSearch
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/FilterQueryDto'
      responses:
        '200':
          description: Global collection drops search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionMintProfilePaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Global collection drops Search
      tags:
        - Search
  /nft/search/query:
    get:
      operationId: SearchDataController_nftSearch
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/NftDocFilter'
      responses:
        '200':
          description: Global collection drops search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Global nft search
      tags:
        - Search
  /lending/market-sc:
    get:
      operationId: XoxnoLendingScController_getMarketSCs
      parameters: []
      responses:
        '200':
          description: Get all market SCs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      tags:
        - Lending SC
  /lending/active-accounts:
    get:
      operationId: XoxnoLendingScController_getAllActiveAccounts
      parameters: []
      responses:
        '200':
          description: Get all active accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
      tags:
        - Lending SC
  /lending/account/{nonce}/attributes:
    get:
      operationId: XoxnoLendingScController_getAccountAttributes
      parameters:
        - name: nonce
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Get account attributes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingNftAttributes'
      tags:
        - Lending SC
  /lending/account/{nonce}/positions:
    get:
      operationId: XoxnoLendingScController_getAccountPositions
      parameters:
        - name: nonce
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Get account positions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LendingNftAttributes'
      tags:
        - Lending SC
  /lending/market/{token}/price/egld:
    get:
      operationId: XoxnoLendingScController_getTokenPrice
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get lending token price
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LendingTokenPriceDto'
      tags:
        - Lending SC
  /faucet:
    post:
      operationId: XoxnoLendingScController_setTokenPrice
      parameters: []
      responses:
        '200':
          description: Request faucet tokens
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - requiredAny: []
        - bearer: []
      tags:
        - Lending SC
        - User
  /user/notifications:
    get:
      operationId: NotificationDataController_getNotifications
      parameters:
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: Get user notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get notifications of an user
      tags:
        - User
  /user/notifications/unread-count:
    get:
      operationId: NotificationDataController_getNotificationCount
      parameters: []
      responses:
        '200':
          description: User notifications count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get the un read notification count
      tags:
        - User
  /user/notifications/clear:
    delete:
      operationId: NotificationDataController_clearAllNotifications
      parameters: []
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Delete a user conversation
      tags:
        - User
  /user/notifications/read:
    patch:
      operationId: NotificationDataController_setNotificationAsRead
      parameters:
        - name: id
          required: false
          in: query
          description: Notification id
          schema:
            type: string
      responses:
        '200':
          description: Updated notification is returned or success status
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/NotificationDoc'
                  - $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Set as read notifications, leave empty ID to read all
      tags:
        - User
  /mobile/device/register:
    post:
      operationId: MobileNotificationsController_registerDevice
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MobileDeviceRegistrationDto'
      responses:
        '200':
          description: Device registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDeviceDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Register mobile device for push notifications
      tags:
        - Mobile Notifications
  /mobile/device/{deviceId}:
    get:
      operationId: MobileNotificationsController_getMobileDevice
      parameters:
        - name: deviceId
          required: true
          in: path
          description: Device ID to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Device retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MobileDeviceDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '404':
          description: Device not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Get mobile device by device ID
      tags:
        - Mobile Notifications
    delete:
      operationId: MobileNotificationsController_deactivateDevice
      parameters:
        - name: deviceId
          required: true
          in: path
          description: Device ID to deactivate
          schema:
            type: string
      responses:
        '200':
          description: Device deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredWeb2: []
      summary: Deactivate mobile device
      tags:
        - Mobile Notifications
  /mobile/history:
    get:
      operationId: MobileNotificationsController_getNotificationHistory
      parameters:
        - name: top
          required: false
          in: query
          description: Number of notifications to return
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of notifications to skip
          schema:
            type: number
      responses:
        '200':
          description: Push notification history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get push notification history for user
      tags:
        - Mobile Notifications
  /mobile/history/unread-count:
    get:
      operationId: MobileNotificationsController_getUnreadNotificationCount
      parameters: []
      responses:
        '200':
          description: Unread notification count retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get unread push notification count for user
      tags:
        - Mobile Notifications
  /mobile/history/{notificationId}/read:
    put:
      operationId: MobileNotificationsController_markNotificationAsRead
      parameters:
        - name: notificationId
          required: true
          in: path
          description: ID of the notification to mark as read
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PushNotificationDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Mark push notification as read
      tags:
        - Mobile Notifications
  /mobile/history/read-all:
    put:
      operationId: MobileNotificationsController_markAllNotificationsAsRead
      parameters: []
      responses:
        '200':
          description: All notifications marked as read successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Mark all push notifications as read
      tags:
        - Mobile Notifications
  /mobile/history/clear-all:
    delete:
      operationId: MobileNotificationsController_clearNotificationHistory
      parameters: []
      responses:
        '200':
          description: Notification history cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Clear all push notification history
      tags:
        - Mobile Notifications
  /mobile/history/clear-id/{notificationId}:
    delete:
      operationId: MobileNotificationsController_clearNotificationId
      parameters:
        - name: notificationId
          required: true
          in: path
          description: ID of the notification to clear
          schema:
            type: string
      responses:
        '200':
          description: Notification cleared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Clear push notification
      tags:
        - Mobile Notifications
  /eventNotifications/event/{eventId}/update:
    post:
      operationId: EventNotificationsController_sendEventUpdate
      parameters:
        - name: eventId
          required: true
          in: path
          description: Event ID to send update for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationDto'
      responses:
        '200':
          description: Event update notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Send update notification to event attendees
      tags:
        - Event Notifications
  /eventNotifications/event/{eventId}/reminder:
    post:
      operationId: EventNotificationsController_sendEventReminder
      parameters:
        - name: eventId
          required: true
          in: path
          description: Event ID to send reminder for
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationDto'
      responses:
        '200':
          description: Event reminder notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Send reminder notification to event attendees
      tags:
        - Event Notifications
  /eventNotifications/creator/marketing:
    post:
      operationId: EventNotificationsController_sendCreatorMarketing
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatorMarketingNotificationDto'
      responses:
        '200':
          description: Creator marketing notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Send marketing notification to all past attendees of creator events
      tags:
        - Event Notifications
  /eventNotifications/user/{userId}/direct:
    post:
      operationId: EventNotificationsController_sendUserSpecificNotification
      parameters:
        - name: userId
          required: true
          in: path
          description: User ID to send notification to
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationDto'
      responses:
        '200':
          description: User-specific notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationSuccessResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Send direct notification to specific user
      tags:
        - Event Notifications
  /activity/query:
    get:
      operationId: NftActivityDataController_retrieveNftActivity
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/NftActivityFilter'
      responses:
        '200':
          description: Activity history response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftActivityPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Query activity history
      tags:
        - NftActivityData
        - NftActivity
  /activity/{identifier}:
    get:
      operationId: NftActivityDataController_retrieveUserSingleActivity
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Activity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftActivityDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get single activity
      tags:
        - NftActivityData
  /analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveVolumeGraphData
      parameters:
        - name: startTime
          required: false
          in: query
          description: Start date as 'yyyy-MM-dd'
          schema:
            type: string
        - name: endTime
          required: false
          in: query
          description: End date as yyyy-MM-dd
          schema:
            type: string
        - name: bin
          required: false
          in: query
          description: Bin size in days, as a number followed by a letter (e.g. 1d)
          schema:
            type: string
        - name: chain
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Analytics volume response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VolumeGraph'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get analytics volume
      tags:
        - NftActivityData
        - NftActivity
  /collection/{collection}/analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveCollectionVolumeGraphData
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - name: startTime
          required: false
          in: query
          description: Start date as 'yyyy-MM-dd'
          schema:
            type: string
        - name: endTime
          required: false
          in: query
          description: End date as yyyy-MM-dd
          schema:
            type: string
        - name: bin
          required: false
          in: query
          description: Bin size in days, as a number followed by a letter (e.g. 1d)
          schema:
            type: string
      responses:
        '200':
          description: Collection analytics volume response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticsVolumeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get analytics volume
      tags:
        - NftActivityData
        - Collection
  /user/{address}/analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveUserTradingSummary
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User analytics fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAnalyticsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Fetch user analytics
      tags:
        - NftActivityData
        - User
  /analytics/overview:
    get:
      operationId: NftActivityDataController_retrieveOverallStatistics
      parameters:
        - name: chain
          required: true
          in: query
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Global analytics overview response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalAnalyticsOverviewResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get global analytics overview
      tags:
        - NftActivityData
        - NftActivity
  /user/stats:
    get:
      operationId: NftActivityDataController_retrieveUserStatistics
      parameters:
        - name: skip
          required: false
          in: query
          description: The number of records to skip
          schema:
            type: number
        - name: top
          required: false
          in: query
          description: The number of records to return
          schema:
            type: number
        - name: orderBy
          required: false
          in: query
          description: 'The field to order by. Possible values: totalVolume'
          schema:
            $ref: '#/components/schemas/UserStatsOrderByColumn'
        - name: orderDirection
          required: false
          in: query
          description: 'The order direction. Possible values: asc | desc'
          schema:
            $ref: '#/components/schemas/KustoOrderDirection'
      responses:
        '200':
          description: List of user stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get users stats
      tags:
        - NftActivityData
        - User
  /user/xoxno-drop:
    get:
      operationId: NftActivityDataController_retrieveUserXoxnoDropScore
      parameters:
        - name: skip
          required: false
          in: query
          description: The number of records to skip
          schema:
            type: number
        - name: top
          required: false
          in: query
          description: The number of records to return
          schema:
            type: number
        - name: address
          required: false
          in: query
          description: The user address to filter by
          schema:
            type: string
      responses:
        '200':
          description: List of user stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AirdropDtoHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - NftActivityData
        - User
  /user/me/xoxno-drop:
    get:
      operationId: NftActivityDataController_retrieveMyXoxnoDropScore
      parameters: []
      responses:
        '200':
          description: List of user stats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AirdropDtoHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      tags:
        - NftActivityData
        - User
  /user/login:
    post:
      operationId: AuthController_loginUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '201':
          description: Access token and expiration time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Login and get access token
      tags:
        - User
  /transactions/{txHash}:
    get:
      operationId: TransactionController_getTransaction
      parameters:
        - name: txHash
          required: true
          in: path
          schema:
            type: string
        - name: withResults
          required: false
          in: query
          description: Include smart contract results in the response. Default is false.
          schema:
            type: boolean
      responses:
        '200':
          description: 'Transaction information '
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetailed'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Transactions
  /transactions/{txHash}/status:
    get:
      operationId: TransactionController_getTransactionStatus
      parameters:
        - name: txHash
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionProcessStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Check the final transaction status
      tags:
        - Transactions
  /transaction/cost:
    post:
      operationId: TransactionController_getTransactionCost
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '200':
          description: Transaction cost
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCostData'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Get the cost of a transaction
      tags:
        - Transactions
  /transactions:
    post:
      operationId: TransactionController_createTransaction
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSendResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Send a transaction to the blockchain
      tags:
        - Transactions
  /transactions/batch:
    post:
      operationId: TransactionController_createTransactionBatch
      parameters:
        - name: isRelay
          required: false
          in: query
          description: Whether to send the transaction to the relay
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionSendResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Send a transaction to the blockchain
      tags:
        - Transactions
  /user/chat/message:
    post:
      operationId: ChatDataController_sendChatMessage
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendChatMessageDto'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageDocHydrated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Send a private message
      tags:
        - Chat
  /user/chat/conversation:
    get:
      operationId: ChatDataController_getChatConversation
      parameters:
        - name: isGroupChat
          required: false
          in: query
          description: >-
            If undefined, will return all conversations. If true, will return
            group chats. If false, will return direct messages.
          schema:
            type: boolean
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User chat conversations summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserConversationPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Fetch user chat conversations summary
      tags:
        - Chat
  /user/chat/conversation/{conversationId}:
    get:
      operationId: ChatDataController_getConversationMessageById
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
        - name: receiver
          required: true
          in: query
          schema:
            type: string
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User chat conversation messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessagePaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Fetch user chat conversation messages
      tags:
        - Chat
    delete:
      operationId: ChatDataController_deleteConversation
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Delete a user conversation
      tags:
        - Chat
  /user/chat/conversation-summary:
    get:
      operationId: ChatDataController_getUserConversationSummary
      parameters: []
      responses:
        '200':
          description: Global conversation summary fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConversationSummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Fetch global conversation summary
      tags:
        - Chat
  /user/chat/conversation/{conversationId}/message/{messageId}:
    delete:
      operationId: ChatDataController_deleteUserConversationMessage
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
        - name: messageId
          required: true
          in: path
          schema:
            type: string
        - name: deleteForAll
          required: false
          in: query
          description: Delete message for all users
          schema:
            type: boolean
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Delete a user conversation
      tags:
        - Chat
  /user/chat/block:
    get:
      operationId: ChatDataController_getBlockedUsers
      parameters: []
      responses:
        '200':
          description: Blocked chats fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBlockPaginated'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Fetch blocked chats
      tags:
        - Chat
  /user/chat/block/{address}:
    post:
      operationId: ChatDataController_blockUser
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Block a user
      tags:
        - Chat
  /user/chat/token:
    post:
      operationId: AzureWsController_generateChatAccessToken
      parameters: []
      responses:
        '201':
          description: WebSocket connection token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSocketTokenDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - requiredAny: []
        - bearer: []
      summary: Get WebSocket connection token
      tags:
        - AzureWs
        - Chat
  /hatom/user/{address}:
    get:
      operationId: LendingBorrowingController_getUser
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Hatom positions of user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      summary: Hatom positions of user
      tags:
        - Accumulator
  /countries:
    get:
      operationId: TicketingDataController_getCountries
      parameters: []
      responses:
        '200':
          description: Countries
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
        - bearer: []
      tags:
        - Ticketing
  /event:
    post:
      operationId: TicketingDataController_createEvent
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventProfileCreateDto'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create new event
      tags:
        - Ticketing
  /event/{eventId}:
    get:
      operationId: TicketingDataController_getEventById
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - optionalAny: []
      summary: Get event details
      tags:
        - Ticketing
    patch:
      operationId: TicketingDataController_editEvent
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventProfileEditDto'
      responses:
        '201':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event details
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteEvent
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event fully deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete event and all related data (hard delete)
      tags:
        - Ticketing
  /event/profile/query:
    get:
      operationId: TicketingDataController_getEvents
      parameters:
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/EventProfileFilter'
      responses:
        '200':
          description: Event profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfileQuery'
      security:
        - bearer: []
      summary: Get events
      tags:
        - Ticketing
  /event/{eventId}/profile:
    put:
      operationId: TicketingDataController_setEventProfilePicture
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event profile image
      tags:
        - Ticketing
  /event/{eventId}/background:
    put:
      operationId: TicketingDataController_setEventBackgroundPicture
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event background
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event background image
      tags:
        - Ticketing
  /event/{eventId}/description:
    put:
      operationId: TicketingDataController_setEventDescription
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event description
      tags:
        - Ticketing
  /event/{eventId}/description/image:
    put:
      operationId: TicketingDataController_uploadEventDescriptionImage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded event description image url
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
        - requiredAny: []
      summary: Upload event description image
      tags:
        - Ticketing
  /event/{eventId}/description/image/{imageId}:
    delete:
      operationId: TicketingDataController_deleteEventDescriptionImage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: imageId
          required: true
          in: path
          description: Image file name without extension
          schema:
            type: string
      responses:
        '200':
          description: Deleted event description image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete event description image
      tags:
        - Ticketing
  /event/{eventId}/register:
    post:
      operationId: TicketingDataController_registerForEvent
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: invitationId
          required: false
          in: query
          description: ID of the invitation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventGuestRegistrationDto'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponseDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Register for an event
      tags:
        - Ticketing
  /event/{eventId}/ticket:
    post:
      operationId: TicketingDataController_createEventTicketType
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTicketProfileCreateDto'
      responses:
        '201':
          description: Event ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create new event ticket
      tags:
        - Ticketing
    get:
      operationId: TicketingDataController_getEventTickets
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event ticket details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTicketProfileDoc'
      security:
        - bearer: []
      summary: Get event tickets
      tags:
        - Ticketing
  /event/{eventId}/ticket/{ticketId}:
    get:
      operationId: TicketingDataController_getEventTicketById
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      responses:
        '200':
          description: Event ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      security:
        - bearer: []
      summary: Get event ticket details
      tags:
        - Ticketing
    patch:
      operationId: TicketingDataController_editEventTicket
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTicketProfileEditDto'
      responses:
        '201':
          description: Event ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event ticket details
      tags:
        - Ticketing
    put:
      operationId: TicketingDataController_uploadEventTicketImage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded event ticket profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Upload event ticket profile
      tags:
        - Ticketing
    post:
      operationId: TicketingDataController_createGooglePassClass
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      responses:
        '201':
          description: Google Pass class created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
      summary: Create or update Google Pass class
      tags:
        - Ticketing
  /event/{eventId}/stage:
    post:
      operationId: TicketingDataController_createEventTicketStage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventStageProfileCreateDto'
      responses:
        '201':
          description: Event stage created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create new event stage
      tags:
        - Ticketing
    get:
      operationId: TicketingDataController_getEventStages
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: isEnabled
          required: false
          in: query
          description: Filter by enabled status
          schema:
            type: boolean
      responses:
        '200':
          description: Event stage details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventStageProfileDoc'
      security:
        - bearer: []
      summary: Get event stages
      tags:
        - Ticketing
  /event/{eventId}/stage/{stageId}:
    get:
      operationId: TicketingDataController_getEventStageById
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
      responses:
        '200':
          description: Event stage details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      security:
        - bearer: []
      summary: Get event stage details
      tags:
        - Ticketing
    patch:
      operationId: TicketingDataController_editEventStage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventStageProfileEditDto'
      responses:
        '201':
          description: Event stage updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Update event stage details
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteEventStage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
      responses:
        '200':
          description: Event stage deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete event stage
      tags:
        - Ticketing
  /event/{eventId}/calculate-prices:
    post:
      operationId: TicketingDataController_calculateTicketPrices
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TicketCalculationRequestDto'
      responses:
        '201':
          description: Ticket prices calculated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketPricesResponse'
      security:
        - bearer: []
      summary: Calculate ticket prices with discounts
      tags:
        - Ticketing
  /event/{eventId}/validate-discount:
    post:
      operationId: TicketingDataController_validateDiscountCode
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '201':
          description: Discount code validated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DiscountCodeValidationResponse'
      security:
        - bearer: []
      summary: Validate discount code
      tags:
        - Ticketing
  /user/{address}/creator/events:
    get:
      operationId: TicketingDataController_getCreatorEvents
      parameters:
        - name: address
          required: true
          in: path
          description: Address of the creator
          schema:
            type: string
      responses:
        '200':
          description: Creator events details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
      security:
        - bearer: []
        - optionalAny: []
      summary: Get creator events created
      tags:
        - Ticketing
        - User
  /event/{eventId}/invite:
    post:
      operationId: TicketingDataController_createInvitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EventInvitationCreateDto'
      responses:
        '201':
          description: Invitations created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventInvitationDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create event invitation
      tags:
        - Ticketing
  /event/{eventId}/invite/query:
    get:
      operationId: TicketingDataController_getEventInvitations
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/EventInvitationFilter'
      responses:
        '200':
          description: Event invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitationQuery'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event invitations
      tags:
        - Ticketing
  /event/{eventId}/invite/{inviteId}:
    get:
      operationId: TicketingDataController_getVoucherData
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
      responses:
        '200':
          description: Invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitation'
      security:
        - bearer: []
      summary: Get event invitation details
      tags:
        - Ticketing
    post:
      operationId: TicketingDataController_claimInvitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventClaimInvitationDto'
      responses:
        '201':
          description: Invitation claimed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventAcceptInvitation'
      security:
        - bearer: []
        - requiredAny: []
      summary: Claim invitation
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_cancelInvitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
      responses:
        '201':
          description: Invitation claimed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitationDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Cancel invitation
      tags:
        - Ticketing
  /event/{eventId}/voucher/query:
    get:
      operationId: TicketingDataController_getEventVouchers
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/EventVoucherFilter'
      responses:
        '200':
          description: List of vouchers for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherQuery'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event vouchers for event
      tags:
        - Ticketing
  /event/{eventId}/questions:
    get:
      operationId: TicketingDataController_getEventQuestions
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: List of custom questions for the event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventQuestionDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event custom questions
      tags:
        - Ticketing
  /event/{eventId}/question:
    post:
      operationId: TicketingDataController_createEventQuestion
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventQuestionCreateDto'
      responses:
        '201':
          description: Custom question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventQuestionDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create custom question for event
      tags:
        - Ticketing
  /event/{eventId}/question/{questionId}:
    patch:
      operationId: TicketingDataController_editEventQuestion
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: questionId
          required: true
          in: path
          description: ID of the question
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventQuestionEditDto'
      responses:
        '201':
          description: Custom question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventQuestionDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Edit custom question for event
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteEventQuestion
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: questionId
          required: true
          in: path
          description: ID of the question
          schema:
            type: string
      responses:
        '200':
          description: Custom question deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete custom question for event
      tags:
        - Ticketing
  /event/{eventId}/guest/query:
    get:
      operationId: TicketingDataController_getEventGuests
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            $ref: '#/components/schemas/EventGuestFilter'
      responses:
        '200':
          description: Event guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGuestProfileQuery'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event guests
      tags:
        - Ticketing
  /event/{eventId}/guest/{address}:
    get:
      operationId: TicketingDataController_getEventGuest
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Guest wallet address
          schema:
            type: string
      responses:
        '200':
          description: Event guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGuestProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event guest details
      tags:
        - Ticketing
  /event/{eventId}/guest-export:
    get:
      operationId: TicketingDataController_getEventGuestExport
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: List of guest details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventGuestExport'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get list of all guests
      tags:
        - Ticketing
  /event/{eventId}/role:
    post:
      operationId: TicketingDataController_createUserRole
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUserRoleCreateDto'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRole'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create event user role
      tags:
        - Ticketing
    patch:
      operationId: TicketingDataController_editUserRole
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUserRoleEditDto'
      responses:
        '201':
          description: Role edited
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRole'
      security:
        - bearer: []
        - requiredAny: []
      summary: Edit event user role
      tags:
        - Ticketing
    get:
      operationId: TicketingDataController_getEventUserRoles
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventUserRole'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event roles
      tags:
        - Ticketing
  /event/{eventId}/role/{roleId}:
    delete:
      operationId: TicketingDataController_deleteRole
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Address of the user role to delete
          schema:
            type: string
      responses:
        '200':
          description: Event user role deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete event user role
      tags:
        - Ticketing
    post:
      operationId: TicketingDataController_acceptRole
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          description: ID of the role
          schema:
            type: string
      responses:
        '201':
          description: Event user role accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Accept event user role
      tags:
        - Ticketing
    get:
      operationId: TicketingDataController_getEventUserRolesById
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          description: ID of the role
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      security:
        - bearer: []
      summary: Get event roles by id
      tags:
        - Ticketing
  /event/{eventId}/guest:
    delete:
      operationId: TicketingDataController_deleteGuest
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Guest deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
      security:
        - bearer: []
        - requiredAny: []
      tags:
        - Ticketing
  /event/{eventId}/roleOf/{address}:
    get:
      operationId: TicketingDataController_getEventUserRole
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: User wallet address
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get event user role details
      tags:
        - Ticketing
  /user/me/event:
    get:
      operationId: TicketingDataController_getMyEvents
      parameters:
        - name: extended
          required: true
          in: query
          description: Get also created events or events that the user is part of as a team
          schema:
            type: boolean
      responses:
        '200':
          description: Top upcoming events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get my top upcoming events (3 attending + 3 hosting)
      tags:
        - Ticketing
  /user/me/events/past:
    get:
      operationId: TicketingDataController_getPastEventsAttended
      parameters: []
      responses:
        '200':
          description: Past events attended by the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get past events where user attended as guest
      tags:
        - Ticketing
  /user/me/events/hosted:
    get:
      operationId: TicketingDataController_getHostedEventsOrWithRole
      parameters: []
      responses:
        '200':
          description: Events where user is host or has a role
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get events where user is host or has a role
      tags:
        - Ticketing
  /user/me/events/upcoming:
    get:
      operationId: TicketingDataController_getOngoingAndFutureEventsAttending
      parameters: []
      responses:
        '200':
          description: Ongoing and future events user is attending
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get ongoing and future events user is attending
      tags:
        - Ticketing
  /user/me/event/badge:
    get:
      operationId: TicketingDataController_generateQR
      parameters: []
      responses:
        '200':
          description: BASE64 Badge QR
          content:
            application/json:
              schema:
                type: string
      security:
        - bearer: []
        - requiredAny: []
      summary: Create badge QR
      tags:
        - Ticketing
  /user/me/event/badge/payload:
    get:
      operationId: TicketingDataController_generateQRPayload
      parameters: []
      responses:
        '200':
          description: String Badge QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BageQRData'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create badge QR
      tags:
        - Ticketing
  /event/{eventId}/scan:
    post:
      operationId: TicketingDataController_eventScanTickets
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCheckInQR'
      responses:
        '201':
          description: String Badge QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketValidationResult'
      security:
        - bearer: []
        - requiredAny: []
      summary: Validate QR
      tags:
        - Ticketing
  /event/{eventId}/voucher:
    post:
      operationId: TicketingDataController_createEventVoucher
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventVoucherCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Create a new event voucher
      tags:
        - Ticketing
  /event/{eventId}/voucher/{voucherCode}:
    patch:
      operationId: TicketingDataController_editEventVoucher
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: voucherCode
          required: true
          in: path
          description: Code of the voucher
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventVoucherEditDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Edit an existing event voucher
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteEventVoucher
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: voucherCode
          required: true
          in: path
          description: Code of the voucher
          schema:
            type: string
      responses:
        '200':
          description: Deleted event description image
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherDoc'
      security:
        - bearer: []
        - requiredAny: []
      summary: Delete an existing event voucher
      tags:
        - Ticketing
  /event/{eventId}/manual-check-in:
    post:
      operationId: TicketingDataController_manualCheckIn
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualCheckInDto'
      responses:
        '200':
          description: Check-in result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketValidationResult'
      security:
        - bearer: []
        - requiredAny: []
      summary: Manual check-in
      tags:
        - Ticketing
  /event/{eventId}/answered-questions/{address}:
    get:
      operationId: TicketingDataController_getAnsweredQuestions
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Guest wallet address
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnsweredQuestionWithDetails'
      security:
        - bearer: []
        - requiredAny: []
      summary: Get answered questions with details for a guest
      tags:
        - Ticketing
  /event/{eventId}/guest/approve:
    patch:
      operationId: TicketingDataController_approveOrRejectGuestRegistration
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EventGuestApproveDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventGuestProfile'
      security:
        - bearer: []
        - requiredAny: []
      summary: Approve or reject guests registration
      tags:
        - Ticketing
  /event/{eventId}/google-pass/{address}:
    get:
      operationId: TicketingDataController_createGooglePassForGuest
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Guest wallet address
          schema:
            type: string
      responses:
        '201':
          description: Google Pass created for guest
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
      security:
        - bearer: []
      summary: Create Google Pass for guest
      tags:
        - Ticketing
  /event/profile/location:
    get:
      operationId: TicketingDataController_getEventLocations
      parameters: []
      responses:
        '200':
          description: Event locations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventCountGroupedByCountry'
      security:
        - bearer: []
      summary: Get event locations
      tags:
        - Ticketing
  /event/{eventId}/referral-config:
    post:
      operationId: TicketingDataController_createReferralConfig
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventReferralConfigCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralConfigDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Create a new referral configuration for an event
      tags:
        - Ticketing
  /event/{eventId}/referral-config/{configId}:
    patch:
      operationId: TicketingDataController_editReferralConfig
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: configId
          required: true
          in: path
          description: ID of the referral configuration
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventReferralConfigEditDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralConfigDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Edit a referral configuration for an event
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteReferralConfig
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: configId
          required: true
          in: path
          description: ID of the referral configuration
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralConfigDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Delete a referral configuration for an event
      tags:
        - Ticketing
  /event/{eventId}/referral-configs:
    get:
      operationId: TicketingDataController_getReferralConfigs
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: false
          in: query
          description: Filter query string
          schema:
            $ref: '#/components/schemas/EventReferralConfigFilter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralConfigPaginated'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Get referral configurations for an event
      tags:
        - Ticketing
  /event/{eventId}/referral:
    post:
      operationId: TicketingDataController_createReferral
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventReferralCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Create a new referral for an event
      tags:
        - Ticketing
  /event/{eventId}/referral/{referralCode}:
    patch:
      operationId: TicketingDataController_editReferral
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: referralCode
          required: true
          in: path
          description: Referral code
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventReferralEditDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Edit a referral for an event
      tags:
        - Ticketing
    delete:
      operationId: TicketingDataController_deleteReferral
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: referralCode
          required: true
          in: path
          description: Referral code
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Delete a referral for an event
      tags:
        - Ticketing
  /event/{eventId}/referrals:
    get:
      operationId: TicketingDataController_getReferrals
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: false
          in: query
          description: Filter query string
          schema:
            $ref: '#/components/schemas/EventReferralFilter'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventReferralPaginated'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Get referrals for an event
      tags:
        - Ticketing
  /event/{eventId}/referrals/self-serviced:
    get:
      operationId: TicketingDataController_getSelfServicedReferrals
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventReferralDoc'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Get self-serviced referrals for a specific event or all events
      tags:
        - Ticketing
  /event/{eventId}/notify-attendees:
    post:
      description: >-
        Event owners and team members can send notifications to all registered
        attendees
      operationId: TicketingDataController_sendEventNotificationToAttendees
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationDto'
      responses:
        '200':
          description: Notification sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessWithMessageDto'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Send notification to all attendees of an event
      tags:
        - Ticketing
  /notify/global-broadcast:
    post:
      description: Admin-only endpoint to send marketing notifications to all users
      operationId: TicketingDataController_sendGlobalBroadcastNotification
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventNotificationDto'
      responses:
        '200':
          description: Global broadcast sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessWithMessageDto'
      security:
        - bearer: []
        - requiredAny: []
        - bearer: []
      summary: Send global broadcast notification to all users
      tags:
        - Ticketing
info:
  title: XOXNO APIs
  description: APIs for XOXNO marketplace
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    ErrorResponseDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: Error message explaining what happened
        timestamp:
          type: string
          example: '2024-07-10T13:36:22.603Z'
        path:
          type: string
          example: /user/abd/network-account
      required:
        - statusCode
        - message
        - timestamp
        - path
    ActiveGuardianDto:
      type: object
      properties:
        activationEpoch:
          type: number
          example: 1099
        address:
          type: string
          example: erd1vhe5a5wyf62ylu4cvwjm0rg3ukwp8tusj0t2vxme5c3aav9jd9ws2c43dq
        serviceUID:
          type: string
          example: INVISIBLE_GUARDIAN
      required:
        - activationEpoch
        - address
        - serviceUID
    UserNetworkInfoDto:
      type: object
      properties:
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        nonce:
          type: number
          example: 3339
        balanceShort:
          type: number
          example: 0.5
        username:
          type: string
          example: '@mihaieremia'
        isUpgradeable:
          type: boolean
          example: false
        isReadable:
          type: boolean
          example: false
        isGuarded:
          type: boolean
          example: true
        isPayable:
          type: boolean
          example: false
        isPayableBySmartContract:
          type: boolean
          example: false
        balance:
          type: string
          example: '499779492251062403'
        shard:
          type: number
          example: 2
        guarded:
          type: boolean
          example: true
        activeGuardian:
          $ref: '#/components/schemas/ActiveGuardianDto'
        usdValue:
          type: number
          example: 18.254
      required:
        - address
        - nonce
        - balanceShort
        - username
        - balance
        - shard
        - guarded
        - usdValue
    WalletDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 7514.91
        egldValue:
          type: number
          example: 205.899
        weight:
          type: number
          example: 100
      required:
        - usdValue
        - egldValue
        - weight
    EsdtsDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 7496.669
        egldValue:
          type: number
          example: 205.399
        weight:
          type: number
          example: 99.74
      required:
        - usdValue
        - egldValue
        - weight
    StablesDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 0
        egldValue:
          type: number
          example: 0
        weight:
          type: number
          example: 0
      required:
        - usdValue
        - egldValue
        - weight
    ActivityChain:
      type: string
      enum:
        - MVX
        - SUI
      description: Blockchain network of the token
    SuiCoinObjectDto:
      type: object
      properties:
        objectId:
          type: string
          description: Unique object identifier on SUI blockchain
        balance:
          type: string
          description: Balance amount as string
        digest:
          type: string
          description: Transaction digest hash
        version:
          type: string
          description: Object version on SUI blockchain
      required:
        - objectId
        - balance
        - digest
        - version
    TokenDataDocWithBalance:
      type: object
      properties:
        identifier:
          type: string
          description: Unique token identifier
          example: EGLD
        decimals:
          type: integer
          description: Number of decimal places for the token
          example: 18
        ticker:
          type: string
          description: Token ticker symbol
          example: EGLD
        name:
          type: string
          description: Full name of the token
          example: Elrond Gold
        svgUrl:
          type: string
          description: URL to the SVG icon of the token
          example: https://media.xoxno.com/tokens/EGLD.svg
        pngUrl:
          type: string
          description: URL to the PNG icon of the token
          example: https://media.xoxno.com/tokens/EGLD.png
        chain:
          description: Blockchain network of the token
          default: MVX
          allOf:
            - $ref: '#/components/schemas/ActivityChain'
        usdPrice:
          type: number
          example: 12.160648172030305
        nonce:
          type: number
          example: 0
        balance:
          type: string
          example: '514203000000000000000'
        shortBalance:
          type: number
          example: 514.203
        usdValue:
          type: number
          example: 6253.041772002499
        egldValue:
          type: number
          example: 171.32505804164822
        weight:
          type: number
          example: 83.21
        objects:
          description: Array of SUI coin objects
          type: array
          items:
            $ref: '#/components/schemas/SuiCoinObjectDto'
      required:
        - identifier
        - decimals
        - ticker
        - name
        - svgUrl
        - pngUrl
        - chain
        - usdPrice
        - nonce
        - balance
        - shortBalance
        - usdValue
        - egldValue
        - weight
    UserTokenInventoryResponseDto:
      type: object
      properties:
        wallet:
          $ref: '#/components/schemas/WalletDto'
        esdts:
          $ref: '#/components/schemas/EsdtsDto'
        stables:
          $ref: '#/components/schemas/StablesDto'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenDataDocWithBalance'
        chain:
          description: The blockchain chain identifier
          example: MVX
          allOf:
            - $ref: '#/components/schemas/ActivityChain'
      required:
        - wallet
        - esdts
        - stables
        - tokens
        - chain
    SocialsDto:
      type: object
      properties:
        twitter:
          type: string
          example: https://twitter.com/example
        instagram:
          type: string
          example: https://instagram.com/example
        website:
          type: string
          example: https://example.com
        telegram:
          type: string
          example: https://t.me/example
        discord:
          type: string
          example: https://discord.com/invite/example
        facebook:
          type: string
          example: ''
        youtube:
          type: string
          example: ''
    UserDeposit:
      type: object
      properties:
        balance:
          type: string
          description: The balance amount as a string
          example: '1000000000000000000'
        balanceShort:
          type: number
          description: The balance amount as a number for display purposes
          example: 1.5
        paymentToken:
          type: string
          description: The payment token identifier
          example: EGLD-123456
        paymentTokenNonce:
          type: number
          description: The payment token nonce
          example: 0
        usdPrice:
          type: number
          description: The USD price of the token
          example: 25.5
      required:
        - balance
        - balanceShort
        - paymentToken
        - paymentTokenNonce
        - usdPrice
    UserProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          example: userProfile
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
        address:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: User wallet address
        isBanned:
          type: boolean
          example: false
          description: Whether the user is banned
        isVerified:
          type: boolean
          example: false
          description: Whether the user is verified
        socials:
          description: Social media links for the user
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        followCount:
          type: number
          example: 0
          description: Number of followers
        joinedDate:
          type: number
          example: 1640995200
          description: Unix timestamp when user joined
        profile:
          type: string
          example: https://media.xoxno.com/userprofile/erd1.../profilePicture.webp
          description: Profile picture URL
        banner:
          type: string
          example: https://media.xoxno.com/userprofile/erd1.../profileBanner.webp
          description: Profile banner URL
        description:
          type: string
          example: NFT collector and trader
          description: User description
        herotag:
          type: string
          example: '@username'
          description: User herotag/username
        isCreator:
          type: boolean
          example: false
          description: Whether the user is a creator
        isPoolOwner:
          type: boolean
          example: false
          description: Whether the user owns a staking pool
        shard:
          type: number
          example: 0
          description: Network shard number
        userDeposit:
          description: User deposit information
          type: array
          items:
            $ref: '#/components/schemas/UserDeposit'
        chain:
          type: string
          example: MVX
          enum:
            - MVX
            - SUI
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp
        id:
          type: string
          example: >-
            erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq-userProfile
          description: Document ID
        isBoberBattleUser:
          type: boolean
          example: true
          description: Wether analytics are enabled
      required:
        - dataType
        - address
        - isBanned
        - isVerified
        - socials
        - followCount
        - joinedDate
        - profile
        - banner
        - herotag
        - isCreator
        - isPoolOwner
        - shard
        - userDeposit
        - chain
        - _ts
        - id
    UserEmailNotificationSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: Email notifications enabled
        emailAddress:
          type: string
          description: Email address
        isEmailVerificationPending:
          type: boolean
          description: Email verification pending
        isEmailVerified:
          type: boolean
          description: Email verified
        isWeb2User:
          type: boolean
          description: Web2 user
        timestamp:
          type: integer
          description: Timestamp
      required:
        - enabled
        - emailAddress
        - isEmailVerificationPending
        - isEmailVerified
        - isWeb2User
    UserNotificationPreferences:
      type: object
      properties:
        sales:
          type: boolean
          description: Sales notifications
        bids:
          type: boolean
          description: Bids notifications
        offersReceived:
          type: boolean
          description: Offers received notifications
        offersAccepted:
          type: boolean
          description: Offers accepted notifications
        offersRejected:
          type: boolean
          description: Offers rejected notifications
        deposits:
          type: boolean
          description: Deposits notifications
        eventUpdates:
          type: boolean
          description: Event updates from organizers
        eventReminders:
          type: boolean
          description: Event reminders before start time
        eventCheckIn:
          type: boolean
          description: Event check-in notifications
        eventMarketing:
          type: boolean
          description: Marketing notifications from past event creators
    UserSettingsDto:
      type: object
      properties:
        emailNotifications:
          $ref: '#/components/schemas/UserEmailNotificationSettings'
        notificationPreferences:
          $ref: '#/components/schemas/UserNotificationPreferences'
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        id:
          type: string
          example: >-
            erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57-userSettings
        _ts:
          type: number
          example: 1720462258
      required:
        - emailNotifications
        - notificationPreferences
        - address
        - id
        - _ts
    UserProfileDto:
      type: object
      properties:
        dataType:
          type: string
          example: userProfile
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
        address:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: User wallet address
        isBanned:
          type: boolean
          example: false
          description: Whether the user is banned
        isVerified:
          type: boolean
          example: false
          description: Whether the user is verified
        socials:
          description: Social media links for the user
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        followCount:
          type: number
          example: 0
          description: Number of followers
        joinedDate:
          type: number
          example: 1640995200
          description: Unix timestamp when user joined
        profile:
          type: string
          example: https://media.xoxno.com/userprofile/erd1.../profilePicture.webp
          description: Profile picture URL
        banner:
          type: string
          example: https://media.xoxno.com/userprofile/erd1.../profileBanner.webp
          description: Profile banner URL
        description:
          type: string
          example: NFT collector and trader
          description: User description
        herotag:
          type: string
          example: '@username'
          description: User herotag/username
        isCreator:
          type: boolean
          example: false
          description: Whether the user is a creator
        isPoolOwner:
          type: boolean
          example: false
          description: Whether the user owns a staking pool
        shard:
          type: number
          example: 0
          description: Network shard number
        userDeposit:
          description: User deposit information
          type: array
          items:
            $ref: '#/components/schemas/UserDeposit'
        chain:
          type: string
          example: MVX
          enum:
            - MVX
            - SUI
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp
        id:
          type: string
          example: >-
            erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq-userProfile
          description: Document ID
        isBoberBattleUser:
          type: boolean
          example: true
          description: Wether analytics are enabled
        userSettings:
          $ref: '#/components/schemas/UserSettingsDto'
      required:
        - dataType
        - address
        - isBanned
        - isVerified
        - socials
        - followCount
        - joinedDate
        - profile
        - banner
        - herotag
        - isCreator
        - isPoolOwner
        - shard
        - userDeposit
        - chain
        - _ts
        - id
    UserBillingDetails:
      type: object
      properties:
        isCompany:
          type: boolean
          description: Indicates whether the guest is a company.
        name:
          type: string
          description: Name of the company or user.
        companyRegistrationNumber:
          type: string
          description: Company registration number.
        companyVatNumber:
          type: string
          description: Company VAT number.
        email:
          type: string
          description: Email address.
        country:
          type: string
          description: Country
        city:
          type: string
          description: City
        address1:
          type: string
          description: Address line 1
        address2:
          type: string
          description: Address line 2
        postalCode:
          type: string
          description: Postal code
      required:
        - isCompany
        - name
        - email
        - country
        - city
        - address1
    UserPhoneNotificationSettings:
      type: object
      properties:
        enabled:
          type: boolean
          description: Phone notifications enabled
        phoneNumber:
          type: string
          description: Phone number
        isPhoneVerificationPending:
          type: boolean
          description: Phone verification pending
        isPhoneVerified:
          type: boolean
          description: Phone verified
        timestamp:
          type: integer
          description: Timestamp
      required:
        - enabled
        - phoneNumber
        - isPhoneVerificationPending
        - isPhoneVerified
    UserSettingsDoc:
      type: object
      properties:
        dataType:
          type: string
          description: Type of user data
        address:
          type: string
          description: User address
        name:
          type: string
          description: User name
        billingDetails:
          description: User billing details
          allOf:
            - $ref: '#/components/schemas/UserBillingDetails'
        emailNotifications:
          description: Email notification settings
          allOf:
            - $ref: '#/components/schemas/UserEmailNotificationSettings'
        phoneNotifications:
          description: Phone notification settings
          allOf:
            - $ref: '#/components/schemas/UserPhoneNotificationSettings'
        notificationPreferences:
          description: Notification preferences
          allOf:
            - $ref: '#/components/schemas/UserNotificationPreferences'
        id:
          type: string
          description: User ID
        _ts:
          type: number
          description: Timestamp
      required:
        - dataType
        - address
        - emailNotifications
        - notificationPreferences
        - id
    NotificationPreferencesPostDto:
      type: object
      properties:
        sales:
          type: boolean
          description: Notification preference for sales
          example: true
        bids:
          type: boolean
          description: Notification preference for bids
          example: true
        offersReceived:
          type: boolean
          description: Notification preference for offers received
          example: true
        offersAccepted:
          type: boolean
          description: Notification preference for offers accepted
          example: true
        offersRejected:
          type: boolean
          description: Notification preference for offers rejected
          example: true
        deposits:
          type: boolean
          description: Notification preference for deposits
          example: true
      required:
        - sales
        - bids
        - offersReceived
        - offersAccepted
        - offersRejected
        - deposits
    SetEmailDto:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the email feature is enabled
          example: true
        emailAddress:
          type: string
          description: The email address to be set
          example: example@example.com
      required:
        - enabled
    SetPhoneDto:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the phone feature is enabled
          example: true
        phoneNumber:
          type: string
          description: The phone number to be set
          example: '+1234567890'
      required:
        - enabled
    VerifyEmailDto:
      type: object
      properties:
        verificationCode:
          type: string
          description: Verification code sent to the user
          example: '123456'
          minLength: 6
          maxLength: 6
      required:
        - verificationCode
    TradesilvaniaSignature:
      type: object
      properties:
        url:
          type: string
          example: htps://tradesilvania.com/asdasd
      required:
        - url
    UserProfileEditDto:
      type: object
      properties:
        socials:
          description: Social media links for the user
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        description:
          type: string
          example: NFT collector and trader
          description: User description
        isBoberBattleUser:
          type: boolean
          example: true
          description: Wether analytics are enabled
    SuccessDto:
      type: object
      properties:
        success:
          type: boolean
          example: true
      required:
        - success
    CreatorProfileDto:
      type: object
      properties:
        dataType:
          type: string
          example: creatorProfile
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
        address:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: Creator wallet address
        name:
          type: string
          example: Awesome Creator
          description: Creator name (editable by creator)
        creatorTag:
          type: string
          example: awesome-creator
          description: Unique creator tag (not editable)
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqcollection123456789abcdef
          description: Contract address for regular NFT creators
        ticketingContractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqticket123456789abcdef
          description: Contract address for ticketing creators
        profile:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profilePicture.webp
          description: Creator profile picture URL
        banner:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profileBanner.webp
          description: Creator profile banner URL
        joinedDate:
          type: number
          example: 1640995200
          description: Unix timestamp when creator joined
        description:
          type: string
          example: Leading NFT creator and artist
          description: Creator description
        socials:
          description: Social media links for the creator
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        id:
          type: string
          example: >-
            erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq-creatorProfile
          description: Document ID
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp
        followCount:
          type: number
          example: 0
      required:
        - dataType
        - address
        - name
        - creatorTag
        - profile
        - banner
        - socials
        - followCount
    CreatorProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          example: creatorProfile
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
        address:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: Creator wallet address
        name:
          type: string
          example: Awesome Creator
          description: Creator name (editable by creator)
        creatorTag:
          type: string
          example: awesome-creator
          description: Unique creator tag (not editable)
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqcollection123456789abcdef
          description: Contract address for regular NFT creators
        ticketingContractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqticket123456789abcdef
          description: Contract address for ticketing creators
        profile:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profilePicture.webp
          description: Creator profile picture URL
        banner:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profileBanner.webp
          description: Creator profile banner URL
        joinedDate:
          type: number
          example: 1640995200
          description: Unix timestamp when creator joined
        description:
          type: string
          example: Leading NFT creator and artist
          description: Creator description
        socials:
          description: Social media links for the creator
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        id:
          type: string
          example: >-
            erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq-creatorProfile
          description: Document ID
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp
      required:
        - dataType
        - address
        - name
        - creatorTag
        - profile
        - banner
        - socials
    CollectionDataType:
      type: string
      enum:
        - collectionProfile
        - globalOffer
        - mintProfile
        - mintStage
        - collectionStats
        - collectionVerification
    RangeFilter:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
        field:
          type: string
    CollectionStatsFilterCriteriaDto:
      type: object
      properties:
        dataType:
          example: collectionStats
          allOf:
            - $ref: '#/components/schemas/CollectionDataType'
        collection:
          type: array
          items:
            type: string
        verifiedOnly:
          type: boolean
          example: true
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    CollectionStatsFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/CollectionStatsFilterCriteriaDto'
      required:
        - filters
    AllTimeHigh:
      type: object
      properties:
        price:
          type: number
          description: All-time high price
          example: 150
        timestamp:
          type: number
          description: Timestamp of all-time high
          example: 1640995200
        txHash:
          type: string
          description: Transaction hash of all-time high
          example: 0x123abc...
        identifier:
          type: string
          description: NFT identifier of all-time high
          example: COLLECTION-123456-01
      required:
        - price
        - timestamp
        - txHash
        - identifier
    TradingDataSummary:
      type: object
      properties:
        volume:
          type: number
          description: Trading volume
          example: 100.5
        volumeMargin:
          type: number
          description: Volume margin percentage
          example: 5.2
        trades:
          type: number
          description: Number of trades
          example: 10
        tradesMargin:
          type: number
          description: Trades margin percentage
          example: 3.1
        minPrice:
          type: number
          description: Minimum price
          example: 0.1
        maxPrice:
          type: number
          description: Maximum price
          example: 100
        averagePrice:
          type: number
          description: Average price
          example: 20.5
      required:
        - volume
        - volumeMargin
        - trades
        - tradesMargin
    TradingStatistics:
      type: object
      properties:
        totalVolume:
          type: number
          description: Total volume traded
          example: 1000.5
        totalTrades:
          type: number
          description: Total number of trades
          example: 50
        averagePrice:
          type: number
          description: Average price of trades
          example: 20.1
        allTimeHigh:
          description: All-time high statistics
          allOf:
            - $ref: '#/components/schemas/AllTimeHigh'
        day:
          description: Daily trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
        week:
          description: Weekly trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
        month:
          description: Monthly trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
        quarter:
          description: Quarterly trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
        halfYear:
          description: Half-year trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
        year:
          description: Yearly trading statistics
          allOf:
            - $ref: '#/components/schemas/TradingDataSummary'
      required:
        - totalVolume
        - totalTrades
        - allTimeHigh
        - day
        - week
        - month
        - quarter
        - halfYear
        - year
    ShortCollectionInfoDoc:
      type: object
      properties:
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        isVisible:
          type: boolean
          description: Whether the collection is visible to the public
          example: true
        isVerified:
          type: boolean
          description: Whether the collection is verified
          example: false
        socials:
          description: Social media links for the collection
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        profile:
          type: string
          description: Profile image URL
          example: https://example.com/profile.jpg
        banner:
          type: string
          description: Banner image URL
          example: https://example.com/banner.jpg
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        owner:
          type: string
          description: Owner address of the collection
          example: erd1...
        collectionSize:
          type: number
          description: Size of the collection, applied post processing
        holdersCount:
          type: number
          description: Holders count of the collection, applied post processing
        followCount:
          type: number
          description: Follow count of the collection, applied post processing
        volume:
          type: number
          example: 1230.34
      required:
        - name
        - description
        - isVisible
        - isVerified
        - socials
        - profile
        - banner
        - chain
        - owner
        - volume
    CollectionStatsDocHydrated:
      type: object
      properties:
        dataType:
          type: object
          description: Data type identifier for collection stats
          example: collectionStats
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        floorPrice:
          type: number
          description: Floor price of the collection
          example: 0.5
        listedCount:
          type: number
          description: Number of listed items
          example: 100
        tradingStats:
          description: Trading statistics for the collection
          allOf:
            - $ref: '#/components/schemas/TradingStatistics'
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        _ts:
          type: number
          description: Document timestamp
          example: 1640995200
        id:
          type: string
          description: Unique document identifier
          example: COLLECTION-123456-CollectionStats
        collectionInfo:
          description: Collection profile information
          allOf:
            - $ref: '#/components/schemas/ShortCollectionInfoDoc'
      required:
        - dataType
        - collection
        - listedCount
        - tradingStats
        - chain
        - _ts
        - id
    CollectionStatsPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/CollectionStatsDocHydrated'
      required:
        - hasMoreResults
        - resources
    CheckLikeStatusResponseDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          example: false
      required:
        - isFavorite
    UserFavoriteResponseDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          description: The follow status of a user
          example: true
        addressFavorite:
          type: string
          description: The user that is followed or unfollowed
          example: erd12131241213
      required:
        - isFavorite
        - addressFavorite
    TokenCategory:
      type: string
      enum:
        - all
        - trade
        - staking
        - p2p
        - fiat
        - minting
        - userInventory
    TokenDataType:
      type: string
      enum:
        - nft
        - sftOwner
        - offer
        - syntheticNft
        - fungibleTokenProfile
        - nftExtraMetadata
      description: Type of token data document
    TokenDataDocHydrated:
      type: object
      properties:
        identifier:
          type: string
          description: Unique token identifier
          example: EGLD
        decimals:
          type: integer
          description: Number of decimal places for the token
          example: 18
        ticker:
          type: string
          description: Token ticker symbol
          example: EGLD
        name:
          type: string
          description: Full name of the token
          example: Elrond Gold
        svgUrl:
          type: string
          description: URL to the SVG icon of the token
          example: https://media.xoxno.com/tokens/EGLD.svg
        pngUrl:
          type: string
          description: URL to the PNG icon of the token
          example: https://media.xoxno.com/tokens/EGLD.png
        chain:
          description: Blockchain network of the token
          default: MVX
          allOf:
            - $ref: '#/components/schemas/ActivityChain'
        id:
          type: string
          description: Unique document identifier
        collection:
          type: string
          description: Collection identifier for grouping
        dataType:
          description: Type of token data document
          default: fungibleTokenProfile
          allOf:
            - $ref: '#/components/schemas/TokenDataType'
        type:
          type: string
          description: Token type classification
        category:
          description: Categories this token belongs to
          default:
            - userInventory
          type: array
          items:
            type: string
        _ts:
          type: integer
          description: Cosmos DB timestamp for document versioning
        usdPrice:
          type: number
          example: 12.160648172030305
      required:
        - identifier
        - decimals
        - ticker
        - name
        - svgUrl
        - pngUrl
        - chain
        - id
        - collection
        - dataType
        - type
        - category
        - _ts
        - usdPrice
    XoxnoInfo:
      type: object
      properties:
        price:
          type: number
          description: Current XOXNO token price in USD
          example: 2.5
        marketCap:
          type: number
          description: Market capitalization in USD
          example: 25000000
        fdv:
          type: number
          description: Fully Diluted Valuation in USD
          example: 50000000
        tradeVol:
          type: number
          description: 24h trading volume in USD
          example: 1250000
        supply:
          type: number
          description: Current circulating supply
          example: 10000000
        burnedShort:
          type: number
          description: Total XOXNO tokens burned
          example: 500000
        circulatingSupply:
          type: number
          description: Tokens in circulation
          example: 9500000
        holdersCount:
          type: number
          description: Number of XOXNO token holders
          example: 15234
        totalSupply:
          type: number
          description: Maximum supply of XOXNO tokens
          example: 20000000
        idoPrice:
          type: number
          description: Initial DEX Offering price in USD
          example: 0.5
        listingDate:
          format: date-time
          type: string
      required:
        - price
        - marketCap
        - fdv
        - tradeVol
        - supply
        - burnedShort
        - circulatingSupply
        - holdersCount
        - totalSupply
        - idoPrice
        - listingDate
    RateType:
      type: object
      properties:
        rateShort:
          type: number
          description: Exchange rate as decimal number
          example: 1.05
        rate:
          type: string
          description: Exchange rate in smallest units as string
          example: '1050000000000000000'
        reverseRate:
          type: string
          description: Reverse exchange rate in smallest units as string
          example: '952380952380952380'
        reverseRateShort:
          type: number
          description: Reverse exchange rate as decimal number
          example: 0.952
      required:
        - rateShort
        - rate
        - reverseRate
        - reverseRateShort
    XoxnoLiquidStatsDto:
      type: object
      properties:
        participants:
          type: number
          description: Number of protocol participants
          example: 270
        totalRewards:
          type: number
          description: Total rewards awarded
          example: 768.42
        totalStaked:
          type: number
          description: Total staked amount
          example: 785386.47
        yearlyAPR:
          type: number
          description: Yearly APR
          example: 13.07
        apy:
          type: number
          description: Yearly APY
          example: 13.07
        totalRewardsUsdValue:
          type: number
          description: Total rewards as USD value
          example: 171.65
        totalStakedUsdValue:
          type: number
          description: Total staked amount as USD value
          example: 140274.99
        rateInfo:
          description: Exchange rate information
          allOf:
            - $ref: '#/components/schemas/RateType'
        serviceFee:
          type: number
          description: Service fee
          example: 0
        instantUnstake:
          type: string
          description: Amount available for instant unstake
          example: 0
        instantPendingUnstake:
          type: string
          description: Amount pending for unstake
          example: 0
      required:
        - participants
        - totalRewards
        - totalStaked
        - yearlyAPR
        - totalRewardsUsdValue
        - totalStakedUsdValue
        - rateInfo
        - serviceFee
        - instantUnstake
        - instantPendingUnstake
    AnalyticsMarketplaceUniqueUsers:
      type: object
      properties:
        Day:
          type: string
          description: The date of the data entry
          example: '2024-05-06T00:00:00.0000000Z'
          format: date-time
        UniqueUsers:
          type: integer
          description: Number of unique users
          example: 1016
        UniqueBuyers:
          type: integer
          description: Number of unique buyers
          example: 505
        UniqueSellers:
          type: integer
          description: Number of unique sellers
          example: 656
      required:
        - Day
        - UniqueUsers
        - UniqueBuyers
        - UniqueSellers
    ProtocolAprType:
      type: object
      properties:
        apr:
          type: number
          description: Annual Percentage Rate
          example: 5.25
        apy:
          type: number
          description: Annual Percentage Yield
          example: 5.38
      required:
        - apr
    ProviderDto:
      type: object
      properties:
        address:
          type: string
          description: The address of the provider
        profile:
          type: string
          description: The profile avatar of the provider
        name:
          type: string
          description: The name of the provider
        delegationCap:
          type: number
          description: The delegation cap of the provider
        nodes:
          type: number
          description: The number of nodes the provider has
        apr:
          type: number
          description: The annual percentage rate (APR) of the provider
        identity:
          type: string
          description: The identity of the provider
        totalStaked:
          type: number
          description: The total staked amount by the provider
        protocolStakedAmount:
          type: number
          description: The protocol staked amount
      required:
        - address
        - totalStaked
        - protocolStakedAmount
    DelegationDataOutput:
      type: object
      properties:
        address:
          type: string
          description: Delegator wallet address
          example: erd1qqqqqqqqqqqqqpgq5za2j0xkucera8epyusgvm7xvvpgksdm3y4sk3me3j
        contract:
          type: string
          description: Delegation contract address
          example: erd1qqqqqqqqqqqqqqqpqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqplllst77y4l
        activeStake:
          type: string
          description: Current active stake amount in smallest denomination
          example: '10000000000000000000'
        activeStakeShort:
          type: number
          description: Active stake amount as a number (may lose precision)
          example: 10.5
        unDelegateInfo:
          description: List of pending undelegation operations
          items:
            type: array
          type: array
        claimableRewards:
          type: number
          description: Amount of rewards available to claim
          example: 0.125
        claimableRewardsShort:
          type: number
          description: Claimable rewards as a simplified number
          example: 0.125
        totalUnbondEligible:
          type: string
          description: Total amount eligible for unbonding in smallest denomination
          example: '5000000000000000000'
      required:
        - address
        - contract
        - activeStake
        - activeStakeShort
        - unDelegateInfo
        - claimableRewards
        - claimableRewardsShort
        - totalUnbondEligible
    SwapDto:
      type: object
      properties:
        poolId:
          type: string
          example: erd1qqqqqqqqqqqqqpgqqz6vp9y50ep867vnr296mqf3dduh6guvmvlsu3sujc
        assetInIndex:
          type: number
          example: 0
        assetOutIndex:
          type: number
          example: 1
        amount:
          type: string
          example: '4182199770163362929142'
        returnAmount:
          type: string
          example: '1776845552107565998'
        assetIn:
          type: string
          example: PADAWAN-a17f58
        assetOut:
          type: string
          example: WEGLD-bd4d79
        functionName:
          type: string
          example: swapMultiTokensFixedInput
        arguments:
          example:
            - AQ==
            - ''
            - UEFEQVdBTi1hMTdmNTg=
            - V0VHTEQtYmQ0ZDc5
          items:
            type: array
          type: array
      required:
        - poolId
        - assetInIndex
        - assetOutIndex
        - amount
        - returnAmount
        - assetIn
        - assetOut
        - functionName
        - arguments
    AshTokenDto:
      type: object
      properties:
        address:
          type: string
          example: PADAWAN-a17f58
        decimal:
          type: number
          example: 18
      required:
        - address
        - decimal
    PoolDto:
      type: object
      properties:
        allTokens:
          type: array
          items:
            $ref: '#/components/schemas/AshTokenDto'
        type:
          type: string
          example: onedex
      required:
        - allTokens
        - type
    HopDto:
      type: object
      properties:
        poolId:
          type: string
          example: erd1qqqqqqqqqqqqqpgqqz6vp9y50ep867vnr296mqf3dduh6guvmvlsu3sujc
        pool:
          $ref: '#/components/schemas/PoolDto'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenInAmount:
          type: string
          example: '4182.199770163362929142'
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        tokenOutAmount:
          type: string
          example: '1.776845552107565998'
      required:
        - poolId
        - pool
        - tokenIn
        - tokenInAmount
        - tokenOut
        - tokenOutAmount
    RouteDto:
      type: object
      properties:
        hops:
          type: array
          items:
            $ref: '#/components/schemas/HopDto'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenInAmount:
          type: string
          example: '4182.199770163362929142'
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        tokenOutAmount:
          type: string
          example: '1.776845552107565998'
      required:
        - hops
        - tokenIn
        - tokenInAmount
        - tokenOut
        - tokenOutAmount
    OriginalDto:
      type: object
      properties:
        tokenAddresses:
          type: array
          items:
            type: string
        swaps:
          type: array
          items:
            $ref: '#/components/schemas/SwapDto'
        swapAmount:
          type: string
          example: '7551.21881510239555991'
        returnAmount:
          type: string
          example: '3.208300850633318163'
        swapAmountWithDecimal:
          type: string
          example: '7551218815102395559910'
        returnAmountWithDecimal:
          type: string
          example: '3208300850633318163'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        marketSp:
          type: string
          example: '2348.014436081921556678'
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteDto'
        effectivePrice:
          type: number
          example: 2353.650473150542
        effectivePriceReserved:
          type: number
          example: 0.00042487192189646716
        priceImpact:
          type: number
          example: 0.002394593901224484
        warning:
          type: string
          example: None
        minReturnAmount:
          type: string
          example: '3.192259346380151572'
        minReturnAmountWithDecimal:
          type: string
          example: '3192259346380151572'
      required:
        - tokenAddresses
        - swaps
        - swapAmount
        - returnAmount
        - swapAmountWithDecimal
        - returnAmountWithDecimal
        - tokenIn
        - tokenOut
        - marketSp
        - routes
        - effectivePrice
        - effectivePriceReserved
        - priceImpact
        - warning
        - minReturnAmount
        - minReturnAmountWithDecimal
    FetchSwapRoutesResponseDto:
      type: object
      properties:
        argument:
          type: string
          example: >-
            0000000e5041444157414e2d6131376635380000000c5745474c442d62643464373900000009e2b7ae54b8339019f60000000000000000050000b4c094947e427d79931a8bad81316b797d238cdb3f00000019737761704d756c7469546f6b656e734669786564496e707574000000040000000101000000000000000e5041444157414e2d6131376635380000000c5745474c442d6264346437390000000e5041444157414e2d6131376635380000000c424f4245522d39656237363400000009b6a2880b8b4cd315f00000000000000000050000b4c094947e427d79931a8bad81316b797d238cdb3f00000019737761704d756c7469546f6b656e734669786564496e707574000000040000000101000000000000000e5041444157414e2d6131376635380000000c424f4245522d3965623736340000000c424f4245522d3965623736340000000c5745474c442d6264346437390000000000000000000000000500490c9a6ff1c993e899c9d9df08eecca3f748bd2954830000001473776170546f6b656e734669786564496e707574000000020000000c5745474c442d6264346437390000000101
        limits:
          type: string
          example: >-
            0000000e5041444157414e2d613137663538000000000000000c424f4245522d396562373634000000000000000c5745474c442d626434643739000000082c4d2ef653e8db14
        extraGasLimit:
          type: number
          example: 75000000
        swapAmount:
          type: number
          example: 7551.218815102396
        paymentToken:
          type: string
          example: PADAWAN-a17f58
        bigUintAmount:
          type: string
          example: '7.55121881510239555991e+21'
        original:
          $ref: '#/components/schemas/OriginalDto'
      required:
        - argument
        - limits
        - extraGasLimit
        - swapAmount
        - paymentToken
        - bigUintAmount
        - original
    ArdaSwapResultDto:
      type: object
      properties:
        tokenIn:
          type: string
          description: The input token identifier
          example: WEGLD-d7c6b3
        amountIn:
          type: string
          description: The amount of input token in its raw form (with decimals)
          example: '1000000000000000000'
        amountInShort:
          type: string
          description: The amount of input token in human-readable form (without decimals)
          example: '1.0'
        tokenOut:
          type: string
          description: The output token identifier
          example: USDC-c76f1f
        amountOut:
          type: string
          description: The amount of output token in its raw form (with decimals)
          example: '1000000000'
        amountOutShort:
          type: string
          description: The amount of output token in human-readable form (without decimals)
          example: '1.0'
        argument:
          type: string
          description: The encoded arguments for the smart contract call
          example: '0x1234567890abcdef'
        gasLimit:
          type: number
          description: The gas limit required for the transaction
          example: 10000000
      required:
        - tokenIn
        - amountIn
        - amountInShort
        - tokenOut
        - amountOut
        - amountOutShort
        - argument
        - gasLimit
    LendingDataType:
      type: string
      enum:
        - marketProfile
        - accountProfile
        - emodeCategoryProfile
        - tokenEmodeProfile
    OraclePriceFluctuation:
      type: object
      properties:
        firstUpperRatio:
          type: integer
          description: First upper ratio threshold for price fluctuation
        firstLowerRatio:
          type: integer
          description: First lower ratio threshold for price fluctuation
        lastUpperRatio:
          type: integer
          description: Last upper ratio threshold for price fluctuation
        lastLowerRatio:
          type: integer
          description: Last lower ratio threshold for price fluctuation
      required:
        - firstUpperRatio
        - firstLowerRatio
        - lastUpperRatio
        - lastLowerRatio
    PricingMethod:
      type: string
      enum:
        - None
        - Safe
        - Instant
        - Aggregator
        - Mix
      description: Method used for pricing
    OracleType:
      type: string
      enum:
        - None
        - Normal
        - Derived
        - Lp
      description: Type of oracle
    ExchangeSource:
      type: string
      enum:
        - None
        - XExchange
        - LXOXNO
        - XEGLD
        - LEGLD
        - Onedex
      description: Source exchange for price data
    LendingOracleUpdateStruct:
      type: object
      properties:
        baseTokenId:
          type: string
          description: Base token identifier
        quoteTokenId:
          type: string
          description: Quote token identifier
        tolerance:
          description: Price fluctuation tolerance thresholds
          allOf:
            - $ref: '#/components/schemas/OraclePriceFluctuation'
        oracleContractAddress:
          type: string
          description: Oracle contract address
        pricingMethod:
          description: Method used for pricing
          allOf:
            - $ref: '#/components/schemas/PricingMethod'
        oracleType:
          description: Type of oracle
          allOf:
            - $ref: '#/components/schemas/OracleType'
        exchangeSource:
          description: Source exchange for price data
          allOf:
            - $ref: '#/components/schemas/ExchangeSource'
        assetDecimals:
          type: integer
          description: Number of decimals for the asset
        onedexPairId:
          type: integer
          description: OneDex pair identifier
        maxPriceStaleSeconds:
          type: integer
          description: Maximum seconds before price is considered stale
      required:
        - baseTokenId
        - quoteTokenId
        - tolerance
        - oracleContractAddress
        - pricingMethod
        - oracleType
        - exchangeSource
        - assetDecimals
        - onedexPairId
        - maxPriceStaleSeconds
    LendingMarketParticipants:
      type: object
      properties:
        count:
          type: number
          description: Count of participants
          example: 100
        wallets:
          description: Wallets of participants
          items:
            type: array
          type: array
      required:
        - count
        - wallets
    MarketExtraApy:
      type: object
      properties:
        nativeApy:
          type: number
          description: Native APY for derivatives tokes
          example: 0.03
        feesApr:
          type: number
          description: LP fees APR
          example: 0.03
    LendingIndexesDto:
      type: object
      properties:
        supplyIndex:
          type: string
          description: Supply index as a string to preserve precision
          example: '1050000000000000000'
        supplyIndexShort:
          type: number
          description: Supply index as a number (may lose precision)
          example: 1.05
        borrowIndex:
          type: string
          description: Borrow index as a string to preserve precision
          example: '1025000000000000000'
        borrowIndexShort:
          type: number
          description: Borrow index as a number (may lose precision)
          example: 1.025
        egldPrice:
          type: string
          description: EGLD price in USD as a string to preserve precision
          example: '65.50'
        egldPriceShort:
          type: number
          description: EGLD price in USD as a number
          example: 65.5
        usdPrice:
          type: string
          description: USD price (typically 1.0) as a string
          example: '1.0'
        usdPriceShort:
          type: number
          description: USD price (typically 1.0) as a number
          example: 1
        safePriceEgld:
          type: string
          description: Safe price in EGLD as a string to preserve precision
          example: '1000000000000000000'
        safePriceEgldShort:
          type: number
          description: Safe price in EGLD as a number (may lose precision)
          example: 1
        safePriceUsd:
          type: string
          description: Safe price in USD as a string to preserve precision
          example: '16124645832563882000'
        safePriceUsdShort:
          type: number
          description: Safe price in USD as a number (may lose precision)
          example: 16.124645832563882
        aggregatorPriceEgld:
          type: string
          description: Aggregator price in EGLD as a string to preserve precision
          example: '1000000000000000000'
        aggregatorPriceEgldShort:
          type: number
          description: Aggregator price in EGLD as a number (may lose precision)
          example: 1
        aggregatorPriceUsd:
          type: string
          description: Aggregator price in USD as a string to preserve precision
          example: '16124645832563882000'
        aggregatorPriceUsdShort:
          type: number
          description: Aggregator price in USD as a number (may lose precision)
          example: 16.124645832563882
        withinFirstTolerance:
          type: boolean
          description: Within first tolerance
          example: true
        withinSecondTolerance:
          type: boolean
          description: Within second tolerance
          example: true
      required:
        - supplyIndex
        - supplyIndexShort
        - borrowIndex
        - borrowIndexShort
        - egldPrice
        - egldPriceShort
        - usdPrice
        - usdPriceShort
        - safePriceEgld
        - safePriceEgldShort
        - safePriceUsd
        - safePriceUsdShort
        - aggregatorPriceEgld
        - aggregatorPriceEgldShort
        - aggregatorPriceUsd
        - aggregatorPriceUsdShort
        - withinFirstTolerance
        - withinSecondTolerance
    LendingMarketProfile:
      type: object
      properties:
        dataType:
          example: marketProfile
          allOf:
            - $ref: '#/components/schemas/LendingDataType'
        token:
          type: string
          description: Token associated with the lending market
          example: EGLD
        name:
          type: string
          description: Name of the token
          example: EGLD
        decimals:
          type: number
          description: Number of decimals for the token
          example: 18
        address:
          type: string
          description: Address of the lending market
          example: erd1qqqqqqq
        baseRate:
          type: string
          description: Base interest rate
          example: 0.02
        maxBorrowRate:
          type: string
          description: Maximum borrow rate
          example: 0.1
        slopeRate1:
          type: string
          description: Slope rate 1
          example: 0.04
        slopeRate2:
          type: string
          description: Slope rate 2
          example: 0.08
        slopeRate3:
          type: string
          description: Slope rate 3
          example: 0.12
        midUsageRate:
          type: string
          description: Mid usage rate
          example: 0.5
        optimalUsageRate:
          type: string
          description: Optimal usage rate
          example: 0.8
        reserveFactor:
          type: string
          description: Reserve factor
          example: 0.1
        liquidationFee:
          type: string
          description: Liquidation fee
          example: 0.05
        ltv:
          type: string
          description: Loan-to-value ratio
          example: 0.75
        liquidationBonus:
          type: string
          description: Liquidation bonus
          example: 0.1
        liquidationThreshold:
          type: string
          description: Liquidation threshold
          example: 0.85
        rewardsReserve:
          type: object
          description: Rewards reserves
          example: '1000000'
        rewardsReserveShort:
          type: object
          description: Rewards reserves (short)
          example: 500000
        reserves:
          type: object
          description: Reserves
          example: '1000000'
        reservesShort:
          type: object
          description: Short reserves
          example: 500000
        supplyAmount:
          type: object
          description: Supply amount
          example: '2000000'
        supplyAmountScaled:
          type: object
          description: Supply amount scaled
          example: '2000000'
        borrowAmount:
          type: object
          description: Borrow amount
          example: '1500000'
        supplyAmountShort:
          type: object
          description: Short supply amount
          example: 1000000
        borrowAmountShort:
          type: object
          description: Short borrow amount
          example: 750000
        borrowAmountScaled:
          type: object
          description: Borrow amount scaled
          example: '1500000'
        supplyCap:
          type: string
          description: Supply cap
          example: '3000000'
        borrowCap:
          type: string
          description: Borrow cap
          example: '2500000'
        supplyCapShort:
          type: object
          description: Short supply cap
          example: 1500000
        borrowCapShort:
          type: object
          description: Short borrow cap
          example: 1250000
        timestamp:
          type: object
          description: Timestamp of last market activity
          example: 1732650682
        borrowApy:
          type: object
          description: Borrow annual percentage yield
          example: 0.05
        supplyApy:
          type: object
          description: Supply annual percentage yield
          example: 0.03
        utilizationRate:
          type: object
          description: Utilization rate
          example: 0.75
        canBeCollateral:
          type: boolean
          description: Indicates if the asset can be used as collateral
          example: true
        canBeBorrowed:
          type: boolean
          description: Indicates if the asset can be borrowed
          example: true
        eMode:
          type: boolean
          description: Indicates if eMode is enabled
          example: false
        eModeCategories:
          description: eMode categories associated with the lending market
          items:
            type: array
          example:
            - '1'
            - '2'
          type: array
        isolated:
          type: boolean
          description: Indicates if the asset is isolated
          example: false
        maxDebtUsd:
          type: object
          description: Maximum debt in USD
          example: '5000000'
        maxDebtUsdShort:
          type: object
          description: Maximum debt in USD (short)
          example: 2500000
        debtCeiling:
          type: string
          description: Debt ceiling
          example: '10000000'
        debtCeilingShort:
          type: number
          description: Debt ceiling (short)
          example: 5000000
        siloed:
          type: boolean
          description: Indicates if the asset is siloed
          example: false
        flashLoan:
          type: boolean
          description: Indicates if flash loans are enabled
          example: true
        flashLoanFee:
          type: string
          description: Flash loan fee
          example: 0.003
        canBorrowInIsolation:
          type: boolean
          description: Indicates if the asset can be borrowed in isolation
          example: false
        oracleProvider:
          description: Oracle provider data
          allOf:
            - $ref: '#/components/schemas/LendingOracleUpdateStruct'
        id:
          type: string
          description: Cosmos DB document identifier
          example: EGLD_MARKET_PROFILE
        pk:
          type: string
          description: Cosmos DB partition key
          example: MARKET_PROFILE
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1732650682
        eModeCategoryProfiles:
          description: eMode categories associated with the lending market
          items:
            type: array
          example: true
          type: array
        participants:
          description: Participants in the lending market
          allOf:
            - $ref: '#/components/schemas/LendingMarketParticipants'
        extraApy:
          description: Extra APY for derivatives & LP tokens
          allOf:
            - $ref: '#/components/schemas/MarketExtraApy'
        indexes:
          description: Indexes
          allOf:
            - $ref: '#/components/schemas/LendingIndexesDto'
      required:
        - dataType
        - token
        - name
        - decimals
        - address
        - baseRate
        - maxBorrowRate
        - slopeRate1
        - slopeRate2
        - slopeRate3
        - midUsageRate
        - optimalUsageRate
        - reserveFactor
        - liquidationFee
        - ltv
        - liquidationBonus
        - liquidationThreshold
        - rewardsReserve
        - rewardsReserveShort
        - reserves
        - reservesShort
        - supplyAmount
        - supplyAmountScaled
        - borrowAmount
        - supplyAmountShort
        - borrowAmountShort
        - borrowAmountScaled
        - supplyCap
        - borrowCap
        - supplyCapShort
        - borrowCapShort
        - timestamp
        - borrowApy
        - supplyApy
        - utilizationRate
        - canBeCollateral
        - canBeBorrowed
        - eMode
        - eModeCategories
        - isolated
        - maxDebtUsd
        - maxDebtUsdShort
        - siloed
        - flashLoan
        - flashLoanFee
        - canBorrowInIsolation
        - oracleProvider
        - id
        - pk
        - _ts
        - eModeCategoryProfiles
        - participants
        - indexes
    LendingMarketProfileFilterCriteriaDto:
      type: object
      properties:
        token:
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        eMode:
          type: boolean
        flashLoan:
          type: boolean
        isolated:
          type: boolean
        siloed:
          type: boolean
        canBeCollateral:
          type: boolean
        canBeBorrowed:
          type: boolean
        canBorrowInIsolation:
          type: boolean
        isDebtCeilingReached:
          type: boolean
    LendingMarketProfileExtraProperties:
      type: object
      properties:
        eModeCategoryProfile:
          type: boolean
        participants:
          type: boolean
    LendingMarketProfileFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/LendingMarketProfileFilterCriteriaDto'
        extraProperties:
          $ref: '#/components/schemas/LendingMarketProfileExtraProperties'
      required:
        - filters
    LendingMarketProfileQuery:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/LendingMarketProfile'
      required:
        - hasMoreResults
        - resources
    PositionMode:
      type: string
      enum:
        - None
        - Normal
        - Multiply
        - Long
        - Short
      description: Position mode
    InitialPaymentMultiplier:
      type: object
      properties:
        initialPaymentAmount:
          type: string
          description: Initial payment amount
          example: 1
        initialPaymentToken:
          type: string
          description: Initial payment token
          example: 1
        usdValue:
          type: string
          description: USD value
          example: 1
      required:
        - initialPaymentAmount
        - initialPaymentToken
        - usdValue
    LendingEModeCategoryProfileDoc:
      type: object
      properties:
        dataType:
          example: emodeCategoryProfile
          allOf:
            - $ref: '#/components/schemas/LendingDataType'
        name:
          type: string
          description: EMode Name
          example: XOXNO Derivates
        ltv:
          type: string
          description: Loan-to-value ratio
          example: 0.75
        liquidationThreshold:
          type: string
          description: Liquidation threshold
          example: 0.85
        liquidationBonus:
          type: string
          description: Liquidation bonus
          example: 0.1
        isDeprecated:
          type: boolean
          description: Is eMode deprecated
          example: false
        id:
          type: string
          description: EMode category
          example: '1'
        pk:
          type: string
          description: Cosmos DB partition key
          example: EMODE_CATEGORY_PROFILE
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1732650682
      required:
        - dataType
        - name
        - ltv
        - liquidationThreshold
        - liquidationBonus
        - isDeprecated
        - id
        - pk
    PickTypeClass:
      type: object
      properties:
        token:
          type: string
          description: Token associated with the lending market
          example: EGLD
        name:
          type: string
          description: Name of the token
          example: EGLD
        decimals:
          type: number
          description: Number of decimals for the token
          example: 18
        address:
          type: string
          description: Address of the lending market
          example: erd1qqqqqqq
        baseRate:
          type: string
          description: Base interest rate
          example: 0.02
        maxBorrowRate:
          type: string
          description: Maximum borrow rate
          example: 0.1
        slopeRate1:
          type: string
          description: Slope rate 1
          example: 0.04
        slopeRate2:
          type: string
          description: Slope rate 2
          example: 0.08
        slopeRate3:
          type: string
          description: Slope rate 3
          example: 0.12
        midUsageRate:
          type: string
          description: Mid usage rate
          example: 0.5
        optimalUsageRate:
          type: string
          description: Optimal usage rate
          example: 0.8
        reserveFactor:
          type: string
          description: Reserve factor
          example: 0.1
        liquidationFee:
          type: string
          description: Liquidation fee
          example: 0.05
        ltv:
          type: string
          description: Loan-to-value ratio
          example: 0.75
        liquidationBonus:
          type: string
          description: Liquidation bonus
          example: 0.1
        liquidationThreshold:
          type: string
          description: Liquidation threshold
          example: 0.85
        rewardsReserve:
          type: object
          description: Rewards reserves
          example: '1000000'
        reserves:
          type: object
          description: Reserves
          example: '1000000'
        supplyAmount:
          type: object
          description: Supply amount
          example: '2000000'
        supplyAmountScaled:
          type: object
          description: Supply amount scaled
          example: '2000000'
        borrowAmount:
          type: object
          description: Borrow amount
          example: '1500000'
        borrowAmountScaled:
          type: object
          description: Borrow amount scaled
          example: '1500000'
        supplyCap:
          type: string
          description: Supply cap
          example: '3000000'
        borrowCap:
          type: string
          description: Borrow cap
          example: '2500000'
        timestamp:
          type: object
          description: Timestamp of last market activity
          example: 1732650682
        borrowApy:
          type: object
          description: Borrow annual percentage yield
          example: 0.05
        supplyApy:
          type: object
          description: Supply annual percentage yield
          example: 0.03
        utilizationRate:
          type: object
          description: Utilization rate
          example: 0.75
        canBeCollateral:
          type: boolean
          description: Indicates if the asset can be used as collateral
          example: true
        canBeBorrowed:
          type: boolean
          description: Indicates if the asset can be borrowed
          example: true
        isolated:
          type: boolean
          description: Indicates if the asset is isolated
          example: false
        maxDebtUsd:
          type: object
          description: Maximum debt in USD
          example: '5000000'
        debtCeiling:
          type: string
          description: Debt ceiling
          example: '10000000'
        siloed:
          type: boolean
          description: Indicates if the asset is siloed
          example: false
        flashLoan:
          type: boolean
          description: Indicates if flash loans are enabled
          example: true
        flashLoanFee:
          type: string
          description: Flash loan fee
          example: 0.003
        canBorrowInIsolation:
          type: boolean
          description: Indicates if the asset can be borrowed in isolation
          example: false
        oracleProvider:
          description: Oracle provider data
          allOf:
            - $ref: '#/components/schemas/LendingOracleUpdateStruct'
        extraApy:
          description: Extra APY for derivatives & LP tokens
          allOf:
            - $ref: '#/components/schemas/MarketExtraApy'
        indexes:
          description: Indexes
          allOf:
            - $ref: '#/components/schemas/LendingIndexesDto'
      required:
        - token
        - name
        - decimals
        - address
        - baseRate
        - maxBorrowRate
        - slopeRate1
        - slopeRate2
        - slopeRate3
        - midUsageRate
        - optimalUsageRate
        - reserveFactor
        - liquidationFee
        - ltv
        - liquidationBonus
        - liquidationThreshold
        - rewardsReserve
        - reserves
        - supplyAmount
        - supplyAmountScaled
        - borrowAmount
        - borrowAmountScaled
        - supplyCap
        - borrowCap
        - timestamp
        - borrowApy
        - supplyApy
        - utilizationRate
        - canBeCollateral
        - canBeBorrowed
        - isolated
        - maxDebtUsd
        - siloed
        - flashLoan
        - flashLoanFee
        - canBorrowInIsolation
        - oracleProvider
        - indexes
    LendingAccountProfile:
      type: object
      properties:
        dataType:
          example: accountProfile
          allOf:
            - $ref: '#/components/schemas/LendingDataType'
        identifier:
          type: string
          description: Unique identifier for the lending account
          example: account123
        nonce:
          type: number
          description: A unique number to ensure uniqueness of the identifier
          example: 1
        token:
          type: string
          description: The token associated with the lending account
          example: EGLD
        supplyAmountScaled:
          type: object
          description: The amount supplied in the lending account
          example: '1000'
        borrowAmountScaled:
          type: object
          description: The amount borrowed from the lending account
          example: '500'
        entryLiquidationThreshold:
          type: string
          description: Entry liquidation threshold
          example: '780000000000000000000'
        entryLiquidationBonus:
          type: string
          description: Entry liquidation bonus
          example: '800000000000000000000'
        entryLiquidationFee:
          type: string
          description: Entry liquidation fee
          example: '100000000000000000000'
        entryLtv:
          type: string
          description: Entry loan to value
          example: '650000000000000000000'
        isolated:
          type: boolean
          description: Indicates if the asset is isolated
          example: false
        positionMode:
          description: Position mode
          example: Normal
          allOf:
            - $ref: '#/components/schemas/PositionMode'
        eModeCategory:
          type: string
          description: eMode category
          example: '1'
        address:
          type: string
          description: Address of the lending account
          example: erd123
        initialPaymentMultiplier:
          description: Initial payment multiplier
          allOf:
            - $ref: '#/components/schemas/InitialPaymentMultiplier'
        isClassic:
          type: boolean
        id:
          type: string
          description: Cosmos DB document identifier
          example: account123_EGLD
        pk:
          type: string
          description: Cosmos DB partition key
          example: ACCOUNT_PROFILE
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1732650682
        supplyAmount:
          type: string
          description: The amount supplied in the lending account
          example: '1000'
        borrowAmount:
          type: string
          description: The amount borrowed from the lending account
          example: '500'
        eModeCategoryProfile:
          description: EMode profile
          allOf:
            - $ref: '#/components/schemas/LendingEModeCategoryProfileDoc'
        marketProfile:
          description: Lending market partial profile
          allOf:
            - $ref: '#/components/schemas/PickTypeClass'
      required:
        - dataType
        - identifier
        - nonce
        - token
        - supplyAmountScaled
        - borrowAmountScaled
        - entryLiquidationThreshold
        - entryLiquidationBonus
        - entryLiquidationFee
        - entryLtv
        - positionMode
        - address
        - isClassic
        - id
        - pk
        - _ts
        - supplyAmount
        - borrowAmount
        - marketProfile
    LendingAccountPnl:
      type: object
      properties:
        Token:
          type: string
        Identifier:
          type: string
        PnlUSD:
          type: number
        PnlToken:
          type: number
        Debt:
          type: number
        DebtUSD:
          type: number
        Interest:
          type: number
        InterestUSD:
          type: number
      required:
        - Token
        - Identifier
        - PnlUSD
        - PnlToken
        - Debt
        - DebtUSD
        - Interest
        - InterestUSD
    LendingAccountSummary:
      type: object
      properties:
        supplied:
          type: array
          items:
            type: string
        borrowed:
          type: array
          items:
            type: string
        liquidationCollateralInDollars:
          type: string
        collateralInDollars:
          type: string
        borrowedInDollars:
          type: string
        collateralInEgld:
          type: string
        borrowedInEgld:
          type: string
        totalApy:
          type: string
        healthFactor:
          type: string
      required:
        - supplied
        - borrowed
        - liquidationCollateralInDollars
        - collateralInDollars
        - borrowedInDollars
        - collateralInEgld
        - borrowedInEgld
        - totalApy
        - healthFactor
    ShortLendingTokenEModeProfileDoc:
      type: object
      properties:
        token:
          type: string
          description: The token associated with the eMode profile
          example: EGLD
        canBeCollateral:
          type: boolean
          description: Indicates if the token can be used as collateral
          example: true
        canBeBorrowed:
          type: boolean
          description: Indicates if the token can be borrowed
          example: true
        eModeCategory:
          type: string
          description: EMode category of the token
          example: '1'
      required:
        - token
        - canBeCollateral
        - canBeBorrowed
        - eModeCategory
    LendingEModeCategoryProfile:
      type: object
      properties:
        dataType:
          example: emodeCategoryProfile
          allOf:
            - $ref: '#/components/schemas/LendingDataType'
        name:
          type: string
          description: EMode Name
          example: XOXNO Derivates
        ltv:
          type: string
          description: Loan-to-value ratio
          example: 0.75
        liquidationThreshold:
          type: string
          description: Liquidation threshold
          example: 0.85
        liquidationBonus:
          type: string
          description: Liquidation bonus
          example: 0.1
        isDeprecated:
          type: boolean
          description: Is eMode deprecated
          example: false
        id:
          type: string
          description: EMode category
          example: '1'
        pk:
          type: string
          description: Cosmos DB partition key
          example: EMODE_CATEGORY_PROFILE
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1732650682
        eModeTokenProfiles:
          description: EMode profiles
          type: array
          items:
            $ref: '#/components/schemas/ShortLendingTokenEModeProfileDoc'
      required:
        - dataType
        - name
        - ltv
        - liquidationThreshold
        - liquidationBonus
        - isDeprecated
        - id
        - pk
        - eModeTokenProfiles
    LendingMarketAnalyticsGraph:
      type: object
      properties:
        token:
          type: string
          description: Token of the lending market
          example: EGLD
        timestamp:
          description: Timestamp of the graph point
          example:
            - '2023-01-01T00:00:00Z'
            - '2023-01-02T00:00:00Z'
            - '2023-01-03T00:00:00Z'
          items:
            type: array
          type: array
        minSupplyApy:
          description: Minimum supply APY value for each timestamp
          example:
            - 1.2
            - 1.3
            - 1.4
          items:
            type: array
          type: array
        maxSupplyApy:
          description: Maximum supply APY value for each timestamp
          example:
            - 2.2
            - 2.3
            - 2.4
          items:
            type: array
          type: array
        avgSupplyApy:
          description: Average supply APY value for each timestamp
          example:
            - 1.7
            - 1.8
            - 1.9
          items:
            type: array
          type: array
        minBorrowApy:
          description: Minimum borrow APY value for each timestamp
          example:
            - 0.5
            - 0.6
            - 0.7
          items:
            type: array
          type: array
        maxBorrowApy:
          description: Maximum borrow APY value for each timestamp
          example:
            - 1.5
            - 1.6
            - 1.7
          items:
            type: array
          type: array
        avgBorrowApy:
          description: Average borrow APY value for each timestamp
          example:
            - 1
            - 1.1
            - 1.2
          items:
            type: array
          type: array
        minUtilizationRate:
          description: Minimum utilization rate for each timestamp
          example:
            - 0.1
            - 0.2
            - 0.3
          items:
            type: array
          type: array
        maxUtilizationRate:
          description: Maximum utilization rate for each timestamp
          example:
            - 0.4
            - 0.5
            - 0.6
          items:
            type: array
          type: array
        avgUtilizationRate:
          description: Average utilization rate for each timestamp
          example:
            - 0.25
            - 0.35
            - 0.45
          items:
            type: array
          type: array
        minSupplyAmount:
          description: Minimum supply amount for each timestamp
          example:
            - 1000
            - 1100
            - 1200
          items:
            type: array
          type: array
        maxSupplyAmount:
          description: Maximum supply amount for each timestamp
          example:
            - 2000
            - 2100
            - 2200
          items:
            type: array
          type: array
        avgSupplyAmount:
          description: Average supply amount for each timestamp
          example:
            - 1500
            - 1600
            - 1700
          items:
            type: array
          type: array
        minBorrowAmount:
          description: Minimum borrow amount for each timestamp
          example:
            - 500
            - 600
            - 700
          items:
            type: array
          type: array
        maxBorrowAmount:
          description: Maximum borrow amount for each timestamp
          example:
            - 1500
            - 1600
            - 1700
          items:
            type: array
          type: array
        avgBorrowAmount:
          description: Average borrow amount for each timestamp
          example:
            - 1000
            - 1100
            - 1200
          items:
            type: array
          type: array
        twapSupplyApy:
          type: number
          description: TWAP supply APY for each the time range
          example: 1.2
        twapBorrowApy:
          type: number
          description: TWAP borrow APY for each the time range
          example: 1.2
        twapUtilizationRate:
          type: number
          description: TWAP utilization rate for each the time range
          example: 1.2
        twapSupplyAmount:
          type: number
          description: TWAP supply amount for each the time range
          example: 1.2
        twapBorrowAmount:
          type: number
          description: TWAP borrow amount for each the time range
          example: 1.2
      required:
        - token
        - timestamp
        - minSupplyApy
        - maxSupplyApy
        - avgSupplyApy
        - minBorrowApy
        - maxBorrowApy
        - avgBorrowApy
        - minUtilizationRate
        - maxUtilizationRate
        - avgUtilizationRate
        - minSupplyAmount
        - maxSupplyAmount
        - avgSupplyAmount
        - minBorrowAmount
        - maxBorrowAmount
        - avgBorrowAmount
        - twapSupplyApy
        - twapBorrowApy
        - twapUtilizationRate
        - twapSupplyAmount
        - twapBorrowAmount
    LendingMarketAverageGraph:
      type: object
      properties: {}
    LendingPositionOrderByColumn:
      type: string
      enum:
        - supplied
        - borrowed
        - healthFactor
    KustoOrderDirection:
      type: string
      enum:
        - asc
        - desc
    OwnerDto:
      type: object
      properties:
        username:
          type: string
          description: Username of the owner
        address:
          type: string
          description: Blockchain address of the owner
        profile:
          type: string
          description: URL to the owner's profile picture
      required:
        - username
        - address
        - profile
    LendingPositionStatus:
      type: object
      properties:
        position:
          type: number
          description: The position of the lending account
          example: 1
        identifier:
          type: string
          description: Unique identifier for the lending account
          example: account123
        supplied:
          type: number
          description: The USD amount supplied in the lending account
          example: 100
        borrowed:
          type: number
          description: The USD amount borrowed from the lending account
          example: 50
        healthFactor:
          type: number
          description: The health factor of the lending account
          example: 30
        wallet:
          description: The owner of the lending account
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        isEMode:
          type: boolean
          description: Wether the position is E-Mode or not
          example: false
        positionMode:
          type: string
          description: The position mode of the lending account
          enum:
            - None
            - Normal
            - Multiply
            - Long
            - Short
      required:
        - position
        - identifier
        - supplied
        - borrowed
        - healthFactor
        - wallet
        - isEMode
        - positionMode
    LendingOverallStats:
      type: object
      properties:
        topMarkets:
          description: Top markets by supply APY
          example:
            - USDC-350c4e
            - XOXNO-589e09
            - LXOXNO-a00540
          type: array
          items:
            type: string
        marketCount:
          type: number
          description: Total number of lending markets
          example: 10
        supplied:
          type: number
          description: Total supplied amount
          example: 10000000
        participantsCount:
          type: number
          description: Total number of participants
          example: 100
        bestApy:
          type: number
          description: Maximum APY
          example: 0.04
        borrowed:
          type: number
          description: Total borrowed amount
          example: 5000000
        suppliedMargin:
          type: number
          description: Total supplied margin over 24h
          example: 30
        borrowedMargin:
          type: number
          description: Total borrowed margin over 24h
          example: 15
      required:
        - topMarkets
        - marketCount
        - supplied
        - participantsCount
        - bestApy
        - borrowed
        - suppliedMargin
        - borrowedMargin
    SaleInfoFilterDto:
      type: object
      properties:
        seller:
          type: array
          items:
            type: string
        paymentToken:
          type: array
          items:
            type: string
        marketplace:
          example:
            - xoxno
          type: array
          items:
            type: string
        auctionType:
          type: array
          items:
            type: string
    Rarity:
      type: object
      properties:
        rank:
          type: integer
          description: The rarity rank of an asset, the smaller represents the rarest
        rarityScore:
          type: number
          description: Rarity score on an asset
      required:
        - rank
    NftMetadataAttributes:
      type: object
      properties:
        trait_type:
          type: string
          example: Background
        value:
          type: string
          example: Black
      required:
        - trait_type
        - value
    NftMetadata:
      type: object
      properties:
        description:
          type: string
          description: Description of an asset
        rarity:
          description: The rarity info about an asset
          allOf:
            - $ref: '#/components/schemas/Rarity'
        extraAttributes:
          description: Additional custom attributes not covered by standard properties
          example:
            - display_type: number
              trait_type: Level
              value: 5
          type: array
          items:
            type: object
        attributes:
          description: The list of attributes for this asset
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
    NftDocFilterCriteriaDto:
      type: object
      properties:
        dataType:
          type: array
          items:
            type: string
        identifier:
          type: array
          items:
            type: string
        collection:
          type: array
          items:
            type: string
        nonce:
          type: array
          items:
            type: integer
        type:
          type: array
          items:
            type: string
        onSale:
          type: boolean
          example: true
        owner:
          type: array
          items:
            type: string
        currentOwner:
          type: array
          items:
            type: string
        saleInfo:
          $ref: '#/components/schemas/SaleInfoFilterDto'
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        metadata:
          $ref: '#/components/schemas/NftMetadata'
        wasProcessed:
          type: boolean
          example: true
        cp_staked:
          type: boolean
          example: true
        activeAuction:
          type: boolean
          example: true
        verifiedOnly:
          type: boolean
          example: true
        sftOriginalDoc:
          type: boolean
          example: true
    NftDocFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          description: Filter criteria for NFT documents
          allOf:
            - $ref: '#/components/schemas/NftDocFilterCriteriaDto'
        applyNftExtraDetails:
          type: boolean
    EsdtTokenType:
      type: string
      enum:
        - FungibleESDT
        - NonFungibleESDT
        - SemiFungibleESDT
        - MetaESDT
      description: The type of the NFT
    EsdtTokenSubType:
      type: string
      enum:
        - NonFungibleESDTv2
        - DynamicNonFungibleESDT
        - DynamicSemiFungibleESDT
        - DynamicMetaESDT
      description: The sub-type of the NFT
    OriginalMedia:
      type: object
      properties:
        contentType:
          type: string
          description: The content type of the original media
        contentLength:
          type: number
          description: The content length of the original media
      required:
        - contentType
        - contentLength
    NftMedia:
      type: object
      properties:
        avifUrl:
          type: string
          description: The AVIF URL of the media
        webpUrl:
          type: string
          description: The WebP URL of the media
        retries:
          type: number
          description: The number of retries
        originalMedia:
          description: The original media
          allOf:
            - $ref: '#/components/schemas/OriginalMedia'
      required:
        - avifUrl
        - webpUrl
        - retries
        - originalMedia
    NftStats:
      type: object
      properties:
        likeCount:
          type: integer
    NFTEventData:
      type: object
      properties:
        eventId:
          type: string
          description: ID of the event associated with this NFT.
        ticketId:
          type: string
          description: Ticket type ID associated with this NFT.
        checkInStatus:
          type: object
          description: Check-in status of the NFT.
          example: false
      required:
        - eventId
        - ticketId
        - checkInStatus
    XoxnoAuctionTypeString:
      type: string
      enum:
        - None
        - NftBid
        - Nft
        - SftAll
        - SftOnePerPayment
      description: Type of auction (e.g., Nft, SftAll, SftOnePerPayment)
    MarketplacesOnSaleNames:
      type: string
      enum:
        - xoxno
        - frameit
        - deadrare
        - krogan
    NftSaleInfoHydrated:
      type: object
      properties:
        auctionId:
          type: number
          description: Unique identifier of the auction
          example: 12345
        seller:
          type: string
          description: Wallet address of the NFT seller
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
        minBid:
          type: string
          description: Minimum bid amount in smallest token units as string
          example: '1000000000000000000'
        maxBid:
          type: string
          description: >-
            Maximum bid amount or Buy Now price in smallest token units as
            string
          example: '5000000000000000000'
        currentBid:
          type: string
          description: Current highest bid amount in smallest token units as string
          example: '2000000000000000000'
        startTime:
          type: integer
          description: Unix timestamp when the auction started
          example: 1640995200
        deadline:
          type: integer
          description: Unix timestamp when the auction ends
          example: 1641081600
        paymentToken:
          type: string
          description: Token identifier used for payment
          example: EGLD
        paymentTokenNonce:
          type: integer
          description: Nonce of the payment token (0 for EGLD)
          example: 0
        auctionType:
          description: Type of auction (e.g., Nft, SftAll, SftOnePerPayment)
          allOf:
            - $ref: '#/components/schemas/XoxnoAuctionTypeString'
        timestamp:
          type: integer
          description: Unix timestamp when the listing was created
          example: 1640995200
        minBidShort:
          type: number
          description: Minimum bid amount as a decimal number
          example: 1.5
        minBidUsdValue:
          type: number
          description: Minimum bid amount in USD
          example: 150.75
        maxBidShort:
          type: number
          description: Maximum bid amount or Buy Now price as a decimal number
          example: 5
        maxBidUsdValue:
          type: number
          description: Maximum bid amount or Buy Now price in USD
          example: 502.5
        currentBidShort:
          type: number
          description: Current highest bid amount as a decimal number
          example: 2.5
        quantity:
          type: number
          description: Number of NFTs being sold (1 for NFTs, can be higher for SFTs)
          example: 1
        marketplace:
          example: xoxno
          allOf:
            - $ref: '#/components/schemas/MarketplacesOnSaleNames'
        royalties:
          type: number
          example: 10
          description: This value is the one set by the owner at listing time
        currentWinner:
          $ref: '#/components/schemas/OwnerDto'
      required:
        - auctionId
        - seller
        - minBid
        - maxBid
        - startTime
        - deadline
        - paymentToken
        - paymentTokenNonce
        - auctionType
        - timestamp
        - minBidShort
        - maxBidShort
        - quantity
        - marketplace
    NftMetadataAttributesHydrated:
      type: object
      properties:
        trait_type:
          type: string
          example: Background
        value:
          type: string
          example: Black
        occurance:
          type: integer
          description: Number of NFTs with this attribute combination
          example: 42
        frequency:
          type: number
          description: Percentage frequency of this attribute in the collection
          example: 3.5
        floorPrice:
          type: number
          description: Lowest price for NFTs with this attribute
          example: 1.5
        onSaleCount:
          type: integer
          description: Number of NFTs with this attribute currently on sale
          example: 5
        usdValue:
          type: number
          description: USD value equivalent of the floor price
          example: 150.75
      required:
        - trait_type
        - value
        - occurance
        - frequency
        - floorPrice
        - onSaleCount
        - usdValue
    NftMetadataHydrated:
      type: object
      properties:
        description:
          type: string
          description: Description of an asset
        rarity:
          description: The rarity info about an asset
          allOf:
            - $ref: '#/components/schemas/Rarity'
        extraAttributes:
          description: Additional custom attributes not covered by standard properties
          example:
            - display_type: number
              trait_type: Level
              value: 5
          type: array
          items:
            type: object
        attributes:
          description: The list of attributes for this asset
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributesHydrated'
    CollectionExtraFeesConfig:
      type: object
      properties:
        amount:
          type: number
          description: Extra fee amount percentage
          example: 2.5
          minimum: 0
        address:
          type: string
          description: Address to receive extra fees
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
      required:
        - amount
        - address
    XoxnoMarketplaceScCollectionConfig:
      type: object
      properties:
        reversedCutFees:
          type: boolean
          description: Whether cut fees are reversed
          example: false
          default: false
        reversedRoyalties:
          type: boolean
          description: Whether royalties are reversed
          example: false
          default: false
        customRoyalties:
          type: boolean
          description: Whether custom royalties are enabled
          example: false
          default: false
        minRoyalties:
          type: number
          description: Minimum royalties percentage
          example: 0
          default: 0
          minimum: 0
        maxRoyalties:
          type: number
          description: Maximum royalties percentage
          example: 10
          default: 0
          minimum: 0
        extraFees:
          description: Extra fees configuration
          example:
            amount: 2.5
            address: erd1...
          allOf:
            - $ref: '#/components/schemas/CollectionExtraFeesConfig'
        adminAddress:
          type: string
          description: Admin address for the collection
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
      required:
        - reversedCutFees
        - reversedRoyalties
        - customRoyalties
        - minRoyalties
        - maxRoyalties
    CollectionFeatures:
      type: object
      properties:
        isCustomOffersDisabled:
          type: boolean
        isGlobalOffersDisabled:
          type: boolean
    ShortNftCollectionInfoDoc:
      type: object
      properties:
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        isVisible:
          type: boolean
          description: Whether the collection is visible to the public
          example: true
        isVerified:
          type: boolean
          description: Whether the collection is verified
          example: false
        profile:
          type: string
          description: Profile image URL
          example: https://example.com/profile.jpg
        banner:
          type: string
          description: Banner image URL
          example: https://example.com/banner.jpg
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        roles:
          type: object
          description: Roles associated with the collection
          additionalProperties:
            type: array
            items:
              type: string
          example:
            ESDTRoleNFTCreate:
              - erd1...
        customConfig:
          description: Custom configuration for the collection
          allOf:
            - $ref: '#/components/schemas/XoxnoMarketplaceScCollectionConfig'
        features:
          description: Custom features for the collection
          allOf:
            - $ref: '#/components/schemas/CollectionFeatures'
        collectionSize:
          type: number
          description: Size of the collection, applied post processing
        holdersCount:
          type: number
          description: Holders count of the collection, applied post processing
        followCount:
          type: number
          description: Follow count of the collection, applied post processing
      required:
        - name
        - description
        - isVisible
        - isVerified
        - profile
        - banner
        - chain
        - roles
    ExtraProperties:
      type: object
      properties:
        currentEpoch:
          type: number
          description: Current epoch of the day
        level:
          type: number
          description: Custom level of the NFT
    NftDocHydrated:
      type: object
      properties:
        dataType:
          default: nft
          description: The type of data this document represents
          allOf:
            - $ref: '#/components/schemas/TokenDataType'
        identifier:
          type: string
          description: Unique identifier of the asset
        collection:
          type: string
          description: Unique collection ID
        originalCollection:
          type: string
          description: >-
            For syntetic NFTs this unique collection represents the underlaying
            collection
        attributes:
          type: string
          description: The attributes of the NFT as base64 encoded string
        nonce:
          type: integer
          description: The nonce of the NFT
        type:
          description: The type of the NFT
          allOf:
            - $ref: '#/components/schemas/EsdtTokenType'
        subType:
          description: The sub-type of the NFT
          allOf:
            - $ref: '#/components/schemas/EsdtTokenSubType'
        supply:
          type: integer
          description: The supply of the NFT
        supplyLong:
          type: string
          description: >-
            In case of an SFT/MetaESDT we show the total supply minted for this
            unique asset as string
        name:
          type: string
          description: The name of the NFT
        royalties:
          type: number
          description: The royalties of the NFT
        url:
          type: string
          description: The URL of the NFT
        uris:
          type: string
          description: The URIs of the NFT
        wasProcessed:
          type: boolean
          description: Whether the NFT was processed
        media:
          description: The media of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMedia'
        statistics:
          description: The statistics of the NFT
          allOf:
            - $ref: '#/components/schemas/NftStats'
        isTicket:
          type: boolean
          description: Whether the NFT is a ticket
        eventData:
          description: The event data of the NFT
          allOf:
            - $ref: '#/components/schemas/NFTEventData'
        chain:
          description: The chain of the NFT
          allOf:
            - $ref: '#/components/schemas/ActivityChain'
        tags:
          type: string
          description: The tags of the NFT
        kiosk:
          type: string
          description: 'SUI specific: The Kiosk ID if the NFT is listed on a kiosk.'
        onSale:
          type: boolean
          description: Whether the NFT is on sale
        id:
          type: string
          description: The ID of the NFT
        _ts:
          type: integer
          description: The timestamp of the NFT last DB change
        creator:
          description: The creator of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        currentOwner:
          description: The current owner of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        owner:
          description: The owner of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        saleInfo:
          description: The sale info of the NFT
          allOf:
            - $ref: '#/components/schemas/NftSaleInfoHydrated'
        metadata:
          description: The metadata of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMetadataHydrated'
        collectionInfo:
          description: The extra information about the collection of this specific NFT
          allOf:
            - $ref: '#/components/schemas/ShortNftCollectionInfoDoc'
        balance:
          type: number
          description: Balance owned by the user
        balanceLong:
          type: string
          description: Balance owned by the user as long string
        unboundDaysLeft:
          type: integer
          description: Left days until the staked NFT can be claimed back
        unboundEpoch:
          type: integer
          description: The epoch day when the NFT will be available for claiming
        extraProperties:
          description: Extra props for the specific NFT
          allOf:
            - $ref: '#/components/schemas/ExtraProperties'
      required:
        - dataType
        - identifier
        - collection
        - nonce
        - type
        - supply
        - name
        - royalties
        - url
        - wasProcessed
        - chain
        - onSale
        - collectionInfo
    NftPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/NftDocHydrated'
      required:
        - hasMoreResults
        - resources
    LikeNftDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          description: Is favorite flag
          example: true
        collection:
          type: string
          description: Collection identifier
          example: EAPES-8f3c1f
        identifier:
          type: string
          description: NFT identifier
          example: EAPES-8f3c1f-1047
      required:
        - isFavorite
        - collection
        - identifier
    InventorySummaryDtoHydrated:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
        inventoryCount:
          type: number
          description: Number of NFTs in inventory
        listedCount:
          type: number
          description: Number of listed NFTs
        stakedCount:
          type: number
          description: Number of staked NFTs
        floorPrice:
          type: number
          description: Floor price of the collection
        name:
          type: string
          description: Name of the collection
        isVerified:
          type: boolean
          description: Verification status of the collection
        isVisible:
          type: boolean
          description: Visibility status of the collection
        profile:
          type: string
          description: Profile picture URL of the collection
        banner:
          type: string
          description: Banner URL of the collection
        value:
          type: number
          description: Value of the collection
        chain:
          type: string
          enum:
            - MVX
            - SUI
      required:
        - collection
        - inventoryCount
        - listedCount
        - stakedCount
        - floorPrice
        - name
        - isVerified
        - isVisible
        - profile
        - banner
        - value
    OfferType:
      type: string
      enum:
        - received
        - placed
    NftOfferDocHydrated:
      type: object
      properties:
        dataType:
          type: string
          example: offer
          enum:
            - nft
            - sftOwner
            - offer
            - syntheticNft
            - fungibleTokenProfile
            - nftExtraMetadata
          description: Type of token data document
        identifier:
          type: string
          example: COLLECTION-1234-5678
          description: Unique identifier of the NFT
        collection:
          type: string
          example: COLLECTION-1234
          description: Collection identifier
        offerId:
          type: number
          example: 1
          description: Unique offer identifier
        paymentToken:
          type: string
          example: EGLD
          description: Token identifier used for payment
        paymentTokenNonce:
          type: number
          example: 0
          description: Nonce of the payment token (0 for EGLD)
        price:
          type: string
          example: '1000000000000000000'
          description: Offer price in smallest token units as string
        priceShort:
          type: number
          example: 1.5
          description: Offer price as a decimal number
        priceUsd:
          type: number
          example: 150.75
          description: Offer price in USD
        floorPriceMargin:
          type: number
          example: 0.15
          description: Margin compared to floor price as percentage
        deadline:
          type: number
          example: 1640995200
          description: Unix timestamp when the offer expires
        timestamp:
          type: number
          example: 1640995200
          description: Unix timestamp when the offer was created
        nftOwner:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: Address of the NFT owner
        quantity:
          type: number
          example: 1
          description: Quantity of NFTs being offered for
        marketplace:
          type: string
          example: xoxno
          description: Marketplace where the offer was created
        auctionId:
          type: number
          example: 123
          description: Auction identifier if related to an auction
        isActive:
          type: boolean
          example: true
          description: Whether the offer is currently active
        chain:
          type: string
          example: MVX
          enum:
            - MVX
            - SUI
          description: Blockchain network of the offer
        id:
          type: string
          example: COLLECTION-1234-5678-1-xoxno-offer
          description: Unique document identifier
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp for document versioning
        owner:
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: Address of the offer creator
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        usdValue:
          type: number
          example: 150.75
          description: USD value of the offer
        floorPrice:
          type: number
          example: 1.25
          description: Current floor price of the collection
        nftInfo:
          description: NFT information related to the offer
          allOf:
            - $ref: '#/components/schemas/NftDocHydrated'
      required:
        - dataType
        - identifier
        - collection
        - offerId
        - paymentToken
        - paymentTokenNonce
        - price
        - priceShort
        - deadline
        - timestamp
        - quantity
        - marketplace
        - isActive
        - chain
        - id
        - _ts
        - owner
        - usdValue
        - floorPrice
        - nftInfo
    NftOfferPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/NftOfferDocHydrated'
      required:
        - hasMoreResults
        - resources
    NftOfferDocFilterCriteria:
      type: object
      properties:
        isActive:
          type: array
          items:
            type: boolean
        identifier:
          type: array
          items:
            type: string
        collection:
          type: array
          items:
            type: string
        owner:
          type: array
          items:
            type: string
        nftOwner:
          type: array
          items:
            type: string
        marketplace:
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    NftOfferDocFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          items:
            type: string
          description: Order by criteria for sorting results
          example:
            - priceShort desc
          type: array
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          description: Filter criteria for NFT offer documents
          allOf:
            - $ref: '#/components/schemas/NftOfferDocFilterCriteria'
    CollectionRanksDTO:
      type: object
      properties:
        identifier:
          type: string
          example: MICE-a0c447-0b99
        name:
          type: string
          example: 'MiceCity #2969'
        rank:
          type: number
          example: 1
      required:
        - identifier
        - name
        - rank
    DensityDto:
      type: object
      properties:
        key:
          type: string
          example: '0.180'
        intervalName:
          type: string
          example: 0.180 - 0.180
        intervalCount:
          type: number
          example: 0
        totalCount:
          type: number
          example: 0
      required:
        - key
        - intervalName
        - intervalCount
        - totalCount
    RarityDto:
      type: object
      properties:
        rank:
          type: number
          example: 3769
      required:
        - rank
    MetadataDto:
      type: object
      properties:
        rarity:
          $ref: '#/components/schemas/RarityDto'
      required:
        - rarity
    SaleInfoDto:
      type: object
      properties:
        minBidShort:
          type: number
          example: 0.18
        marketplace:
          type: string
          example: xoxno
      required:
        - minBidShort
        - marketplace
    ListingDto:
      type: object
      properties:
        identifier:
          type: string
          example: MICE-a0c447-10fd
        name:
          type: string
          example: 'MiceCity #4349'
        collection:
          type: string
          example: MICE-a0c447
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        url:
          type: string
          example: >-
            https://media.elrond.com/nfts/asset/QmWEwSi9AhgMPeu4CJfLpWq1yKSfmERZXt76b429pVSU9R/2287.png
        media:
          $ref: '#/components/schemas/NftMedia'
        wasProcessed:
          type: boolean
          example: true
        saleInfo:
          $ref: '#/components/schemas/SaleInfoDto'
      required:
        - identifier
        - name
        - collection
        - metadata
        - url
        - media
        - wasProcessed
        - saleInfo
    ListingsResponseDto:
      type: object
      properties:
        density:
          type: array
          items:
            $ref: '#/components/schemas/DensityDto'
        listings:
          type: array
          items:
            $ref: '#/components/schemas/ListingDto'
      required:
        - density
        - listings
    SignWithdrawDto:
      type: object
      properties:
        auctionId:
          description: Array of auction IDs that have to be signed
          example:
            - 123123
            - 15555
          type: array
          items:
            type: integer
      required:
        - auctionId
    SignDataDto:
      type: object
      properties:
        data:
          type: string
          description: Hex-encoded data to be signed
          example: '0x48656c6c6f20576f726c64'
        signature:
          type: string
          description: Hex-encoded signature of the data
          example: >-
            0x5d99b6f7f6d1f73d1a26497f2b1c89b24c0993913f86e9a2d02cd69887d9c94f3c880358579d811b21dd1b7fd9bb01c1d81d10e69f0384e675c32b39643be892
      required:
        - data
        - signature
    SignAcceptGlobalOfferDto:
      type: object
      properties:
        offerId:
          type: integer
          example: 1233
          description: The offer ID that has to be removed
        identifier:
          example:
            - ABC-asdasd-01
          description: The unique identifiers that will be sold
          type: array
          items:
            type: string
      required:
        - offerId
        - identifier
    SignMintDto:
      type: object
      properties:
        quantity:
          type: integer
          description: The quantity of the requested mint amount
        stage:
          type: string
          description: The stage unique name
      required:
        - quantity
        - stage
    ShortCollectionDoc:
      type: object
      properties:
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        isVisible:
          type: boolean
          description: Whether the collection is visible to the public
          example: true
        isVerified:
          type: boolean
          description: Whether the collection is verified
          example: false
        profile:
          type: string
          description: Profile image URL
          example: https://example.com/profile.jpg
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        collectionSize:
          type: number
          description: Size of the collection, applied post processing
        holdersCount:
          type: number
          description: Holders count of the collection, applied post processing
        followCount:
          type: number
          description: Follow count of the collection, applied post processing
      required:
        - name
        - description
        - isVisible
        - isVerified
        - profile
        - chain
    GlobalOfferDocHydrated:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for the global offer
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: globalOffer
        offerId:
          type: number
          description: Unique identifier for the offer
          example: 12345
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        price:
          type: string
          description: Offer price in atomic units
          example: '1000000000000000000'
        paymentToken:
          type: string
          description: Payment token identifier
          example: EGLD
        paymentTokenNonce:
          type: number
          description: Payment token nonce
          example: 0
        quantity:
          type: number
          description: Quantity of items in the offer
          example: 1
        marketplace:
          type: string
          description: Marketplace where the offer was created
          example: xoxno
        timestamp:
          type: number
          description: Timestamp when the offer was created (Unix timestamp)
          example: 1640995200
        attributes:
          description: Required attributes/traits for the NFT
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
        priceShort:
          type: number
          description: Price in decimal format for display
          example: 1.5
        floorPriceMargin:
          type: number
          description: Floor price margin percentage
          example: 10.5
        floorPrice:
          type: number
          description: Floor price of the collection
          example: 1.2
        isActive:
          type: boolean
          description: Whether the offer is active
          example: true
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        usdValue:
          type: number
          description: USD value of the offer
          example: 150.75
        id:
          type: string
          description: Unique identifier for the document
          example: COLLECTION-123456-12345-xoxno-globalOffer
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
        owner:
          description: Owner information for the offer
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        collectionInfo:
          description: Collection information
          allOf:
            - $ref: '#/components/schemas/ShortCollectionDoc'
      required:
        - dataType
        - offerId
        - collection
        - price
        - paymentToken
        - paymentTokenNonce
        - quantity
        - marketplace
        - timestamp
        - attributes
        - priceShort
        - isActive
        - chain
        - id
        - _ts
        - owner
        - collectionInfo
    NftDocFull:
      type: object
      properties:
        dataType:
          default: nft
          description: The type of data this document represents
          allOf:
            - $ref: '#/components/schemas/TokenDataType'
        identifier:
          type: string
          description: Unique identifier of the asset
        collection:
          type: string
          description: Unique collection ID
        originalCollection:
          type: string
          description: >-
            For syntetic NFTs this unique collection represents the underlaying
            collection
        attributes:
          type: string
          description: The attributes of the NFT as base64 encoded string
        nonce:
          type: integer
          description: The nonce of the NFT
        type:
          description: The type of the NFT
          allOf:
            - $ref: '#/components/schemas/EsdtTokenType'
        subType:
          description: The sub-type of the NFT
          allOf:
            - $ref: '#/components/schemas/EsdtTokenSubType'
        supply:
          type: integer
          description: The supply of the NFT
        supplyLong:
          type: string
          description: >-
            In case of an SFT/MetaESDT we show the total supply minted for this
            unique asset as string
        name:
          type: string
          description: The name of the NFT
        royalties:
          type: number
          description: The royalties of the NFT
        url:
          type: string
          description: The URL of the NFT
        uris:
          type: string
          description: The URIs of the NFT
        wasProcessed:
          type: boolean
          description: Whether the NFT was processed
        media:
          description: The media of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMedia'
        statistics:
          description: The statistics of the NFT
          allOf:
            - $ref: '#/components/schemas/NftStats'
        isTicket:
          type: boolean
          description: Whether the NFT is a ticket
        eventData:
          description: The event data of the NFT
          allOf:
            - $ref: '#/components/schemas/NFTEventData'
        chain:
          description: The chain of the NFT
          allOf:
            - $ref: '#/components/schemas/ActivityChain'
        tags:
          type: string
          description: The tags of the NFT
        kiosk:
          type: string
          description: 'SUI specific: The Kiosk ID if the NFT is listed on a kiosk.'
        onSale:
          type: boolean
          description: Whether the NFT is on sale
        id:
          type: string
          description: The ID of the NFT
        _ts:
          type: integer
          description: The timestamp of the NFT last DB change
        creator:
          description: The creator of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        currentOwner:
          description: The current owner of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        owner:
          description: The owner of the NFT
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        saleInfo:
          description: The sale info of the NFT
          allOf:
            - $ref: '#/components/schemas/NftSaleInfoHydrated'
        metadata:
          description: The metadata of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMetadataHydrated'
        collectionInfo:
          description: The extra information about the collection of this specific NFT
          allOf:
            - $ref: '#/components/schemas/ShortNftCollectionInfoDoc'
        balance:
          type: number
          description: Balance owned by the user
        balanceLong:
          type: string
          description: Balance owned by the user as long string
        unboundDaysLeft:
          type: integer
          description: Left days until the staked NFT can be claimed back
        unboundEpoch:
          type: integer
          description: The epoch day when the NFT will be available for claiming
        extraProperties:
          description: Extra props for the specific NFT
          allOf:
            - $ref: '#/components/schemas/ExtraProperties'
        globalOffer:
          description: Global offer associated with this NFT, if any
          allOf:
            - $ref: '#/components/schemas/GlobalOfferDocHydrated'
      required:
        - dataType
        - identifier
        - collection
        - nonce
        - type
        - supply
        - name
        - royalties
        - url
        - wasProcessed
        - chain
        - onSale
        - collectionInfo
    StatisticsOtherDto:
      type: object
      properties:
        followCount:
          type: number
          description: How many unique users are following this collection
        nftCount:
          type: number
          description: How many NFTs are part of this collection
        holdersCount:
          type: number
          description: How many holders does this collection has
      required:
        - followCount
        - nftCount
    StatisticsTradeDataDto:
      type: object
      properties:
        dayEgldVolume:
          type: number
          description: Daily trading volume in EGLD for this collection
          example: 0
        weekEgldVolume:
          type: number
          description: Weekly trading volume in EGLD for this collection
          example: 116.67
        totalEgldVolume:
          type: number
          description: Total all-time trading volume in EGLD for this collection
          example: 128123.25
        averageEgldPrice:
          type: number
          description: Average price in EGLD for trades in this collection
          example: 25.5
        athEgldPrice:
          type: number
          description: All-time high price in EGLD for this collection
          example: 150
        athTxHash:
          type: string
          description: Transaction hash of the all-time high price sale
          example: '0x1234567890abcdef'
        totalTrades:
          type: number
          description: Total number of trades for this collection
          example: 1500
      required:
        - dayEgldVolume
        - weekEgldVolume
        - totalEgldVolume
        - averageEgldPrice
        - athEgldPrice
        - athTxHash
        - totalTrades
    StatisticsMintDataDto:
      type: object
      properties:
        totalMintEgldVolume:
          type: number
          description: Total mint volume in EGLD for this collection
          example: 5000
        weekMintEgldVolume:
          type: number
          description: Weekly mint volume in EGLD for this collection
          example: 250
        dayMintEgldVolume:
          type: number
          description: Daily mint volume in EGLD for this collection
          example: 50
      required:
        - totalMintEgldVolume
        - weekMintEgldVolume
        - dayMintEgldVolume
    StatisticsDto:
      type: object
      properties:
        other:
          description: More statistics about the collection
          allOf:
            - $ref: '#/components/schemas/StatisticsOtherDto'
        tradeData:
          description: >-
            Trading statistics for the collection including volume and price
            data
          allOf:
            - $ref: '#/components/schemas/StatisticsTradeDataDto'
        mintData:
          $ref: '#/components/schemas/StatisticsMintDataDto'
      required:
        - other
        - tradeData
    TransferPolicy:
      type: object
      properties:
        id:
          type: string
          description: Transfer policy id
        type:
          type: string
          description: Transfer policy type
        rules:
          description: Transfer policy rules
          type: array
          items:
            type: string
        is_origin_byte:
          type: boolean
          description: Transfer policy is origin byte
      required:
        - id
        - type
        - rules
        - is_origin_byte
    CollectionProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for the collection profile
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: collectionProfile
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        originalCollection:
          type: string
          description: Original collection identifier
          example: ORIGINAL-123456
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        isVisible:
          type: boolean
          description: Whether the collection is visible to the public
          example: true
        isVerified:
          type: boolean
          description: Whether the collection is verified
          example: false
        socials:
          description: Social media links for the collection
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        type:
          type: string
          description: Token type
          enum:
            - FungibleESDT
            - NonFungibleESDT
            - SemiFungibleESDT
            - MetaESDT
          example: NonFungibleESDT
        subType:
          type: string
          description: Token subtype
          enum:
            - NonFungibleESDTv2
            - DynamicNonFungibleESDT
            - DynamicSemiFungibleESDT
            - DynamicMetaESDT
          example: NonFungibleESDTv2
        profile:
          type: string
          description: Profile image URL
          example: https://example.com/profile.jpg
        banner:
          type: string
          description: Banner image URL
          example: https://example.com/banner.jpg
        statistics:
          description: Collection statistics
          allOf:
            - $ref: '#/components/schemas/StatisticsDto'
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        transferPolicies:
          description: Transfer policies for the collection
          type: array
          items:
            $ref: '#/components/schemas/TransferPolicy'
        owner:
          type: string
          description: Owner address of the collection
          example: erd1...
        creator:
          type: string
          description: Creator address of the collection
          example: erd1...
        isMintable:
          type: boolean
          description: Whether the collection is mintable
          example: false
        hasStaking:
          type: boolean
          description: Whether the collection has staking
          example: false
        isEvent:
          type: boolean
          description: Whether the collection is an event
          example: false
        roles:
          type: object
          description: Roles associated with the collection
          additionalProperties:
            type: array
            items:
              type: string
          example:
            ESDTRoleNFTCreate:
              - erd1...
        eventId:
          type: string
          description: Event ID if this is an event collection
          example: event-123
        pinnedAtDrops:
          type: number
          description: Timestamp when pinned at drops
          example: 1640995200
        pinnedAt:
          type: number
          description: Timestamp when pinned
          example: 1640995200
        customConfig:
          description: Custom configuration for the collection
          allOf:
            - $ref: '#/components/schemas/XoxnoMarketplaceScCollectionConfig'
        features:
          description: Custom features for the collection
          allOf:
            - $ref: '#/components/schemas/CollectionFeatures'
        royalty:
          type: number
          description: Royalty of the collection
        collectionSize:
          type: number
          description: Size of the collection, applied post processing
        holdersCount:
          type: number
          description: Holders count of the collection, applied post processing
        followCount:
          type: number
          description: Follow count of the collection, applied post processing
        minSalePrice:
          type: string
          description: Minimum sale price of the collection
        id:
          type: string
          description: Unique identifier for the document
          example: COLLECTION-123456-CollectionProfile
        _ts:
          type: number
          description: Timestamp of the document
          example: 1640995200
      required:
        - dataType
        - collection
        - originalCollection
        - name
        - description
        - isVisible
        - isVerified
        - socials
        - type
        - profile
        - banner
        - statistics
        - chain
        - transferPolicies
        - owner
        - creator
        - isMintable
        - hasStaking
        - isEvent
        - roles
    FloorPriceDto:
      type: object
      properties:
        collection:
          type: string
          example: MICE-a0c447
        price:
          type: number
          example: 0.18
        usdPrice:
          type: number
          example: 0.18
      required:
        - collection
        - price
        - usdPrice
    PinnedCollectionDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        isVerified:
          type: boolean
          description: Whether the collection is verified
          example: false
        profile:
          type: string
          description: Profile image URL
          example: https://example.com/profile.jpg
        banner:
          type: string
          description: Banner image URL
          example: https://example.com/banner.jpg
        chain:
          type: string
          description: Blockchain chain
          enum:
            - MVX
            - SUI
          example: MVX
        creator:
          type: string
          description: Creator address of the collection
          example: erd1...
        isMintable:
          type: boolean
          description: Whether the collection is mintable
          example: false
      required:
        - collection
        - name
        - description
        - isVerified
        - profile
        - banner
        - chain
        - creator
        - isMintable
    EgldOrEsdtTokenPayment:
      type: object
      properties:
        tokenIdentifier:
          type: string
          example: EGLD
        tokenNonce:
          type: number
          example: 0
        amount:
          type: string
          example: '500000000000000000'
        amountShort:
          type: number
          example: 0
          description: Short amount
        usdValue:
          type: number
          example: 0
          description: USD value
        decimals:
          type: number
          example: 0
          description: Decimals
      required:
        - tokenIdentifier
        - tokenNonce
        - amount
    ShortCreatorDoc:
      type: object
      properties:
        name:
          type: string
          example: Awesome Creator
          description: Creator name (editable by creator)
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqcollection123456789abcdef
          description: Contract address for regular NFT creators
        profile:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profilePicture.webp
          description: Creator profile picture URL
      required:
        - name
        - profile
    CollectionMintProfileDocHydrated:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for the mint profile
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: mintProfile
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        creatorTag:
          type: string
          description: Creator tag/identifier
          example: creator123
        creatorName:
          type: string
          description: Name of the collection creator
          example: John Doe
        contractAddress:
          type: string
          description: Smart contract address for minting
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
        collectionTag:
          type: string
          description: Collection tag for identification
          example: MYNFT
        cid:
          type: string
          description: IPFS CID for metadata
          example: QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco
        mediaType:
          type: string
          description: Media type of the NFT collection
          example: image/png
        baseNftName:
          type: string
          description: Base name for NFTs in the collection
          example: My NFT Collection
        hasAttributes:
          type: boolean
          description: Whether the collection has attributes/traits
          example: true
        ownerTransferred:
          type: boolean
          description: Whether the collection owner has been transferred
          example: false
        collectionSize:
          type: number
          description: Total size of the collection
          example: 10000
        totalNftMinted:
          type: number
          description: Total number of NFTs minted
          example: 5000
        globalWalletLimit:
          type: number
          description: Global wallet limit for minting
          example: 10
        royalties:
          type: number
          description: Royalties percentage (basis points)
          example: 500
        oldVersion:
          type: boolean
          description: Whether this is an old version of the contract
          example: false
        nameShuffle:
          type: boolean
          description: Whether names are shuffled during minting
          example: true
        nftTransferLimited:
          type: boolean
          description: Whether NFT transfers are limited
          example: false
        allowsPublicBurn:
          type: boolean
          description: Whether public burning is allowed
          example: false
        kycRequired:
          type: boolean
          description: Whether KYC is required for minting
          example: false
        allowsRefund:
          type: boolean
          description: Whether refunds are allowed
          example: false
        hasBotProtection:
          type: boolean
          description: Whether bot protection is enabled
          example: true
        hasReveal:
          type: boolean
          description: Whether the collection has reveal mechanics
          example: false
        tags:
          type: object
          description: Tags associated with the collection
          example:
            - gaming
            - art
            - utility
        prices:
          description: Minimum starting prices for each public stage
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        startTime:
          type: number
          description: Earliest start time of all public stages (Unix timestamp)
          example: 1640995200
        endTime:
          type: number
          description: Latest end time of all public stages (Unix timestamp)
          example: 1641081600
        isSoldOut:
          type: boolean
          description: Whether the collection is sold out
          example: false
        id:
          type: string
          description: Unique identifier for the document
          example: COLLECTION-123456-mintProfile
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
        collectionInfo:
          description: Short collection information
          allOf:
            - $ref: '#/components/schemas/ShortCollectionInfoDoc'
        creatorInfo:
          description: Short creator information
          allOf:
            - $ref: '#/components/schemas/ShortCreatorDoc'
      required:
        - dataType
        - collection
        - creatorTag
        - creatorName
        - contractAddress
        - collectionTag
        - cid
        - mediaType
        - baseNftName
        - hasAttributes
        - ownerTransferred
        - collectionSize
        - totalNftMinted
        - globalWalletLimit
        - royalties
        - oldVersion
        - nameShuffle
        - nftTransferLimited
        - kycRequired
        - allowsRefund
        - hasBotProtection
        - hasReveal
        - tags
        - prices
        - startTime
        - endTime
        - isSoldOut
        - id
        - collectionInfo
        - creatorInfo
    CollectionPinnedStatusDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection ticker
        status:
          type: boolean
          description: Pinned status
      required:
        - collection
        - status
    CollectionProfileEditDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the collection
          example: My NFT Collection
        description:
          type: string
          description: Description of the collection
          example: A unique collection of digital artwork
        socials:
          description: Social media links for the collection
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
    FollowCollectionDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          description: Indicates if the collection is favorited
          example: true
        collection:
          type: string
          description: Collection followed, empty when unfollow
          example: Mice-213123
      required:
        - isFavorite
    CollectionProfileFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
    CollectionProfilePaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/CollectionProfileDoc'
      required:
        - hasMoreResults
        - resources
    CollectionMintProfileFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
    CollectionMintProfilePaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/CollectionMintProfileDocHydrated'
      required:
        - hasMoreResults
        - resources
    MintStageDto:
      type: object
      properties:
        dataType:
          type: object
          example: mintStage
        collection:
          type: string
          example: MICE-a0c447
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgq2t6ef4u9ts3j86504sx0zlvw0vujfq6yys5sqfg40f
        collectionTag:
          type: string
          example: MiceCity
        name:
          type: string
          example: MiceCity
        startTime:
          type: number
          example: 1645210800
        endTime:
          type: number
          example: 0
        mintCount:
          type: number
          example: 5583
        mintLimit:
          type: number
          example: 8000
        mintEnabled:
          type: boolean
          example: true
        isWhitelist:
          type: boolean
          example: false
        walletLimit:
          type: number
          example: 0
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        id:
          type: string
          example: MICE-a0c447-MiceCity-mintStage
        _ts:
          type: number
          example: 1720568180
        walletLimitReached:
          type: boolean
          example: false
        maxBuyable:
          type: object
          example: null
          nullable: true
        userMintsPerStage:
          type: number
      required:
        - dataType
        - collection
        - contractAddress
        - collectionTag
        - name
        - startTime
        - endTime
        - mintCount
        - mintLimit
        - mintEnabled
        - isWhitelist
        - walletLimit
        - prices
        - id
        - _ts
        - walletLimitReached
        - maxBuyable
    CollectionMintProfileDocWithStages:
      type: object
      properties:
        contractAddress:
          type: string
          description: Smart contract address for minting
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
        collectionTag:
          type: string
          description: Collection tag for identification
          example: MYNFT
        cid:
          type: string
          description: IPFS CID for metadata
          example: QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco
        mediaType:
          type: string
          description: Media type of the NFT collection
          example: image/png
        hasAttributes:
          type: boolean
          description: Whether the collection has attributes/traits
          example: true
        collectionSize:
          type: number
          description: Total size of the collection
          example: 10000
        totalNftMinted:
          type: number
          description: Total number of NFTs minted
          example: 5000
        globalWalletLimit:
          type: number
          description: Global wallet limit for minting
          example: 10
        nftTransferLimited:
          type: boolean
          description: Whether NFT transfers are limited
          example: false
        kycRequired:
          type: boolean
          description: Whether KYC is required for minting
          example: false
        hasBotProtection:
          type: boolean
          description: Whether bot protection is enabled
          example: true
        collectionInfo:
          description: Short collection information
          allOf:
            - $ref: '#/components/schemas/ShortCollectionInfoDoc'
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        isExcludedFromMint:
          type: boolean
          description: Whether the user is excluded from minting
          example: false
        userMintsGlobal:
          type: number
          description: Number of global mints by the user
          example: 5
        mintStages:
          description: Available mint stages for the collection
          type: array
          items:
            $ref: '#/components/schemas/MintStageDto'
        creatorInfo:
          description: Creator profile information
          allOf:
            - $ref: '#/components/schemas/CreatorProfileDoc'
      required:
        - contractAddress
        - collectionTag
        - cid
        - mediaType
        - hasAttributes
        - collectionSize
        - totalNftMinted
        - globalWalletLimit
        - nftTransferLimited
        - kycRequired
        - hasBotProtection
        - collectionInfo
        - collection
        - isExcludedFromMint
        - userMintsGlobal
        - mintStages
        - creatorInfo
    WalletDetailDto:
      type: object
      properties:
        count:
          type: number
          description: Count of NFTs
          example: 4827
        weight:
          type: number
          description: Weight percentage
          example: 86.51
        address:
          type: string
          description: Address of the holder
          example: erd1qqqqqqqqqqqqqpgqvpkd3g3uwludduv3797j54qt6c888wa59w2shntt6z
        username:
          type: string
          description: Username of the holder
          example: 'Staking: XOXNO'
        type:
          type: string
          description: Type of the holder
          example: staking
      required:
        - count
        - weight
        - address
        - username
        - type
    CollectionHoldersDto:
      type: object
      properties:
        totalSupply:
          type: number
          description: Total supply of NFTs
          example: 5580
        walletDetails:
          type: array
          items:
            $ref: '#/components/schemas/WalletDetailDto'
        onMarket:
          type: object
          description: Details of NFTs on market
          example:
            count: 211
            weight: 3.78
        staked:
          type: object
          description: Details of staked NFTs
          example:
            count: 4827
            weight: 86.51
        otherSCs:
          type: object
          description: Details of NFTs in other smart contracts
          example:
            count: 10
            weight: 0.18
        burnWallet:
          type: object
          description: Details of NFTs in burn wallet
          example:
            count: 0
            weight: 0
        uniqueHolders:
          type: object
          description: Details of unique holders
          example:
            count: 764
            weight: 13.69
        holded:
          type: object
          description: Details of holded NFTs
          example:
            count: 532
            weight: 9.53
            avgPerHodler: 2.18
      required:
        - totalSupply
        - walletDetails
        - onMarket
        - staked
        - otherSCs
        - burnWallet
        - uniqueHolders
        - holded
    CollectionHoldersExportDto:
      type: object
      properties: {}
    CollectionOwnerDto:
      type: object
      properties:
        owner:
          type: string
          description: Owner address
          example: erd10ugfytgdndw5qmnykemjfpd7xrjs63f0r2qjhug0ek9gnfdjxq4s8qjvcx
      required:
        - owner
    CollectionOffersFilterCriteriaDto:
      type: object
      properties:
        dataType:
          example: globalOffer
          allOf:
            - $ref: '#/components/schemas/CollectionDataType'
        collection:
          example:
            - collection1
          type: array
          items:
            type: string
        offerId:
          example:
            - 123
          type: array
          items:
            type: integer
        owner:
          example:
            - owner1
          type: array
          items:
            type: string
        marketplace:
          example:
            - marketplace1
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
        isActive:
          type: boolean
          example: true
        withAttributes:
          type: boolean
          example: true
    CollectionOffersFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/CollectionOffersFilterCriteriaDto'
    GlobalOfferPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/GlobalOfferDocHydrated'
      required:
        - hasMoreResults
        - resources
    MintingListingDto:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for the mint profile
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: mintProfile
        collection:
          type: string
          description: Collection identifier
          example: COLLECTION-123456
        creatorTag:
          type: string
          description: Creator tag/identifier
          example: creator123
        creatorName:
          type: string
          description: Name of the collection creator
          example: John Doe
        contractAddress:
          type: string
          description: Smart contract address for minting
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
        collectionTag:
          type: string
          description: Collection tag for identification
          example: MYNFT
        cid:
          type: string
          description: IPFS CID for metadata
          example: QmXoypizjW3WknFiJnKLwHCnL72vedxjQkDDP1mXWo6uco
        mediaType:
          type: string
          description: Media type of the NFT collection
          example: image/png
        baseNftName:
          type: string
          description: Base name for NFTs in the collection
          example: My NFT Collection
        hasAttributes:
          type: boolean
          description: Whether the collection has attributes/traits
          example: true
        ownerTransferred:
          type: boolean
          description: Whether the collection owner has been transferred
          example: false
        collectionSize:
          type: number
          description: Total size of the collection
          example: 10000
        totalNftMinted:
          type: number
          description: Total number of NFTs minted
          example: 5000
        globalWalletLimit:
          type: number
          description: Global wallet limit for minting
          example: 10
        royalties:
          type: number
          description: Royalties percentage (basis points)
          example: 500
        oldVersion:
          type: boolean
          description: Whether this is an old version of the contract
          example: false
        nameShuffle:
          type: boolean
          description: Whether names are shuffled during minting
          example: true
        nftTransferLimited:
          type: boolean
          description: Whether NFT transfers are limited
          example: false
        allowsPublicBurn:
          type: boolean
          description: Whether public burning is allowed
          example: false
        kycRequired:
          type: boolean
          description: Whether KYC is required for minting
          example: false
        allowsRefund:
          type: boolean
          description: Whether refunds are allowed
          example: false
        hasBotProtection:
          type: boolean
          description: Whether bot protection is enabled
          example: true
        hasReveal:
          type: boolean
          description: Whether the collection has reveal mechanics
          example: false
        tags:
          type: object
          description: Tags associated with the collection
          example:
            - gaming
            - art
            - utility
        prices:
          description: Minimum starting prices for each public stage
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        startTime:
          type: number
          description: Earliest start time of all public stages (Unix timestamp)
          example: 1640995200
        endTime:
          type: number
          description: Latest end time of all public stages (Unix timestamp)
          example: 1641081600
        isSoldOut:
          type: boolean
          description: Whether the collection is sold out
          example: false
        id:
          type: string
          description: Unique identifier for the document
          example: COLLECTION-123456-mintProfile
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
        collectionInfo:
          $ref: '#/components/schemas/ShortCollectionInfoDoc'
      required:
        - dataType
        - collection
        - creatorTag
        - creatorName
        - contractAddress
        - collectionTag
        - cid
        - mediaType
        - baseNftName
        - hasAttributes
        - ownerTransferred
        - collectionSize
        - totalNftMinted
        - globalWalletLimit
        - royalties
        - oldVersion
        - nameShuffle
        - nftTransferLimited
        - kycRequired
        - allowsRefund
        - hasBotProtection
        - hasReveal
        - tags
        - prices
        - startTime
        - endTime
        - isSoldOut
        - id
        - collectionInfo
    TicketingDataType:
      type: string
      enum:
        - event-voucher
        - event-invitation
        - event-profile
        - event-question
        - event-question-answer
        - event-ticket-profile
        - event-ticket-stage
        - event-guest
        - event-referral-config
        - event-referral-code
        - event-referral-usage
        - event-user-role
      description: The type of user data.
    EventLocationDto:
      type: object
      properties:
        address:
          type: string
        placeId:
          type: string
        lat:
          type: number
          minimum: -90
          maximum: 90
          description: Latitude must be between -90 and 90
        long:
          type: number
          minimum: -180
          maximum: 180
          description: Longitude must be between -180 and 180
        instructions:
          type: string
        onlineLink:
          type: string
        city:
          type: string
        country:
          type: string
    EventCategory:
      type: string
      enum:
        - festival
        - conference
        - networking
        - meetup
        - web3
        - entertainment
      description: Category of the event.
    EventSubCategory:
      type: string
      enum:
        - music
        - arts-and-culture
        - food-and-drink
        - lifestyle-and-wellness
        - local-and-community
        - technology-and-innovation
        - business-and-finance
        - healthcare-and-science
        - education-and-learning
        - marketing-and-media
        - industry-specific
        - career-development
        - investor-and-startups
        - social-impact
        - personal-development
        - hobbies-and-interests
        - professional-groups
        - social-gathering
        - education-and-skills
        - family-and-kids
        - blockchain-and-cryptocurrency
        - metaverse-and-vr
        - defi-and-finance
        - dao-and-governance
        - web3-startups
        - live-music
        - comedy-shows
        - theatre-and-performance
        - movies
        - nightlife-and-clubbing
      description: Subcategory of the event.
    Visibility:
      type: string
      enum:
        - public
        - private
    RegistrationDetailsDto:
      type: object
      properties:
        visibility:
          allOf:
            - $ref: '#/components/schemas/Visibility'
        maxLimit:
          type: integer
          description: Maximum registrations allowed
        userLimit:
          type: integer
          description: Maximum registrations per user
        requireKYC:
          type: boolean
        requireName:
          type: boolean
        requireEmail:
          type: boolean
        requirePhoneNumber:
          type: boolean
        isPublished:
          type: boolean
        hasSideEvents:
          type: boolean
        hasWaitlist:
          type: boolean
        showGuestCount:
          type: boolean
        refundable:
          type: boolean
        nameWithNumber:
          type: boolean
        botProtection:
          type: boolean
        acceptCrypto:
          type: boolean
          description: Whether the event accepts crypto
        soldCount:
          type: integer
          description: Current number of tickets sold
        hasCustomQuestions:
          type: boolean
          description: Whether the event has custom questions
        emailSender:
          type: string
          description: Email sender for notifications
      required:
        - visibility
        - maxLimit
        - userLimit
        - requireKYC
        - requireName
        - requireEmail
        - requirePhoneNumber
        - isPublished
        - hasSideEvents
        - hasWaitlist
        - showGuestCount
        - refundable
        - nameWithNumber
        - botProtection
    PremiumType:
      type: object
      properties:
        searchable:
          type: boolean
          description: Whether the event is searchable
      required:
        - searchable
    EventSeoDto:
      type: object
      properties:
        description:
          type: string
          example: This is a description
        tags:
          example:
            - tag1
            - tag2
          type: array
          items:
            type: string
        alternativeTitle:
          type: string
          example: Alternative Title
    EventUserRoles:
      type: string
      enum:
        - event-manager
        - event-cohost
        - check-in-manager
        - event-reader
      description: Role of the user.
    EventUserRolePermission:
      type: string
      enum:
        - event-reader-view
        - event-manager-edit-page
        - event-manager-create-ticket
        - event-manager-edit-ticket
        - event-manager-delete-ticket
        - event-manager-edit-guest
        - event-manager-create-stage
        - event-manager-edit-stage
      description: Permissions of the user.
    RoleStatus:
      type: string
      enum:
        - active
        - pending
      description: Status of the user role.
    EventUserRoleDoc:
      type: object
      properties:
        dataType:
          description: Type of the document.
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: Unique identifier for the event.
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email address
        role:
          type: array
          description: Role of the user.
          items:
            $ref: '#/components/schemas/EventUserRoles'
        permissions:
          type: array
          description: Permissions of the user.
          items:
            $ref: '#/components/schemas/EventUserRolePermission'
        createdAt:
          type: integer
          description: Timestamp for when the user role was created.
        endTime:
          type: integer
          description: Timestamp for when the user role will expire.
        id:
          type: string
          description: Unique identifier for the document.
        status:
          description: Status of the user role.
          allOf:
            - $ref: '#/components/schemas/RoleStatus'
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
      required:
        - dataType
        - role
        - permissions
    EventGuestProfileSummary:
      type: object
      properties:
        address:
          type: string
          description: The address of the guest.
          example: erd1234
        profile:
          type: string
          description: The profile URL of the guest.
          example: https://example.com/profile.png
        name:
          type: string
          description: The name of the guest.
          example: John Doe
        herotag:
          type: string
          description: The herotag of the guest.
          example: john-doe
      required:
        - address
        - profile
    EventGuestSummary:
      type: object
      properties:
        count:
          type: integer
          description: Total number of guests.
          example: 100
        guests:
          description: List of guests with their address, profile, name, and herotag.
          type: array
          items:
            $ref: '#/components/schemas/EventGuestProfileSummary'
      required:
        - count
        - guests
    EventStartPrice:
      type: object
      properties:
        price:
          type: number
          description: Starting price of the event ticket.
        currency:
          type: string
          description: Currency of the price.
          example: USD
      required:
        - price
        - currency
    EventGuestRegistration:
      type: object
      properties:
        email:
          type: string
          description: Email address.
        name:
          type: string
          description: Name of the guest
        phone:
          type: string
          description: Phone number of the guest
    EventGuestBilling:
      type: object
      properties:
        isCompany:
          type: boolean
          description: Indicates whether the guest is a company.
        name:
          type: string
          description: Name of the company.
        companyRegistrationNumber:
          type: string
          description: Company registration number.
        companyVatNumber:
          type: string
          description: Company VAT number.
        email:
          type: string
          description: Email address.
        country:
          type: string
          description: Country
        city:
          type: string
          description: City
        address1:
          type: string
          description: Address line 1
        address2:
          type: string
          description: Address line 2
        postalCode:
          type: string
          description: Postal code
      required:
        - isCompany
        - name
        - email
        - country
        - city
        - address1
    EventGuestStatus:
      type: string
      enum:
        - pending
        - pendingApproval
        - inviteClaimed
        - partiallyActive
        - rejected
        - active
        - completed
        - partiallyCompleted
      description: Current status of the guest document
    EventGuestProfile:
      type: object
      properties:
        dataType:
          description: The type of document data.
          default: event-guest
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        wallet:
          type: string
          description: Guest wallet address.
        eventId:
          type: string
          description: Event ID that the guest is attending.
          example: event123
        ticket:
          type: object
          description: >-
            Object with dynamic keys, each representing a ticket for the event.
            The value is an object with check-in status and timestamps.
          example:
            key1:
              isCheckIn: true
              timestamp: 1724089378
              receivedAt: 1724089378
            key2:
              isCheckIn: false
              timestamp: 1724089379
              receivedAt: 1724089379
          additionalProperties:
            $ref: '#/components/schemas/EventGuestCheckInHydrated'
        questionnaireFilled:
          type: boolean
          description: Indicates whether the guest has filled out the questionnaire.
          example: true
        registration:
          description: Data from the guest registration form.
          allOf:
            - $ref: '#/components/schemas/EventGuestRegistration'
        billing:
          description: Data from the guest billing form.
          allOf:
            - $ref: '#/components/schemas/EventGuestBilling'
        status:
          description: Current status of the guest document
          example: pending
          allOf:
            - $ref: '#/components/schemas/EventGuestStatus'
        createdAt:
          type: integer
          description: Timestamp of guest creation.
          example: 1759714023
        invitationId:
          type: string
          description: Invitation ID for the guest
          example: 7f4174ea-df92-4b70-a2d6-5a117df5f823
        metadata:
          type: object
          description: Custom metadata for the guest
        id:
          type: string
          description: Unique identifier for the document.
          example: guest123
        pk:
          type: string
          description: Partition key for the document.
          example: event123
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
        ttl:
          type: integer
          description: Time to live in seconds for the document.
        profile:
          type: string
          description: Guest profile picture.
        herotag:
          type: string
          description: Guest wallet herotag.
      required:
        - dataType
        - wallet
        - eventId
        - ticket
        - questionnaireFilled
        - status
        - createdAt
        - profile
        - herotag
    EventProfile:
      type: object
      properties:
        dataType:
          description: The type of user data.
          default: event-profile
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        createdAt:
          type: integer
          description: The time the event was created as a Unix timestamp in seconds.
        creatorAddress:
          type: string
          description: Wallet address of the creator of the event.
        title:
          type: string
          description: Title of the event.
        startTime:
          type: integer
          description: Start time of the event as a Unix timestamp in seconds.
        endTime:
          type: integer
          description: End time of the event as a Unix timestamp in seconds.
        descriptionUrl:
          type: string
          description: >-
            URL to the markdown file in Azure storage containing the event
            description.
        location:
          description: >-
            Location details including geo points, address, and optional
            instructions.
          allOf:
            - $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
          description: Define if the event happens in real life or virtual on Zoom/Meet
        slug:
          type: string
          description: Unique slug for the event URL.
        profile:
          type: string
          description: URL to the profile image in Azure storage.
        category:
          description: Category of the event.
          allOf:
            - $ref: '#/components/schemas/EventCategory'
        subCategory:
          description: Subcategory of the event.
          allOf:
            - $ref: '#/components/schemas/EventSubCategory'
        background:
          type: string
          description: URL to the background image in Azure storage, optional.
        registration:
          description: >-
            Registration details such as visibility, max capacity, and ticket
            limits.
          allOf:
            - $ref: '#/components/schemas/RegistrationDetailsDto'
        premium:
          description: Event premium features
          allOf:
            - $ref: '#/components/schemas/PremiumType'
        contractAddress:
          type: string
          description: The address of the contract that manages the event.
        collection:
          type: string
          description: The NFT collection the event is associated with.
        seo:
          example: {}
          description: >-
            SEO-related information such as short description, tags, and
            alternative title.
          allOf:
            - $ref: '#/components/schemas/EventSeoDto'
        id:
          type: string
          description: Automatically generated unique identifier for the event.
        eventPermissions:
          description: Permissions for the event.
          allOf:
            - $ref: '#/components/schemas/EventUserRoleDoc'
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
        creatorProfile:
          description: Creator profile data including name, profile, and herotag.
          allOf:
            - $ref: '#/components/schemas/CreatorProfileDoc'
        guestSummary:
          description: Summary of the guests attending the event.
          allOf:
            - $ref: '#/components/schemas/EventGuestSummary'
        startsFrom:
          description: The starting price of the event, if applicable.
          allOf:
            - $ref: '#/components/schemas/EventStartPrice'
        guestProfile:
          description: The guest profile of the user.
          allOf:
            - $ref: '#/components/schemas/EventGuestProfile'
        coHosts:
          description: The co-hosts of the event.
          type: array
          items:
            $ref: '#/components/schemas/OwnerDto'
      required:
        - dataType
        - createdAt
        - creatorAddress
        - title
        - startTime
        - endTime
        - location
        - isVirtualEvent
        - profile
        - category
        - registration
        - premium
        - id
        - creatorProfile
    CreatorDetailsDto:
      type: object
      properties:
        dataType:
          type: string
          example: creatorProfile
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
        address:
          type: string
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
          description: Creator wallet address
        name:
          type: string
          example: Awesome Creator
          description: Creator name (editable by creator)
        creatorTag:
          type: string
          example: awesome-creator
          description: Unique creator tag (not editable)
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqcollection123456789abcdef
          description: Contract address for regular NFT creators
        ticketingContractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqticket123456789abcdef
          description: Contract address for ticketing creators
        profile:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profilePicture.webp
          description: Creator profile picture URL
        banner:
          type: string
          example: https://media.xoxno.com/creatorprofile/erd1.../profileBanner.webp
          description: Creator profile banner URL
        joinedDate:
          type: number
          example: 1640995200
          description: Unix timestamp when creator joined
        description:
          type: string
          example: Leading NFT creator and artist
          description: Creator description
        socials:
          description: Social media links for the creator
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        id:
          type: string
          example: >-
            erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq-creatorProfile
          description: Document ID
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp
        listing:
          type: array
          items:
            $ref: '#/components/schemas/MintingListingDto'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventProfile'
      required:
        - dataType
        - address
        - name
        - creatorTag
        - profile
        - banner
        - socials
    CreatorProfileEditDto:
      type: object
      properties:
        name:
          type: string
          example: Awesome Creator
          description: Creator name (editable by creator)
        description:
          type: string
          example: Leading NFT creator and artist
          description: Creator description
        socials:
          description: Social media links for the creator
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
    ShareholderDto:
      type: object
      properties:
        address:
          type: string
          description: The wallet address of the shareholder
          example: erd1qqqqqqqqqqqqqpgqakt2g7gu2ugahfmqvwyh9fqjlhkfau92jps3lw7a2
        share:
          type: number
          description: The percentage share owned by this shareholder
          example: 25.5
          minimum: 0
          maximum: 100
      required:
        - address
        - share
    LinkedAccountType:
      type: string
      enum:
        - wallet
        - passkey
        - google_oauth
        - apple_oauth
    WalletClientType:
      type: string
      enum:
        - xoxno
        - webwallet
        - maiar_v2
        - sui
        - ledger
        - extension
        - native
        - zkLogin
        - metamask
      description: Type of wallet client
    Web2UserWallet:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/LinkedAccountType'
        address:
          type: string
          description: Wallet address
        index:
          type: number
          description: Wallet index
        signature:
          type: string
          description: Signature for the wallet
        chain:
          type: string
          description: Blockchain network
        walletClientType:
          description: Type of wallet client
          allOf:
            - $ref: '#/components/schemas/WalletClientType'
        recoveryMethod:
          type: string
          description: Method used for wallet recovery
        id:
          type: string
          description: Unique identifier for the wallet
      required:
        - type
        - address
        - chain
        - walletClientType
    Web2UserAccount:
      type: object
      properties:
        type:
          description: Type of linked account
          example: google_oauth
          allOf:
            - $ref: '#/components/schemas/LinkedAccountType'
        subject:
          type: string
          description: User ID from the provider
          example: '123456789'
        name:
          type: string
          description: User's name
          example: John Doe
        profilePicture:
          type: string
          description: URL of the user's profile picture
          example: https://example.com/profile.jpg
        email:
          type: string
          description: User's email address
          example: john.doe@example.com
        username:
          type: string
          description: User's username
          example: johndoe123
      required:
        - type
        - subject
    Web2UserDoc:
      type: object
      properties:
        createdOn:
          type: number
          description: Timestamp of user creation
        id:
          type: string
          description: Unique identifier for the user
        linkedAccounts:
          description: Array of linked accounts (Web2UserWallet or Web2UserAccount)
          type: array
          items:
            type: object
        shards:
          description: Array of shard identifiers
          type: array
          items:
            type: string
        hasNativeWallet:
          type: object
          description: Indicates if the user has a native wallet
        wallet:
          description: User's wallet information
          allOf:
            - $ref: '#/components/schemas/Web2UserWallet'
        salt:
          type: string
          description: Salt for the user, used for SUI ZK Login
        google:
          description: User's Google account information
          allOf:
            - $ref: '#/components/schemas/Web2UserAccount'
        apple:
          description: User's Apple account information
          allOf:
            - $ref: '#/components/schemas/Web2UserAccount'
        pk:
          type: string
          description: Primary key for the user document
        _ts:
          type: number
          description: Timestamp of the last update
      required:
        - createdOn
        - id
        - linkedAccounts
        - shards
        - hasNativeWallet
        - salt
        - pk
    SuccessWithMessageDto:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          description: Response message indicating the result of the operation
          example: Operation completed successfully
      required:
        - success
        - message
    Web2WalletDto:
      type: object
      properties:
        type:
          description: Type of linked account
          allOf:
            - $ref: '#/components/schemas/LinkedAccountType'
        address:
          type: string
          description: Wallet address
        chain:
          type: string
          description: Blockchain network
        signature:
          type: string
          description: Signature for authentication
        authToken:
          type: string
          description: Authentication token
        walletClientType:
          description: Type of wallet client
          allOf:
            - $ref: '#/components/schemas/WalletClientType'
        index:
          type: integer
          description: Index of the wallet
        recoveryMethod:
          type: string
          description: Method used for wallet recovery
      required:
        - type
        - address
        - chain
        - walletClientType
    NativeWalletDto:
      type: object
      properties:
        shards:
          description: Array of wallet shards
          minItems: 4
          maxItems: 4
          example:
            - shard1
            - shard2
            - shard3
            - shard4
          type: array
          items:
            type: string
        wallet:
          description: Web2 wallet information
          allOf:
            - $ref: '#/components/schemas/Web2WalletDto'
        isActive:
          type: boolean
          description: Wether the backed up wallet shall become active
      required:
        - shards
        - wallet
        - isActive
    SwitchWalletDto:
      type: object
      properties:
        address:
          type: string
          description: New active address
      required:
        - address
    Web2UserShardsDto:
      type: object
      properties:
        shards:
          description: Shards of the user
          type: array
          items:
            type: string
      required:
        - shards
    XoxnoStakingReward:
      type: object
      properties:
        tokenIdentifier:
          type: string
          description: Token identifier
          example: RARE-99e8b0
        tokenNonce:
          type: number
          description: Token nonce
          example: 0
        rewardBalance:
          type: string
          description: Reward balance
          example: '322605500000000000000000'
        shareRewardBalance:
          type: string
          description: Share reward balance
          example: '322605500000000000000000'
        rewardPerEpoch:
          type: string
          description: Reward per epoch
          example: '322605500000000000000000'
        rewardPerEpochShort:
          type: number
          description: Reward per epoch short
          example: 322605.5
        rewardPerDayPerNft:
          type: number
          description: Reward per day per NFT
          example: 1
        rewardBalanceShort:
          type: number
          description: Reward balance short
          example: 322605.5
        usdValue:
          type: number
          description: USD value
          example: 27.64023234925034
      required:
        - tokenIdentifier
        - tokenNonce
        - rewardBalance
        - shareRewardBalance
        - rewardPerEpoch
    StakingSummary:
      type: object
      properties:
        poolId:
          type: number
          description: Pool ID
          example: 3
        name:
          type: string
          description: Pool name
          example: SRB - MiceCity
        description:
          type: string
          description: Pool description
          example: The largest staking pool
        stakingEnabled:
          type: boolean
          description: Staking enabled
          example: true
        profile:
          type: string
          description: Profile picture URL
          example: >-
            https://media.xoxno.com/stakingpools/3/stakingPoolPicture_3.webp?_ts=1716838395
        collection:
          description: Collection identifiers
          example:
            - MICE-a0c447
            - SRB-61daf7
          type: array
          items:
            type: string
        poolStakedCount:
          type: number
          description: Pool staked count
          example: 5895
        userStakedCount:
          type: number
          description: User staked count
          example: 0
        delegatorCount:
          type: number
          description: Delegator count
          example: 267
        rewardDuration:
          type: number
          description: Reward duration in days
          example: 63
        poolReward:
          description: Pool reward details
          type: array
          items:
            $ref: '#/components/schemas/XoxnoStakingReward'
        userReward:
          description: User reward details
          type: array
          items:
            $ref: '#/components/schemas/XoxnoStakingReward'
        poolType:
          type: string
          description: Pool type
          example: Duo
        issuingType:
          type: string
          description: Issuing type
          example: Fixed
        unBoundPeriod:
          type: number
          description: Unbound period in days
          example: 0
        hasUnboundPeriod:
          type: boolean
          description: Has unbound period
          example: false
        userUnboundCount:
          type: number
          description: Unbound count
          example: 4
        maxPoolLimit:
          type: number
          description: Max pool limit
          example: 16000
        hasMaxWalletLimit:
          type: boolean
          description: Has max wallet limit
          example: true
        maxWalletLimit:
          type: number
          description: Max wallet limit
          example: 8000
        startEpoch:
          type: number
          description: Start epoch
          example: 1381
        endEpoch:
          type: number
          description: End epoch
          example: 1444
        owner:
          type: string
          description: Pool owner address
          example: erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6
        currentEpoch:
          type: number
          description: Current epoch
          example: 1442
        isActive:
          type: boolean
          description: Is active flag
          example: true
        daysLeft:
          type: number
          description: Days left for staking
          example: 2
        cutFee:
          type: number
          description: Cut fee percentage
          example: 0
        percentageFilled:
          type: number
          description: Percentage filled
          example: 36.84375
      required:
        - poolId
        - name
        - stakingEnabled
        - profile
        - collection
        - poolStakedCount
        - userStakedCount
        - delegatorCount
        - rewardDuration
        - poolReward
        - userReward
        - poolType
        - issuingType
        - unBoundPeriod
        - hasUnboundPeriod
        - userUnboundCount
        - maxPoolLimit
        - hasMaxWalletLimit
        - maxWalletLimit
        - startEpoch
        - endEpoch
        - owner
        - currentEpoch
        - isActive
        - daysLeft
        - cutFee
        - percentageFilled
    StakingDataType:
      type: string
      enum:
        - pool
        - delegator
        - creator
      description: Type of staking data document
    StakingPoolTypeString:
      type: string
      enum:
        - None
        - Single
        - Perk
        - Duo
      description: Type of staking pool
    StakingIssuingTypeString:
      type: string
      enum:
        - None
        - Fixed
        - Dynamic
      description: Type of reward issuing mechanism
    StakingPoolDoc:
      type: object
      properties:
        dataType:
          description: Type of staking data document
          example: pool
          allOf:
            - $ref: '#/components/schemas/StakingDataType'
        poolId:
          type: integer
          description: Unique identifier for the staking pool
          example: 3
        poolType:
          description: Type of staking pool
          example: Duo
          allOf:
            - $ref: '#/components/schemas/StakingPoolTypeString'
        stakingEnabled:
          type: boolean
          description: Whether staking is currently enabled for this pool
          example: true
        whitelistEnabled:
          type: boolean
          description: Whether whitelist is enabled for this pool
          example: false
        matchPairEnabled:
          type: boolean
          description: Whether match pair staking is enabled
          example: false
        maxStakePerWallet:
          type: integer
          description: Maximum number of NFTs a wallet can stake
          example: 8000
          minimum: 0
        maxStakePerPool:
          type: integer
          description: Maximum total number of NFTs that can be staked in the pool
          example: 16000
          minimum: 0
        issuingType:
          description: Type of reward issuing mechanism
          example: Fixed
          allOf:
            - $ref: '#/components/schemas/StakingIssuingTypeString'
        issuingDeadline:
          type: integer
          description: Epoch deadline for reward issuing
          example: 1444
        issuingStart:
          type: integer
          description: Epoch when reward issuing starts
          example: 1381
        unboundPeriod:
          type: integer
          description: Number of days for the unbounding period
          example: 0
          minimum: 0
        collection:
          description: List of collection identifiers eligible for staking
          example:
            - MICE-a0c447
            - SRB-61daf7
          type: array
          items:
            type: string
        reward:
          description: List of reward configurations for the pool
          type: array
          items:
            $ref: '#/components/schemas/XoxnoStakingReward'
        cutFee:
          type: number
          description: Fee percentage cut taken by the pool owner
          example: 5
          minimum: 0
          maximum: 100
        owner:
          type: string
          description: Wallet address of the pool owner
          example: erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6
        name:
          type: string
          description: Name of the staking pool
          example: SRB - MiceCity
        profile:
          type: string
          description: Profile picture URL for the staking pool
          example: >-
            https://media.xoxno.com/stakingpools/3/stakingPoolPicture_3.webp?_ts=1716838395
        totalWhitelisted:
          type: integer
          description: Total number of whitelisted addresses
          example: 100
        delegatorCount:
          type: integer
          description: Number of delegators in the pool
          example: 267
        poolStakedCount:
          type: integer
          description: Total number of NFTs staked in the pool
          example: 5895
        pk:
          type: string
          description: Partition key for Cosmos DB storage
          example: '3'
        id:
          type: string
          description: Document ID in Cosmos DB
          example: '3'
      required:
        - dataType
        - poolId
        - poolType
        - stakingEnabled
        - whitelistEnabled
        - matchPairEnabled
        - maxStakePerWallet
        - maxStakePerPool
        - issuingType
        - issuingDeadline
        - issuingStart
        - unboundPeriod
        - collection
        - reward
        - cutFee
        - owner
    StakingEditDto:
      type: object
      properties:
        name:
          type: string
          description: Pool name
          example: SRB - MiceCity
        description:
          type: string
          description: Pool description
          example: The largest staking pool
    OwnedCollectionsDto:
      type: object
      properties:
        registered:
          description: List of registered collections
          example:
            - EGIRL-443b95
            - MONKEY-ac9bdf
            - BLZ-1d0442
            - MAFIALEGEN-826144
          type: array
          items:
            type: string
        availableForRegister:
          description: List of collections available for registration
          example:
            - XOXNO-a52799
          type: array
          items:
            type: string
      required:
        - registered
        - availableForRegister
    UserStakingSummaryDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
          example: MICE-a0c447
        stakedCount:
          type: number
          description: Number of staked items
          example: 21
        name:
          type: string
          description: Name of the collection
          example: MiceCity
        isVerified:
          type: boolean
          description: Verification status
          example: true
        profile:
          type: string
          description: Profile image URL
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilePicture.webp?ts=1679309756
        banner:
          type: string
          description: Banner image URL
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilebanner.webp
        poolIds:
          description: List of pool IDs where the user has staked NFTs
          example:
            - 1
            - 3
            - 7
          type: array
          items:
            type: number
        userReward:
          description: User reward details across all pools
          type: array
          items:
            $ref: '#/components/schemas/XoxnoStakingReward'
      required:
        - collection
        - stakedCount
        - name
        - isVerified
        - profile
        - banner
        - poolIds
        - userReward
    StakingCreatorDoc:
      type: object
      properties:
        dataType:
          description: Type of staking data document
          example: creator
          allOf:
            - $ref: '#/components/schemas/StakingDataType'
        address:
          type: string
          description: Creator wallet address
          example: erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6
        ownedPools:
          description: List of pool IDs owned by this creator
          example:
            - 1
            - 3
            - 7
          type: array
          items:
            type: number
        ownedCollections:
          description: List of collection identifiers owned by this creator
          example:
            - MICE-a0c447
            - SRB-61daf7
            - XOXNO-a52799
          type: array
          items:
            type: string
        cutFee:
          type: number
          description: Fee percentage cut taken by the creator from staking rewards
          example: 5
          minimum: 0
          maximum: 100
        id:
          type: string
          description: 'Document ID in format: {address}-{dataType}'
          example: >-
            erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6-creator
        pk:
          type: string
          description: Partition key for Cosmos DB storage
          example: erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6
      required:
        - dataType
        - address
        - ownedPools
        - ownedCollections
        - cutFee
    StakingStatus:
      type: string
      enum:
        - staked
        - unstaked
        - available
    StakingUserPoolNfts:
      type: object
      properties:
        poolInfo:
          $ref: '#/components/schemas/StakingSummary'
        nftDocs:
          type: array
          items:
            $ref: '#/components/schemas/NftDocHydrated'
        count:
          type: integer
          example: 12
      required:
        - poolInfo
        - nftDocs
        - count
    StakingExploreDtoHydrated:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
          example: MICE-a0c447
        activePools:
          type: number
          description: Number of active staking pools for this collection
          example: 3
        totalPoolStakedCount:
          type: number
          description: Total number of NFTs staked across all pools
          example: 5895
        totalDelegatorCount:
          type: number
          description: Total number of delegators participating in staking
          example: 267
        rewardTickers:
          description: List of reward token tickers available in staking pools
          example:
            - RARE-99e8b0
            - USDC-350c4e
          type: array
          items:
            type: string
        collectionInfo:
          $ref: '#/components/schemas/ShortCollectionDoc'
      required:
        - collection
        - activePools
        - totalPoolStakedCount
        - totalDelegatorCount
        - rewardTickers
        - collectionInfo
    OwnedServicesDto:
      type: object
      properties:
        mintProfiles:
          type: array
          items:
            $ref: '#/components/schemas/CollectionMintProfileDocHydrated'
        stakingPools:
          type: array
          items:
            $ref: '#/components/schemas/StakingSummary'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventProfile'
        creatorProfile:
          $ref: '#/components/schemas/CreatorProfileDoc'
        address:
          type: string
          example: erd1312
      required:
        - mintProfiles
        - stakingPools
        - events
        - creatorProfile
        - address
    FilterQueryDto:
      type: object
      properties:
        name:
          type: string
          description: The search query
          example: '@mihai'
        top:
          type: integer
        skip:
          type: integer
        chain:
          type: array
          description: Filter by blockchain chains
          example:
            - MVX
          items:
            $ref: '#/components/schemas/ActivityChain'
        orderBy:
          description: >-
            Fields to sort by with direction (e.g., "name asc", "timestamp
            desc")
          example:
            - name asc
            - timestamp desc
          type: array
          items:
            type: string
        select:
          description: Fields to include in the response
          example:
            - name
            - identifier
            - collection
          type: array
          items:
            type: string
      required:
        - name
    CollectionDto:
      type: object
      properties:
        collection:
          type: string
          example: EAPES-8f3c1f
        name:
          type: string
          example: EAPES
        isVisible:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: true
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EAPES-8f3c1f/profilePicture.webp?ts=1691359925
        type:
          type: string
          example: NonFungibleESDT
        statistics:
          $ref: '#/components/schemas/StatisticsDto'
        floorPrice:
          type: number
          example: 3.1
        chain:
          type: string
          enum:
            - MVX
            - SUI
      required:
        - collection
        - name
        - isVisible
        - isVerified
        - profile
        - type
        - statistics
        - floorPrice
    UserDto:
      type: object
      properties:
        address:
          type: string
          example: erd10hsfh2xhn4qzatc0vguxgfdu8aegurnep7zzyg0ht9ddw50g5xfq8ccu4q
        herotag:
          type: string
          example: erd1...cu4q
        isVerified:
          type: boolean
          example: false
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
        isCreator:
          type: boolean
          example: true
        addressTrimmed:
          type: string
          example: erd1...cu4q
        chain:
          type: string
          enum:
            - MVX
            - SUI
      required:
        - address
        - herotag
        - isVerified
        - profile
        - addressTrimmed
    CreatorDto:
      type: object
      properties:
        address:
          type: string
          example: erd10hsfh2xhn4qzatc0vguxgfdu8aegurnep7zzyg0ht9ddw50g5xfq8ccu4q
        herotag:
          type: string
          example: erd1...cu4q
        addressTrimmed:
          type: string
          example: erd1...cu4q
        isCreator:
          type: boolean
          example: true
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqfnmr778ef8z9mk79rcwzwdhywraahs7hys5sute79u
        name:
          type: string
          example: Ep1xStudio
        creatorTag:
          type: string
          example: Ep1xStudio
        joinedDate:
          type: number
          example: 1643145426
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
        chain:
          type: string
          enum:
            - MVX
            - SUI
      required:
        - address
        - herotag
        - addressTrimmed
        - isCreator
        - contractAddress
        - name
        - creatorTag
        - profile
    NftDto:
      type: object
      properties:
        identifier:
          type: string
          example: EAPES-8f3c1f-0209
        name:
          type: string
          example: EAPES
        collection:
          type: string
          example: EAPES-8f3c1f
        onSale:
          type: boolean
          example: true
        url:
          type: string
          example: >-
            https://media.elrond.com/nfts/asset/QmRP9FVznm1xxa3FEsDENXhafRDaRWY6LKQdg8GygHNHKw/520.png
        media:
          $ref: '#/components/schemas/NftMedia'
        wasProcessed:
          type: boolean
          example: true
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        chain:
          type: string
          enum:
            - MVX
            - SUI
      required:
        - identifier
        - name
        - collection
        - onSale
        - url
        - media
        - wasProcessed
        - metadata
    GlobalSearchResourcesDto:
      type: object
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionDto'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        creators:
          type: array
          items:
            $ref: '#/components/schemas/CreatorDto'
        nft:
          type: array
          items:
            $ref: '#/components/schemas/NftDto'
      required:
        - collections
        - users
        - creators
        - nft
    GlobalSearchResourcesPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          allOf:
            - $ref: '#/components/schemas/GlobalSearchResourcesDto'
      required:
        - hasMoreResults
        - resources
    LendingNftAttributes:
      type: object
      properties:
        isolated:
          type: boolean
          description: Whether the position is isolated
          example: false
        eModeCategory:
          type: string
          description: E-mode category identifier
          example: '1'
        positionMode:
          description: Position mode for the lending NFT
          example: Normal
          allOf:
            - $ref: '#/components/schemas/PositionMode'
        isolatedToken:
          type: string
          description: Token identifier for isolated positions
          example: USDC-c76f1f
      required:
        - isolated
        - eModeCategory
        - positionMode
    LendingTokenPriceDto:
      type: object
      properties:
        price:
          type: string
          description: Token price in USD as a string to preserve precision
          example: '125.50'
      required:
        - price
    NotificationDoc:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for notification
          enum:
            - notification
            - pushNotification
            - mobileDevice
            - deviceTagStorage
          example: notification
          default: notification
        txHash:
          type: string
          description: Transaction hash
          example: 0x123...
        source:
          type: string
          description: Source of the notification
          example: xoxno
        activityType:
          type: string
          description: Type of marketplace activity
          enum:
            - listingCreate
            - listingWithdraw
            - listingUpdate
            - auctionBid
            - auctionOutBid
            - offerCreate
            - offerWithdraw
            - offerReject
            - globalOfferCreate
            - globalOfferWithdraw
            - trade
            - bulkTrade
            - auctionTrade
            - otherTrade
            - offerTrade
            - globalOfferTrade
            - deposit
            - withdrawDeposit
            - setCollectionConfig
          example: trade
        owner:
          type: string
          description: Owner address
          example: erd1...
        message:
          type: string
          description: Optional notification message
          example: Your NFT has been sold
        asset:
          type: object
          description: Asset information
        activity:
          type: object
          description: Activity details
        isRead:
          type: boolean
          description: Whether the notification has been read
          example: false
          default: false
        timestamp:
          type: number
          description: Unix timestamp of the notification
          example: 1640995200
        id:
          type: string
          description: Document ID
          example: notification-123
        pk:
          type: string
          description: Partition key for Cosmos DB
          example: erd1...
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
      required:
        - dataType
        - txHash
        - source
        - activityType
        - owner
        - asset
        - activity
        - isRead
        - timestamp
    NotificationPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/NotificationDoc'
      required:
        - hasMoreResults
        - resources
    PushNotificationCountResponse:
      type: object
      properties:
        count:
          type: number
      required:
        - count
    DevicePlatform:
      type: string
      enum:
        - ios
        - android
      description: Device platform
    MobileDeviceRegistrationDto:
      type: object
      properties:
        deviceUUID:
          type: string
          description: Unique device identifier
          example: abc123-def456-ghi789
        platform:
          description: Device platform
          example: ios
          allOf:
            - $ref: '#/components/schemas/DevicePlatform'
        pushChannel:
          type: string
          description: FCM token for Android or APNs token for iOS
          example: fcm-token-or-apns-token-here
        appVersion:
          type: string
          description: App version
          example: 1.0.0
        deviceModel:
          type: string
          description: Device model
          example: iPhone 14 Pro
        osVersion:
          type: string
          description: Operating system version
          example: iOS 17.0
      required:
        - deviceUUID
        - platform
        - pushChannel
        - appVersion
    MobileDeviceDoc:
      type: object
      properties:
        dataType:
          type: object
          description: Document type identifier
        deviceUUID:
          type: string
          description: Unique device identifier
        installationId:
          type: string
          description: Azure Notification Hubs installation ID
        platform:
          description: Mobile platform (iOS or Android)
          allOf:
            - $ref: '#/components/schemas/DevicePlatform'
        pushChannel:
          type: string
          description: Platform-specific push token (FCM for Android, APNS for iOS)
        web2UserId:
          type: string
          description: Firebase user ID
        linkedAddresses:
          description: Blockchain addresses linked to this device
          type: array
          items:
            type: string
        appVersion:
          type: string
          description: Mobile app version
        deviceModel:
          type: string
          description: Device model (e.g., iPhone 14, Pixel 7)
        osVersion:
          type: string
          description: Operating system version
        registeredAt:
          type: number
          description: Unix timestamp when device was registered
        lastActiveAt:
          type: number
          description: Unix timestamp of last device activity
        isActive:
          type: object
          description: Whether the device is active for notifications
        id:
          type: string
        pk:
          type: string
        _ts:
          type: number
      required:
        - dataType
        - deviceUUID
        - installationId
        - platform
        - pushChannel
        - web2UserId
        - linkedAddresses
        - appVersion
        - registeredAt
        - lastActiveAt
        - isActive
    NotificationDataType:
      type: string
      enum:
        - notification
        - pushNotification
        - mobileDevice
        - deviceTagStorage
      description: Document type identifier for Cosmos DB
    PushNotificationType:
      type: string
      enum:
        - eventApproved
        - eventUpdate
        - eventReminder
        - eventCheckIn
        - eventMarketing
        - nftSold
        - offerReceived
        - userSpecific
        - broadcast
    PushNotificationStatus:
      type: string
      enum:
        - sent
        - delivered
        - failed
        - pending
    PushNotificationEventDto:
      type: object
      properties:
        eventId:
          type: string
          description: Unique identifier of the event
          example: event-123-456-789
        eventTitle:
          type: string
          description: Title of the event
          example: Summer Music Festival 2024
        eventProfile:
          type: string
          description: Profile image URL of the event
          example: https://cdn.xoxno.com/events/summer-fest.jpg
        creatorAddress:
          type: string
          description: Blockchain address of the event creator
          example: erd1creator123...
        creatorName:
          type: string
          description: Display name of the event creator
          example: Festival Organizers Inc.
    PushNotificationTargetingDto:
      type: object
      properties:
        type:
          description: Type of notification targeting strategy
          example: userSpecific
          allOf:
            - $ref: '#/components/schemas/PushNotificationType'
        tagExpression:
          type: string
          description: Azure Notification Hub tag expression for targeting
          example: (tag:event:123 && tag:status:approved) || tag:creator:456
        targetUsers:
          description: List of specific Firebase UIDs to target
          example:
            - firebase-uid-123
            - firebase-uid-456
          type: array
          items:
            type: string
        targetAddresses:
          description: List of blockchain addresses to target
          example:
            - erd1abc...
            - erd1def...
          type: array
          items:
            type: string
        recipientCount:
          type: number
          description: Total number of recipients targeted
          example: 150
      required:
        - type
    PushNotificationDoc:
      type: object
      properties:
        dataType:
          description: Document type identifier for Cosmos DB
          example: pushNotification
          allOf:
            - $ref: '#/components/schemas/NotificationDataType'
        title:
          type: string
          description: Title of the push notification
          example: 🎉 Event Registration Approved!
        message:
          type: string
          description: Body text of the push notification
          example: You have been approved for the "Summer Music Festival" event!
        imageUrl:
          type: string
          description: URL to an image to display with the notification
          example: https://cdn.xoxno.com/notifications/event-banner.jpg
        notificationType:
          allOf:
            - $ref: '#/components/schemas/PushNotificationType'
        status:
          allOf:
            - $ref: '#/components/schemas/PushNotificationStatus'
        owner:
          type: string
          description: Firebase UID of the notification owner (recipient)
          example: firebase-uid-123456789
        senderAddress:
          type: string
          description: Blockchain address of the notification sender
          example: erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th
        senderName:
          type: string
          description: Display name of the notification sender
          example: John Doe
        event:
          $ref: '#/components/schemas/PushNotificationEventDto'
        targeting:
          $ref: '#/components/schemas/PushNotificationTargetingDto'
        isRead:
          type: boolean
          description: Whether the notification has been read by the recipient
          example: false
          default: false
        timestamp:
          type: number
          description: Unix timestamp when the notification was created
          example: 1704067200
        deliveredAt:
          type: number
          description: Unix timestamp when the notification was delivered to the device
          example: 1704067300
        clickedAt:
          type: number
          description: Unix timestamp when the notification was clicked/opened
          example: 1704067400
        sound:
          type: string
          description: Sound to play when the notification is received
          example: default
        badge:
          type: number
          description: Badge count to display on the app icon
          example: 1
        appMetadata:
          type: object
        id:
          type: string
          description: Unique identifier for the notification document
          example: 550e8400-e29b-41d4-a716-446655440000
        pk:
          type: string
          description: Partition key for Cosmos DB (owner Firebase UID)
          example: firebase-uid-123456789
        _ts:
          type: number
          description: Cosmos DB timestamp (seconds since epoch)
          example: 1704067200
      required:
        - dataType
        - title
        - message
        - notificationType
        - status
        - owner
        - senderAddress
        - targeting
        - isRead
        - timestamp
    PushNotificationResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/PushNotificationDoc'
        hasMoreResults:
          type: boolean
      required:
        - resources
        - hasMoreResults
    NotificationSuccessResponseDto:
      type: object
      properties:
        success:
          type: boolean
          description: Operation success status
          example: true
        message:
          type: string
          description: Response message
          example: Operation completed successfully
      required:
        - success
        - message
    EventNotificationDto:
      type: object
      properties:
        title:
          type: string
          description: Notification title
          example: Event Update
        message:
          type: string
          description: Notification message
          example: The event location has been updated!
        imageUrl:
          type: string
          description: Optional image URL for the notification
          example: https://example.com/image.jpg
        eventId:
          type: string
          description: Event ID for event-specific notifications
          example: event-123-456
        targetUsers:
          description: Target specific user IDs (Web2 Firebase UIDs)
          example:
            - user123
            - user456
          type: array
          items:
            type: string
        targetAddresses:
          description: Target specific wallet addresses
          example:
            - erd1abc...
            - erd1def...
          type: array
          items:
            type: string
        metadata:
          type: object
          description: Additional metadata for the notification
      required:
        - title
        - message
    CreatorMarketingNotificationDto:
      type: object
      properties:
        title:
          type: string
          description: Notification title
          example: New Event from Your Favorite Creator!
        message:
          type: string
          description: Notification message
          example: Join us for an exciting new event next month!
        imageUrl:
          type: string
          description: Optional image URL for the notification
          example: https://example.com/event-image.jpg
        creatorAddress:
          type: string
          description: Creator wallet address to target past attendees
          example: erd1creator123...
        metadata:
          type: object
          description: Additional metadata for the notification
      required:
        - title
        - message
        - creatorAddress
    NftActivityType:
      type: string
      enum:
        - nftCreate
        - nftBurn
        - nftUpdate
        - nftTransfer
        - listingCreate
        - listingWithdraw
        - listingUpdate
        - auctionBid
        - auctionOutBid
        - offerCreate
        - offerWithdraw
        - offerReject
        - globalOfferCreate
        - globalOfferWithdraw
        - trade
        - bulkTrade
        - auctionTrade
        - otherTrade
        - offerTrade
        - globalOfferTrade
        - stake
        - unStake
        - createGame
        - joinGame
        - cancelGame
        - endGame
        - spin
        - joinWheel
    NftActivityEventSource:
      type: string
      enum:
        - mvxBuiltIn
        - xoxno
        - frameit
        - deadrare
        - krogan
        - xoxnoLaunchpad
        - xoxnoStaking
        - xoxnoP2P
        - xoxnoLs
        - xoxnoEgldLs
        - xoxnoLending
        - boberBattle
        - boberWheel
    ActivityDataDto:
      type: object
      properties:
        collection:
          type: array
          items:
            type: string
          example:
            - collection1
        identifier:
          type: array
          items:
            type: string
          example:
            - identifier1
    NftActivityFilterCriteriaDto:
      type: object
      properties:
        txHash:
          type: array
          items:
            type: string
        activityAddress:
          type: array
          items:
            type: string
        from:
          type: array
          items:
            type: string
        to:
          type: array
          items:
            type: string
        activityType:
          type: array
          example:
            - listingCreate
          items:
            $ref: '#/components/schemas/NftActivityType'
        source:
          type: array
          items:
            $ref: '#/components/schemas/NftActivityEventSource'
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        activityData:
          $ref: '#/components/schemas/ActivityDataDto'
    NftActivityFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
          default: false
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/NftActivityFilterCriteriaDto'
    ShortNftDoc:
      type: object
      properties:
        identifier:
          type: string
          description: Unique identifier of the asset
        collection:
          type: string
          description: Unique collection ID
        name:
          type: string
          description: The name of the NFT
        url:
          type: string
          description: The URL of the NFT
        wasProcessed:
          type: boolean
          description: Whether the NFT was processed
        media:
          description: The media of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMedia'
        metadata:
          description: The metadata of the NFT
          allOf:
            - $ref: '#/components/schemas/NftMetadata'
      required:
        - identifier
        - collection
        - name
        - url
        - wasProcessed
    NftActivityDataHydrated:
      type: object
      properties:
        collection:
          type: string
          description: The collection identifier
          example: GOOSEV-edcceb
        identifier:
          type: string
          description: The NFT identifier (missing in globalOfferCreate)
          example: GOOSEV-edcceb-0e08
        price:
          type: number
          description: The price in the specified payment token
          example: 1.5
        paymentToken:
          type: string
          description: The payment token identifier
          example: EGLD
        quantity:
          type: integer
          description: The quantity of NFTs involved in this activity
          example: 1
          minimum: 1
        scId:
          type: integer
          description: The smart contract ID
          example: 3
        usdValue:
          type: number
          description: The USD value at the time of the activity
          example: 150.75
        egldValue:
          type: number
          description: The EGLD value at the time of the activity
          example: 1.5
        auctionType:
          type: string
          description: The auction type (available for listingCreate)
          example: FixedPrice
          enum:
            - None
            - NftBid
            - Nft
            - SftAll
            - SftOnePerPayment
        deadline:
          type: integer
          description: The deadline timestamp (available for offerCreate & auctions)
          example: 1709218759
        originalPayment:
          type: object
          description: Original payment details for ash buy events
          properties:
            paymentToken:
              type: string
              example: ASH-a642d1
            price:
              type: number
              example: 100.5
        originalTokenAmount:
          type: string
          description: Original token amount as string
          example: '1000000000000000000'
        originalTokenAmountShort:
          type: number
          description: Original token amount in human-readable format
          example: 1
        originalTokenEgldValue:
          type: number
          description: Original token value in EGLD
          example: 0.5
        originalTokenUsdValue:
          type: number
          description: Original token value in USD
          example: 50
        originalTokenIdentifier:
          type: string
          description: Original token identifier
          example: ASH-a642d1
        nftInfo:
          description: Detailed NFT information
          allOf:
            - $ref: '#/components/schemas/ShortNftDoc'
        collectionInfo:
          description: Detailed collection information
          allOf:
            - $ref: '#/components/schemas/ShortCollectionDoc'
      required:
        - collection
        - price
        - paymentToken
        - quantity
        - scId
        - usdValue
        - egldValue
        - nftInfo
        - collectionInfo
    NftActivityDocHydrated:
      type: object
      properties:
        timestamp:
          type: number
          example: 1640995200
          description: Unix timestamp when the activity occurred
        txHash:
          type: string
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
          description: Transaction hash on the blockchain
        eventIdentifier:
          type: string
          example: trade
          description: Event identifier from the blockchain
        eventOrder:
          type: number
          example: 1
          description: Order of the event within the transaction
        chain:
          type: string
          example: MVX
          enum:
            - MVX
            - SUI
          description: Blockchain network where the activity occurred
        source:
          type: string
          example: xoxno
          enum:
            - mvxBuiltIn
            - xoxno
            - frameit
            - deadrare
            - krogan
            - xoxnoLaunchpad
            - xoxnoStaking
            - xoxnoP2P
            - xoxnoLs
            - xoxnoEgldLs
            - xoxnoLending
            - boberBattle
            - boberWheel
          description: Source platform or marketplace of the activity
        activityType:
          type: string
          example: trade
          enum:
            - nftCreate
            - nftBurn
            - nftUpdate
            - nftTransfer
            - listingCreate
            - listingWithdraw
            - listingUpdate
            - auctionBid
            - auctionOutBid
            - offerCreate
            - offerWithdraw
            - offerReject
            - globalOfferCreate
            - globalOfferWithdraw
            - trade
            - bulkTrade
            - auctionTrade
            - otherTrade
            - offerTrade
            - globalOfferTrade
            - stake
            - unStake
            - createGame
            - joinGame
            - cancelGame
            - endGame
            - spin
            - joinWheel
          description: Type of NFT activity performed
        id:
          type: string
          example: abc123-def456-ghi789
          description: Unique identifier for the activity document
        pk:
          type: string
          example: COLLECTION-1234
          description: Partition key for the document (collection identifier)
        _ts:
          type: number
          example: 1640995200
          description: Cosmos DB timestamp for document versioning
        from:
          $ref: '#/components/schemas/OwnerDto'
        to:
          $ref: '#/components/schemas/OwnerDto'
        activityData:
          $ref: '#/components/schemas/NftActivityDataHydrated'
      required:
        - timestamp
        - txHash
        - eventIdentifier
        - chain
        - source
        - activityType
        - id
        - pk
        - _ts
        - from
        - to
        - activityData
    NftActivityPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/NftActivityDocHydrated'
      required:
        - hasMoreResults
        - resources
    VolumeGraph:
      type: object
      properties:
        marketplace:
          type: string
          description: Marketplace identifier
          example: xoxno
        timestamp:
          description: Array of timestamps for the data points
          example:
            - '2024-01-01T00:00:00Z'
            - '2024-01-02T00:00:00Z'
          items:
            type: array
          type: array
        totalEgldVolume:
          description: Array of total EGLD volume values corresponding to timestamps
          example:
            - 100.5
            - 125.75
            - 150
          items:
            type: array
          type: array
        totalUsdVolume:
          description: Array of total USD volume values corresponding to timestamps
          example:
            - 5025
            - 6287.5
            - 7500
          items:
            type: array
          type: array
        totalTrades:
          description: Array of total trades count corresponding to timestamps
          example:
            - 50
            - 65
            - 80
          items:
            type: array
          type: array
        floorPrice:
          description: Array of floor prices corresponding to timestamps
          example:
            - 1.5
            - 1.75
            - 2
          items:
            type: array
          type: array
        athPrice:
          description: Array of all-time high prices corresponding to timestamps
          example:
            - 50
            - 55
            - 60
          items:
            type: array
          type: array
        avgPrice:
          description: Array of average prices corresponding to timestamps
          example:
            - 10.5
            - 12
            - 15.5
          items:
            type: array
          type: array
      required:
        - marketplace
        - timestamp
        - totalEgldVolume
        - totalUsdVolume
        - totalTrades
        - floorPrice
        - athPrice
        - avgPrice
    AnalyticsVolumeDto:
      type: object
      properties:
        marketplace:
          type: string
          example: xoxno
        timestamp:
          example:
            - '2024-07-04T00:00:00.0000000Z'
            - '2024-07-05T00:00:00.0000000Z'
          type: array
          items:
            type: string
        totalEgldVolume:
          example:
            - 169.92
            - 189.7
          type: array
          items:
            type: string
        totalUsdVolume:
          example:
            - 5166.86
            - 5849.23
          type: array
          items:
            type: string
        totalTrades:
          example:
            - 254
            - 290
          type: array
          items:
            type: string
        floorPrice:
          example: []
          type: array
          items:
            type: string
        athPrice:
          example: []
          type: array
          items:
            type: string
        avgPrice:
          example: []
          type: array
          items:
            type: string
      required:
        - marketplace
        - timestamp
        - totalEgldVolume
        - totalUsdVolume
        - totalTrades
        - floorPrice
        - athPrice
        - avgPrice
    TransactionDetailsDto:
      type: object
      properties:
        price:
          type: number
          example: 0
        txHash:
          type: string
          example: 7bb66ddd5682070b42c6d4a77acc2920ad21680ad73a75a2a531dfed888c6bed
        timestamp:
          type: number
          example: 1642719714
        identifier:
          type: string
          example: BANANA-e955fd-05a0
      required:
        - price
        - txHash
        - timestamp
        - identifier
    AveragePriceDto:
      type: object
      properties:
        price:
          type: number
          example: 0.225
      required:
        - price
    AnalyticsDto:
      type: object
      properties:
        count:
          type: number
          example: 141
        volume:
          type: number
          example: 31.758
        min:
          $ref: '#/components/schemas/TransactionDetailsDto'
        max:
          $ref: '#/components/schemas/TransactionDetailsDto'
        avg:
          $ref: '#/components/schemas/AveragePriceDto'
      required:
        - count
        - volume
        - min
        - max
        - avg
    UserAnalyticsDto:
      type: object
      properties:
        Purchase:
          $ref: '#/components/schemas/AnalyticsDto'
        Sale:
          $ref: '#/components/schemas/AnalyticsDto'
      required:
        - Purchase
        - Sale
    AllTimeHighDto:
      type: object
      properties:
        price:
          type: number
          example: 351
        timestamp:
          type: number
          example: 1709218759
        txHash:
          type: string
          example: 55300c108960258387a09831c5786d6a26b9bda7d19c0f685d5672a33bd30e11
        identifier:
          type: string
          example: GOOSEV-edcceb-0e08
      required:
        - price
        - timestamp
        - txHash
        - identifier
    TradingStatsDto:
      type: object
      properties:
        totalVolume:
          type: number
          example: 816457.97
        totalTrades:
          type: number
          example: 776804
        averagePrice:
          type: number
          example: 1.05
        allTimeHigh:
          $ref: '#/components/schemas/AllTimeHighDto'
        day:
          type: object
          example:
            volume: 1.66
            volumeMargin: -42
            trades: 5
            tradesMargin: -50
            minPrice: 0.06
            maxPrice: 1.21
            averagePrice: 0.33
        week:
          type: object
          example:
            volume: 1237.69
            volumeMargin: -79
            trades: 2055
            tradesMargin: -87
            minPrice: 0
            maxPrice: 36.87
            averagePrice: 0.6
        month:
          type: object
          example:
            volume: 13669.09
            volumeMargin: 105
            trades: 38233
            tradesMargin: 247
            minPrice: 0
            maxPrice: 157.3
            averagePrice: 0.36
        quarter:
          type: object
          example:
            volume: 28336.25
            volumeMargin: -8
            trades: 63924
            tradesMargin: 47
            minPrice: 0
            maxPrice: 210
            averagePrice: 0.44
        halfYear:
          type: object
          example:
            volume: 59151.49
            volumeMargin: -45
            trades: 107545
            tradesMargin: -26
            minPrice: 0
            maxPrice: 210
            averagePrice: 0.55
        year:
          type: object
          example:
            volume: 170661.95
            volumeMargin: -56
            trades: 259397
            tradesMargin: -27
            minPrice: 0
            maxPrice: 351
            averagePrice: 0.66
      required:
        - totalVolume
        - totalTrades
        - averagePrice
        - allTimeHigh
        - day
        - week
        - month
        - quarter
        - halfYear
        - year
    GlobalAnalyticsOverviewResponseDto:
      type: object
      properties:
        userCount:
          type: number
          example: 138418
        listingsCount:
          type: number
          example: 185538
        tradingStats:
          $ref: '#/components/schemas/TradingStatsDto'
      required:
        - userCount
        - listingsCount
        - tradingStats
    UserStatsOrderByColumn:
      type: string
      enum:
        - totalVolume
    PriceDataDto:
      type: object
      properties:
        price:
          type: number
          description: Price of the NFT
        timestamp:
          type: number
          description: Timestamp of the transaction
        identifier:
          type: string
          description: NFT identifier
        txHash:
          type: string
          description: Transaction hash
        usdValue:
          type: number
          description: USD value of the transaction
        nftInfo:
          description: NFT information
          allOf:
            - $ref: '#/components/schemas/ShortNftDoc'
      required:
        - price
        - timestamp
        - identifier
        - txHash
        - usdValue
    UserStatsDto:
      type: object
      properties:
        wallet:
          description: User wallet information
          allOf:
            - $ref: '#/components/schemas/WalletDto'
        totalVolume:
          type: number
          description: Total trading volume
        totalTrades:
          type: number
          description: Total number of trades
        totalCollections:
          type: number
          description: Total number of collections
        totalNfts:
          type: number
          description: Total number of NFTs
        totalPartners:
          type: number
          description: Total number of partners
        buyerVolume:
          type: number
          description: Buyer volume
        buyerTrades:
          type: number
          description: Buyer trades
        buyerNfts:
          type: number
          description: Buyer NFTs
        buyerCollections:
          type: number
          description: Buyer collections
        buyerPartners:
          type: number
          description: Buyer partners
        buyerMaxPriceData:
          description: Buyer maximum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        buyerMinPriceData:
          description: Buyer minimum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        sellerVolume:
          type: number
          description: Seller volume
        sellerTrades:
          type: number
          description: Seller trades
        sellerNfts:
          type: number
          description: Seller NFTs
        sellerCollections:
          type: number
          description: Seller collections
        sellerPartners:
          type: number
          description: Seller partners
        sellerMaxPriceData:
          description: Seller maximum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        sellerMinPriceData:
          description: Seller minimum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
      required:
        - wallet
        - totalVolume
        - totalTrades
        - totalCollections
        - totalNfts
        - totalPartners
        - buyerVolume
        - buyerTrades
        - buyerNfts
        - buyerCollections
        - buyerPartners
        - buyerMaxPriceData
        - buyerMinPriceData
        - sellerVolume
        - sellerTrades
        - sellerNfts
        - sellerCollections
        - sellerPartners
        - sellerMaxPriceData
        - sellerMinPriceData
    AirdropDtoHydrated:
      type: object
      properties:
        tokenAllocation:
          type: number
          description: Number of tokens allocated to this recipient
          example: 1000
        totalScore:
          type: number
          description: Total score calculated for airdrop eligibility
          example: 850.5
        rank:
          type: number
          description: Rank position in the airdrop distribution
          example: 42
          minimum: 1
        wallet:
          type: object
          description: Wallet object containing address and shard information
        signature:
          type: object
          description: Signature data for claiming the airdrop
          example:
            signature: 0x...
            data: 0x...
        isClaimed:
          type: boolean
          description: Whether the airdrop has been claimed
          example: false
        amount:
          type: string
          description: Exact amount to be claimed in smallest denomination
          example: '1000000000000000000'
      required:
        - tokenAllocation
        - totalScore
        - rank
        - wallet
    LoginRequestDto:
      type: object
      properties:
        address:
          type: string
          description: The address of the user
        loginToken:
          type: string
          description: The login token
        signature:
          type: string
          description: The signature of the login token
        data:
          type: object
          description: Additional data as key-value pairs
        service:
          type: string
          description: The service to authenticate with
          enum:
            - boberBattle
            - xoxno
          example: xoxno
          default: xoxno
      required:
        - loginToken
    LoginAccessDto:
      type: object
      properties:
        access_token:
          type: string
          description: Access token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires:
          type: number
          description: Expiration time of the token in seconds
          example: 3600
      required:
        - access_token
        - expires
    TransactionType:
      type: string
      enum:
        - Transaction
        - SmartContractResult
      description: The type of the transaction
    TransactionLog:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier of the transaction log
          example: log-123456
        address:
          type: string
          description: The smart contract address that generated the log
          example: erd1qqqqqqqqqqqqqpgqrc4pg2xarca9z34njcxeur622qmfjp8w2jps89fxnl
        events:
          description: The array of events emitted in this log
          items:
            type: array
          type: array
        timestamp:
          type: integer
          description: The Unix timestamp when the log was created
          example: 1672531200
        txHash:
          type: string
          description: The transaction hash associated with this log
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
      required:
        - address
        - events
        - timestamp
        - txHash
    TransactionDetailed:
      type: object
      properties:
        txHash:
          type: string
          description: The unique hash identifier of the transaction
          example: '0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef'
        gasLimit:
          type: integer
          description: The maximum amount of gas units allocated for the transaction
          example: 50000
        gasPrice:
          type: integer
          description: The price per gas unit for the transaction
          example: 1000000000
        gasUsed:
          type: integer
          description: The actual amount of gas units consumed by the transaction
          example: 25000
        miniBlockHash:
          type: string
          description: The hash of the miniblock containing this transaction
          example: '0xabcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890'
        nonce:
          type: integer
          description: The sequence number of the transaction for the sender
          example: 42
        receiver:
          type: string
          description: The address of the transaction receiver
          example: erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th
        receiverShard:
          type: integer
          description: The shard ID of the receiver address
          example: 1
        round:
          type: integer
          description: The blockchain round when the transaction was processed
          example: 1234567
        sender:
          type: string
          description: The address of the transaction sender
          example: erd1qyu5wthldzr8wx5c9ucg8kjagg0jfs53s8nr3zpz3hypefsdd8ssycr6th
        senderShard:
          type: integer
          description: The shard ID of the sender address
          example: 0
        signature:
          type: string
          description: The cryptographic signature of the transaction
          example: >-
            0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
        status:
          type: string
          description: >-
            The current status of the transaction (e.g., success, pending,
            invalid)
          example: success
        value:
          type: string
          description: The amount of EGLD tokens transferred in the transaction
          example: '1000000000000000000'
        fee:
          type: string
          description: The transaction fee paid by the sender
          example: '50000000000000'
        timestamp:
          type: integer
          description: The Unix timestamp when the transaction was processed
          example: 1672531200
        data:
          type: string
          description: The data field of the transaction, encoded in base64
          example: RVNEVFRyYW5zZmVyQDQ0NDU1ODJkMzQzODM0MzYzNjJkMzAzMUAwMWY0
        function:
          type: string
          description: The smart contract function name called in the transaction
          example: ESDTTransfer
        action:
          type: object
          description: The decoded action of the transaction
          example:
            category: scCall
            name: transfer
        scamInfo:
          type: object
          description: Information about potential scam indicators for this transaction
          example:
            type: none
            info: N/A
        type:
          description: The type of the transaction
          allOf:
            - $ref: '#/components/schemas/TransactionType'
        originalTxHash:
          type: string
          description: The hash of the original transaction (for smart contract results)
          example: '0x9876543210fedcba9876543210fedcba9876543210fedcba9876543210fedcba'
        pendingResults:
          type: boolean
          description: Indicates if the transaction has pending smart contract results
          example: false
        results:
          description: Array of smart contract results generated by this transaction
          items:
            type: array
          type: array
        price:
          type: number
          description: The price of the transaction in USD or other currency
          example: 0.0025
        logs:
          description: The transaction log containing emitted events
          allOf:
            - $ref: '#/components/schemas/TransactionLog'
        operations:
          description: Array of decoded operations performed in this transaction
          items:
            type: array
          type: array
      required:
        - txHash
        - receiver
        - receiverShard
        - sender
        - senderShard
        - status
        - value
        - timestamp
        - results
        - operations
    TransactionStatus:
      type: string
      enum:
        - success
        - pending
        - invalid
        - fail
        - notFound
      description: The status of the transaction
    TransactionProcessStatus:
      type: object
      properties:
        reason:
          type: object
          description: The error reason
        status:
          description: The status of the transaction
          allOf:
            - $ref: '#/components/schemas/TransactionStatus'
      required:
        - reason
        - status
    TransactionCreate:
      type: object
      properties:
        chainID:
          type: string
          description: The chain ID
        data:
          type: object
          description: The transaction data
        gasLimit:
          type: number
          description: The gas limit for the transaction
        gasPrice:
          type: number
          description: The gas price for the transaction
        nonce:
          type: number
          description: The nonce for the transaction
        receiver:
          type: string
          description: The receiver address
        receiverUsername:
          type: string
          description: The receiver username
        sender:
          type: string
          description: The sender address
        senderUsername:
          type: string
          description: The sender username
        signature:
          type: string
          description: The signature of the transaction
        value:
          type: string
          description: The value of the transaction
        version:
          type: number
          description: The version of the transaction
        options:
          type: number
          description: Optional transaction options
        guardian:
          type: string
          description: Optional guardian address
        guardianSignature:
          type: string
          description: Optional guardian signature
      required:
        - chainID
        - gasLimit
        - gasPrice
        - nonce
        - receiver
        - sender
        - signature
        - value
        - version
    TransactionCostData:
      type: object
      properties:
        txGasUnits:
          type: number
      required:
        - txGasUnits
    TransactionSendResult:
      type: object
      properties:
        receiver:
          type: string
          description: The receiver address
        receiverShard:
          type: integer
          description: The shard of the receiver
        sender:
          type: string
          description: The sender address
        senderShard:
          type: integer
          description: The shard of the sender
        status:
          description: The status of the transaction
          allOf:
            - $ref: '#/components/schemas/TransactionStatus'
        txHash:
          type: string
          description: The transaction hash
      required:
        - receiver
        - receiverShard
        - sender
        - senderShard
        - status
        - txHash
    ChatMessageReplyDto:
      type: object
      properties:
        sender:
          type: string
          description: Message sender
        content:
          description: Message value
          allOf:
            - $ref: '#/components/schemas/ChatMessageReplyDto'
        timestamp:
          type: integer
          description: Message timestamp
        id:
          type: string
          description: Message id
      required:
        - sender
        - content
        - timestamp
        - id
    ChatMessageContentDto:
      type: object
      properties:
        type:
          type: string
          description: Message type
        value:
          type: string
          description: Message value
        replyTo:
          description: Message reply to user
          allOf:
            - $ref: '#/components/schemas/ChatMessageReplyDto'
      required:
        - type
        - value
    SendChatMessageDto:
      type: object
      properties:
        sender:
          type: string
        content:
          $ref: '#/components/schemas/ChatMessageContentDto'
        receiver:
          type: string
      required:
        - sender
        - content
        - receiver
    MessageDto:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/ChatMessageContentDto'
        isRead:
          type: boolean
          example: true
        timestamp:
          type: number
          example: 1720468991
        sender:
          type: string
        isDeletedFor:
          type: array
          items:
            type: string
      required:
        - content
        - isRead
        - timestamp
        - sender
        - isDeletedFor
    ChatMessageDocHydrated:
      type: object
      properties:
        dataType:
          type: object
        chatId:
          type: string
        isGroupChat:
          type: boolean
        message:
          $ref: '#/components/schemas/MessageDto'
        pk:
          type: string
        id:
          type: string
        ttl:
          type: number
        _ts:
          type: number
        sender:
          $ref: '#/components/schemas/OwnerDto'
        receiver:
          $ref: '#/components/schemas/OwnerDto'
      required:
        - dataType
        - chatId
        - isGroupChat
        - message
        - pk
        - id
        - ttl
        - _ts
        - sender
        - receiver
    UserConversationDocHydrated:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for conversation
          enum:
            - message
            - conversation
            - blockedUser
            - groupChatProfile
            - read
          example: conversation
          default: conversation
        chatName:
          type: object
          description: Name of the chat conversation
          example: John Doe
        isGroupChat:
          type: boolean
          description: Whether this is a group chat
          example: false
        chatId:
          type: string
          description: Unique identifier for the chat
          example: chat-123456
        message:
          description: Last message in the conversation
          allOf:
            - $ref: '#/components/schemas/MessageDto'
        deleteTimestamp:
          type: object
          description: Timestamp when the conversation was deleted
          example: 1640995200
        unreadCount:
          type: object
          description: Number of unread messages
          example: 5
        id:
          type: string
          description: Document ID in Cosmos DB
          example: chat-123456
        pk:
          type: string
          description: Partition key for Cosmos DB
          example: erd1...
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
        sender:
          description: User that holds the conversation
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        receiver:
          description: Correspondent user
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
      required:
        - dataType
        - isGroupChat
        - chatId
        - message
        - id
        - pk
        - _ts
        - sender
        - receiver
    UserConversationPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/UserConversationDocHydrated'
      required:
        - hasMoreResults
        - resources
    ChatMessagePaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageDocHydrated'
        receiver:
          $ref: '#/components/schemas/OwnerDto'
      required:
        - hasMoreResults
        - resources
        - receiver
    UnreadMessageCountByChatIdDto:
      type: object
      properties:
        unreadCount:
          type: number
          example: 1
        chatId:
          type: string
          example: 49vtvdnn9w2stmwm7lpz78f83grt9qm6pn57
      required:
        - unreadCount
        - chatId
    GlobalConversationSummaryDto:
      type: object
      properties:
        totalUnreadChats:
          type: number
          example: 1
        totalUnreadMessages:
          type: number
          example: 1
        unreadMessageCountByChatId:
          type: array
          items:
            $ref: '#/components/schemas/UnreadMessageCountByChatIdDto'
      required:
        - totalUnreadChats
        - totalUnreadMessages
        - unreadMessageCountByChatId
    UserBlockDocHydrated:
      type: object
      properties:
        dataType:
          type: string
          description: Data type identifier for blocked user
          enum:
            - message
            - conversation
            - blockedUser
            - groupChatProfile
            - read
          example: blockedUser
          default: blockedUser
        timestamp:
          type: object
          description: Unix timestamp when the user was blocked
          example: 1640995200
        id:
          type: string
          description: ID representing the blocked user
          example: erd1...
        pk:
          type: string
          description: Partition key representing who blocked the user
          example: erd1...
        _ts:
          type: number
          description: Cosmos DB timestamp
          example: 1640995200
        sender:
          description: Blocked user information
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        receiver:
          description: User who blocked
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
      required:
        - dataType
        - timestamp
        - id
        - pk
        - _ts
        - sender
        - receiver
    UserBlockPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/UserBlockDocHydrated'
      required:
        - hasMoreResults
        - resources
    WebSocketTokenDto:
      type: object
      properties:
        token:
          type: string
          description: WebSocket connection token
      required:
        - token
    UserInfo:
      type: object
      properties:
        collateral:
          type: string
        collateralShort:
          type: number
        collateralUsd:
          type: number
        borrow:
          type: string
        borrowShort:
          type: number
        borrowUsd:
          type: number
        health:
          type: string
        healthPercentage:
          type: number
        markets:
          type: array
          items:
            type: string
      required:
        - collateral
        - collateralShort
        - collateralUsd
        - borrow
        - borrowShort
        - borrowUsd
        - health
        - healthPercentage
        - markets
    RegistrationDetailsCreateDto:
      type: object
      properties:
        visibility:
          allOf:
            - $ref: '#/components/schemas/Visibility'
        maxLimit:
          type: integer
          description: Maximum registrations allowed
        userLimit:
          type: integer
          description: Maximum registrations per user
        requireKYC:
          type: boolean
        requireName:
          type: boolean
        requireEmail:
          type: boolean
        requirePhoneNumber:
          type: boolean
        isPublished:
          type: boolean
        hasSideEvents:
          type: boolean
        hasWaitlist:
          type: boolean
        showGuestCount:
          type: boolean
        refundable:
          type: boolean
        nameWithNumber:
          type: boolean
        botProtection:
          type: boolean
      required:
        - visibility
        - maxLimit
        - userLimit
        - requireKYC
        - requireName
        - requireEmail
        - requirePhoneNumber
        - isPublished
        - hasSideEvents
        - hasWaitlist
        - showGuestCount
        - refundable
        - nameWithNumber
        - botProtection
    EventProfileCreateDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the event.
        startTime:
          type: integer
          description: Start time of the event as a Unix timestamp in seconds.
        endTime:
          type: integer
          description: End time of the event as a Unix timestamp in seconds.
        location:
          description: >-
            Location details including geo points, address, and optional
            instructions.
          allOf:
            - $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
          description: Define if the event happens in real life or virtual on Zoom/Meet
        slug:
          type: string
          description: Unique slug for the event URL.
        category:
          description: Category of the event.
          allOf:
            - $ref: '#/components/schemas/EventCategory'
        subCategory:
          description: Subcategory of the event.
          allOf:
            - $ref: '#/components/schemas/EventSubCategory'
        seo:
          example: {}
          description: >-
            SEO-related information such as short description, tags, and
            alternative title.
          allOf:
            - $ref: '#/components/schemas/EventSeoDto'
        registration:
          description: Registration details for the event
          allOf:
            - $ref: '#/components/schemas/RegistrationDetailsCreateDto'
      required:
        - title
        - startTime
        - endTime
        - location
        - isVirtualEvent
        - category
        - registration
    EventProfileFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
        area:
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        category:
          type: array
          items:
            type: string
        subCategory:
          type: array
          items:
            type: string
    EventExtraProperties:
      type: object
      properties:
        creatorProfile:
          type: boolean
        guestSummary:
          type: boolean
        startsFrom:
          type: boolean
    EventProfileFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/EventProfileFilterCriteriaDto'
        extraProperties:
          default: false
          allOf:
            - $ref: '#/components/schemas/EventExtraProperties'
      required:
        - filters
    EventProfileQuery:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventProfile'
      required:
        - hasMoreResults
        - resources
    EventProfileEditDto:
      type: object
      properties:
        title:
          type: string
          description: Title of the event.
        startTime:
          type: integer
          description: Start time of the event as a Unix timestamp in seconds.
        endTime:
          type: integer
          description: End time of the event as a Unix timestamp in seconds.
        location:
          description: >-
            Location details including geo points, address, and optional
            instructions.
          allOf:
            - $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
          description: Define if the event happens in real life or virtual on Zoom/Meet
        slug:
          type: string
          description: Unique slug for the event URL.
        category:
          description: Category of the event.
          allOf:
            - $ref: '#/components/schemas/EventCategory'
        subCategory:
          description: Subcategory of the event.
          allOf:
            - $ref: '#/components/schemas/EventSubCategory'
        seo:
          example: {}
          description: >-
            SEO-related information such as short description, tags, and
            alternative title.
          allOf:
            - $ref: '#/components/schemas/EventSeoDto'
        registration:
          description: Registration details for the event
          allOf:
            - $ref: '#/components/schemas/RegistrationDetailsCreateDto'
    TicketSelectionDto:
      type: object
      properties:
        ticketProfileId:
          type: string
          description: ID of the selected ticket profile
        ticketStageId:
          type: string
          description: ID of the selected ticket stage
        quantity:
          type: integer
          description: Quantity of tickets selected for this stage
          minimum: 1
        price:
          type: number
          description: Price of the ticket
        name:
          type: string
          description: Name of the ticket
        description:
          type: string
          description: Description of the ticket
        currency:
          type: string
          description: Currency of the ticket
      required:
        - ticketProfileId
        - ticketStageId
        - quantity
    EventQuestionAnswerDto:
      type: object
      properties:
        questionId:
          type: string
          description: The ID of the question that was answered.
        answer:
          type: object
          description: The actual answer provided by the guest.
      required:
        - questionId
        - answer
    CallbackUrl:
      type: object
      properties:
        success:
          type: string
        error:
          type: string
        successClose:
          type: string
        errorClose:
          type: string
      required:
        - success
        - error
        - successClose
        - errorClose
    EventGuestRegistrationDto:
      type: object
      properties:
        email:
          type: string
          description: Email address of the guest
          example: john@example.com
        name:
          type: string
          description: Name of the guest
          example: John Doe
        phone:
          type: string
          description: Phone number of the guest
          example: '+1234567890'
        ticketSelections:
          description: Selected tickets
          type: array
          items:
            $ref: '#/components/schemas/TicketSelectionDto'
        voucherCode:
          type: string
          description: Voucher code
        referralCode:
          type: string
          description: Referral code
        payWithCrypto:
          type: boolean
          description: Indicates if the user wants to pay with cryptocurrency
          default: false
        currency:
          type: string
          description: Currency for payment (fiat or crypto token)
          example: EUR
        questionAnswers:
          description: Answers to custom questions
          type: array
          items:
            $ref: '#/components/schemas/EventQuestionAnswerDto'
        callbackUrl:
          description: Callback URL
          allOf:
            - $ref: '#/components/schemas/CallbackUrl'
    TwispayPaymentFormData:
      type: object
      properties:
        base64JsonRequest:
          type: string
        base64Checksum:
          type: object
      required:
        - base64JsonRequest
        - base64Checksum
    StripePaymentFormData:
      type: object
      properties:
        sessionId:
          type: string
        publicKey:
          type: string
      required:
        - sessionId
        - publicKey
    PaymentProvider:
      type: string
      enum:
        - Twispay
        - Binance
        - Stripe
        - Crypto
    FiatPaymentForm:
      type: object
      properties:
        type:
          allOf:
            - $ref: '#/components/schemas/PaymentProvider'
        data:
          oneOf:
            - $ref: '#/components/schemas/TwispayPaymentFormData'
            - $ref: '#/components/schemas/StripePaymentFormData'
      required:
        - type
        - data
    CryptoPaymentResult:
      type: object
      properties:
        signature:
          type: string
        data:
          type: string
      required:
        - signature
        - data
    EventRegistrationResponseDto:
      type: object
      properties:
        guestDoc:
          $ref: '#/components/schemas/EventGuestProfile'
        fiatPaymentForm:
          $ref: '#/components/schemas/FiatPaymentForm'
        cryptoPayment:
          $ref: '#/components/schemas/CryptoPaymentResult'
      required:
        - guestDoc
    EventTicketProfileCreateDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        royalties:
          type: number
          description: >-
            Royalties set for the mint of this specific NFT ticket type,
            expressed as a percentage.
          example: 5
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        maxLimit:
          type: integer
          description: >-
            Optional maximum number of tickets that can be minted for this
            ticket type.
          example: 1000
        userLimit:
          type: integer
          description: Limit on the number of tickets a single user can buy for this type.
      required:
        - userLimit
    EventTicketProfileDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: ID of the event this ticket type is associated with.
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        profile:
          type: string
          description: >-
            URL of the image that will be used as the NFT representing this
            ticket type.
        royalties:
          type: number
          description: >-
            Royalties set for the mint of this specific NFT ticket type,
            expressed as a percentage.
          example: 5
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        characteristics:
          type: object
          description: Other characteristics specific to this ticket type.
        maxLimit:
          type: integer
          description: >-
            Optional maximum number of tickets that can be minted for this
            ticket type.
          example: 1000
        userLimit:
          type: integer
          description: Limit on the number of tickets a single user can buy for this type.
        soldCount:
          type: integer
          description: The current count of sold tickets
          example: 1000
        createdAt:
          type: integer
          description: Timestamp when the ticket type was created.
          example: 1759714023
        id:
          type: string
          description: Unique identifier for this ticket type.
          example: bb7ebbc7-249b-4281-8073-ffd78a8204bd
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
      required:
        - dataType
        - eventId
        - userLimit
        - soldCount
        - createdAt
        - id
    EventTicketProfileEditDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        royalties:
          type: number
          description: >-
            Royalties set for the mint of this specific NFT ticket type,
            expressed as a percentage.
          example: 5
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        maxLimit:
          type: integer
          description: >-
            Optional maximum number of tickets that can be minted for this
            ticket type.
          example: 1000
        userLimit:
          type: integer
          description: Limit on the number of tickets a single user can buy for this type.
    EventStageProfileCreateDto:
      type: object
      properties:
        ticketId:
          type: string
          description: >-
            ID of the ticket type this stage is associated with (reference to
            TicketTypeDoc).
        name:
          type: string
          description: Name of the stage (e.g., Early Bird, Regular).
        startTime:
          type: integer
          description: Timestamp when this stage starts.
          example: 1759714023
        endTime:
          type: integer
          description: Timestamp when this stage ends.
          example: 1759714023
        maxLimit:
          type: integer
          description: >-
            Limit on the total number of tickets that can be sold during this
            stage.
        userLimit:
          type: integer
          description: >-
            Limit on the number of tickets a single user can buy during this
            stage.
        isEnabled:
          type: boolean
          description: Indicates whether ticket sales are enabled for this stage.
        isWhitelist:
          type: boolean
          description: If true, only whitelisted users can buy tickets in this stage.
        requiredApproval:
          type: boolean
          description: Require approval for users paying or registration
        prices:
          description: Price of the ticket during this stage, can override base price.
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
      required:
        - ticketId
        - name
        - startTime
        - endTime
        - maxLimit
        - userLimit
        - isEnabled
        - isWhitelist
        - requiredApproval
        - prices
    EventStageProfileDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          default: event-ticket-stage
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: ID of the event this stage is associated with.
        ticketId:
          type: string
          description: >-
            ID of the ticket type this stage is associated with (reference to
            TicketTypeDoc).
        name:
          type: string
          description: Name of the stage (e.g., Early Bird, Regular).
        startTime:
          type: integer
          description: Timestamp when this stage starts.
          example: 1759714023
        endTime:
          type: integer
          description: Timestamp when this stage ends.
          example: 1759714023
        maxLimit:
          type: integer
          description: >-
            Limit on the total number of tickets that can be sold during this
            stage.
        userLimit:
          type: integer
          description: >-
            Limit on the number of tickets a single user can buy during this
            stage.
        isEnabled:
          type: boolean
          description: Indicates whether ticket sales are enabled for this stage.
        isWhitelist:
          type: boolean
          description: If true, only whitelisted users can buy tickets in this stage.
        requiredApproval:
          type: boolean
          description: Require approval for users paying or registration
        prices:
          description: Price of the ticket during this stage, can override base price.
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        soldCount:
          type: integer
          description: Tracks the total number of tickets sold during this stage.
        id:
          type: string
          description: Unique identifier for this stage.
          example: ddaef9a5-d3c2-4ff0-93a7-48f3aec6c6bc
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
      required:
        - dataType
        - eventId
        - ticketId
        - name
        - startTime
        - endTime
        - maxLimit
        - userLimit
        - isEnabled
        - isWhitelist
        - requiredApproval
        - prices
        - soldCount
        - id
    EventStageProfileEditDto:
      type: object
      properties:
        name:
          type: string
          description: Name of the stage (e.g., Early Bird, Regular).
        startTime:
          type: integer
          description: Timestamp when this stage starts.
          example: 1759714023
        endTime:
          type: integer
          description: Timestamp when this stage ends.
          example: 1759714023
        maxLimit:
          type: integer
          description: >-
            Limit on the total number of tickets that can be sold during this
            stage.
        userLimit:
          type: integer
          description: >-
            Limit on the number of tickets a single user can buy during this
            stage.
        isEnabled:
          type: boolean
          description: Indicates whether ticket sales are enabled for this stage.
        isWhitelist:
          type: boolean
          description: If true, only whitelisted users can buy tickets in this stage.
        requiredApproval:
          type: boolean
          description: Require approval for users paying or registration
        prices:
          description: Price of the ticket during this stage, can override base price.
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
    TicketCalculationRequestDto:
      type: object
      properties:
        referralCode:
          type: string
          nullable: true
        discountCode:
          type: string
          nullable: true
        ticketSelections:
          type: array
          items:
            $ref: '#/components/schemas/TicketSelectionDto'
      required:
        - ticketSelections
    StagePrice:
      type: object
      properties:
        stageId:
          type: string
        stageName:
          type: string
        ticketId:
          type: string
        ticketType:
          type: string
        currency:
          type: string
        normalPrice:
          type: number
        discountedPrice:
          type: number
        quantity:
          type: integer
      required:
        - stageId
        - stageName
        - ticketId
        - ticketType
        - currency
        - normalPrice
        - discountedPrice
        - quantity
    TicketPricesResponse:
      type: object
      properties:
        currency:
          type: string
        stagePrices:
          type: array
          items:
            $ref: '#/components/schemas/StagePrice'
        vat:
          type: number
      required:
        - currency
        - stagePrices
    DiscountCodeValidationResponse:
      type: object
      properties:
        isValid:
          type: boolean
        discountType:
          type: string
        discountAmount:
          type: number
        discountMaxAmount:
          type: number
      required:
        - isValid
        - discountType
        - discountAmount
    TicketsType:
      type: object
      properties:
        ticketId:
          type: string
        quantity:
          type: integer
      required:
        - ticketId
        - quantity
    EventInvitationCreateDto:
      type: object
      properties:
        name:
          type: string
          description: The name of the person associated with the ticket invitation.
          example: John Doe
        email:
          type: string
          description: The email associated with the ticket invitation.
          example: example@example.com
        startTime:
          type: integer
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: integer
          description: The expiry timestamp of the invitation.
          example: 1627852800
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/TicketsType'
      required:
        - startTime
        - endTime
        - tickets
    TicketProfileSummary:
      type: object
      properties:
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        profile:
          type: string
          description: >-
            URL of the image that will be used as the NFT representing this
            ticket type.
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        characteristics:
          type: object
          description: Other characteristics specific to this ticket type.
        ticketId:
          type: string
          description: The unique identifier for the ticket type.
          example: 7501c8f0-118b-4216-8e32-98ce26211220
        quantity:
          type: integer
          description: The number of tickets for this type.
          example: 100
    EventInvitationStatus:
      type: string
      enum:
        - pending
        - accepted
        - declined
        - canceled
        - checkedIn
      description: The status of the ticket invitation.
    EventInvitationDoc:
      type: object
      properties:
        dataType:
          description: The type of ticket data.
          default: event-invitation
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: The ID of the event.
          example: event123
        name:
          type: string
          description: The name of the person associated with the ticket invitation.
          example: John Doe
        email:
          type: string
          description: The email associated with the ticket invitation.
          example: example@example.com
        phone:
          type: string
          description: Phone number of the guest
        tickets:
          description: List of ticket types with their IDs and quantities.
          example:
            - ticketId: VIP123
              quantity: 2
          type: array
          items:
            $ref: '#/components/schemas/TicketProfileSummary'
        startTime:
          type: integer
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: integer
          description: The expiry timestamp of the invitation.
          example: 1627852800
        createdAt:
          type: integer
          description: The timestamp when the ticket invitation was created.
          example: 1759714023
        isClaimed:
          type: boolean
          description: Indicates if the ticket has been claimed.
          example: false
        isUsed:
          type: boolean
          description: Indicates if the ticket has been scanned.
          example: false
        status:
          description: The status of the ticket invitation.
          default: pending
          allOf:
            - $ref: '#/components/schemas/EventInvitationStatus'
        claimedAt:
          type: integer
          description: The timestamp when the ticket was claimed.
          example: 0
        claimedBy:
          type: string
          description: The identifier of the person who claimed the ticket.
          example: erd138ddea4xdtlm3mtnayssfcpyx6p0etmnz32s874v8m7y0hy3shsnnr4mz
        txHash:
          type: string
          description: The transaction hash associated with the ticket claim.
          example: f8e8ad01519a43aa7c629155d35f505a17541e3ceb779e7ed728633764354faa
        id:
          type: string
          description: The unique identifier for the ticket invitation.
          example: 5b4a90d1-5b1c-49ea-a2bd-f70fa740ba95
        pk:
          type: string
          description: The partition key for the ticket invitation.
          example: event123
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
      required:
        - dataType
        - eventId
        - tickets
        - startTime
        - endTime
        - createdAt
        - isClaimed
        - isUsed
        - status
        - claimedAt
        - id
    EventInvitationFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
        claimedBy:
          type: array
          items:
            type: string
        eventId:
          type: array
          items:
            type: string
        email:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/EventInvitationStatus'
        isClaimed:
          type: boolean
        isUsed:
          type: boolean
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventInvitationFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/EventInvitationFilterCriteriaDto'
      required:
        - filters
    EventInvitation:
      type: object
      properties:
        dataType:
          description: The type of ticket data.
          default: event-invitation
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: The ID of the event.
          example: event123
        name:
          type: string
          description: The name of the person associated with the ticket invitation.
          example: John Doe
        email:
          type: string
          description: The email associated with the ticket invitation.
          example: example@example.com
        phone:
          type: string
          description: Phone number of the guest
        tickets:
          description: List of ticket types with their IDs and quantities.
          example:
            - ticketId: VIP123
              quantity: 2
          type: array
          items:
            $ref: '#/components/schemas/TicketProfileSummary'
        startTime:
          type: integer
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: integer
          description: The expiry timestamp of the invitation.
          example: 1627852800
        createdAt:
          type: integer
          description: The timestamp when the ticket invitation was created.
          example: 1759714023
        isClaimed:
          type: boolean
          description: Indicates if the ticket has been claimed.
          example: false
        isUsed:
          type: boolean
          description: Indicates if the ticket has been scanned.
          example: false
        status:
          description: The status of the ticket invitation.
          default: pending
          allOf:
            - $ref: '#/components/schemas/EventInvitationStatus'
        claimedAt:
          type: integer
          description: The timestamp when the ticket was claimed.
          example: 0
        claimedBy:
          type: string
          description: The identifier of the person who claimed the ticket.
          example: erd138ddea4xdtlm3mtnayssfcpyx6p0etmnz32s874v8m7y0hy3shsnnr4mz
        txHash:
          type: string
          description: The transaction hash associated with the ticket claim.
          example: f8e8ad01519a43aa7c629155d35f505a17541e3ceb779e7ed728633764354faa
        id:
          type: string
          description: The unique identifier for the ticket invitation.
          example: 5b4a90d1-5b1c-49ea-a2bd-f70fa740ba95
        pk:
          type: string
          description: The partition key for the ticket invitation.
          example: event123
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
        profile:
          type: string
          description: >-
            The profile image of the person associated with the ticket
            invitation.
        herotag:
          type: string
          description: The herotag of the person associated with the ticket invitation.
      required:
        - dataType
        - eventId
        - tickets
        - startTime
        - endTime
        - createdAt
        - isClaimed
        - isUsed
        - status
        - claimedAt
        - id
    EventInvitationQuery:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventInvitation'
      required:
        - hasMoreResults
        - resources
    VoucherType:
      type: string
      enum:
        - fixed
        - percentage
      description: Filter by type of discount (fixed or percentage).
    EventVoucherFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
          description: Search text for voucher code or other attributes.
        code:
          description: Filter by specific voucher codes.
          type: array
          items:
            type: string
        type:
          type: array
          description: Filter by type of discount (fixed or percentage).
          items:
            $ref: '#/components/schemas/VoucherType'
        amount:
          type: number
          description: Filter vouchers by exact discount amount.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: integer
          description: Filter vouchers by maximum allowed uses.
        maxUsesPerUser:
          type: integer
          description: Filter vouchers by maximum uses per user.
        isActive:
          type: boolean
          description: Filter by active status of the voucher.
        ownerId:
          type: string
          description: Filter by owner ID who can use the voucher.
        range:
          description: Filter vouchers within a range of dates.
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventVoucherFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
          description: Include total count of results.
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          description: Criteria to filter event vouchers.
          allOf:
            - $ref: '#/components/schemas/EventVoucherFilterCriteriaDto'
      required:
        - filters
    EventVoucherDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          default: event-voucher
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        id:
          type: string
          description: Unique identifier for the voucher.
        code:
          type: string
          description: Unique voucher code.
        type:
          description: Type of discount provided by the voucher.
          allOf:
            - $ref: '#/components/schemas/VoucherType'
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: integer
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: integer
          description: Maximum uses allowed per user.
        usedCount:
          type: integer
          description: Tracks the number of times the voucher has been used.
        eventId:
          type: string
          description: List of specific event IDs where the voucher can be applied.
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: integer
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: integer
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: integer
          description: Timestamp when the voucher becomes valid.
          example: 1759714023
        endDate:
          type: integer
          description: Timestamp when the voucher expires.
          example: 1759714023
        isActive:
          type: boolean
          description: Indicates whether the voucher is currently active.
          default: true
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
        createdAt:
          type: integer
          description: Timestamp when the voucher was created.
          example: 1759714023
        createdBy:
          type: string
          description: Reference to the admin or system that created the voucher.
        pk:
          type: string
          description: Partition key for Cosmos DB document.
      required:
        - dataType
        - id
        - code
        - type
        - amount
        - maxUses
        - maxUsesPerUser
        - usedCount
        - eventId
        - ticketTypeIds
        - startDate
        - endDate
        - isActive
        - createdAt
        - createdBy
        - pk
    EventVoucherQuery:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventVoucherDoc'
      required:
        - hasMoreResults
        - resources
    EventQuestionAnswerType:
      type: string
      enum:
        - text
        - textarea
        - radio
        - dropdown
        - checkbox
        - time
        - date
      description: Type of answer expected (e.g., text, textarea, radio, checkbox, etc.).
    EventQuestionDoc:
      type: object
      properties:
        dataType:
          description: The type of user data.
          default: event-question
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        id:
          type: string
          description: Automatically generated unique identifier for the question.
        eventId:
          type: string
          description: Reference to the EventDoc.
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          description: >-
            Type of answer expected (e.g., text, textarea, radio, checkbox,
            etc.).
          allOf:
            - $ref: '#/components/schemas/EventQuestionAnswerType'
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
        createdAt:
          type: integer
          description: Timestamp of question creation.
          example: 1759714023
        pk:
          type: string
          description: Partition key for Cosmos DB document.
      required:
        - dataType
        - id
        - eventId
        - title
        - required
        - answerType
        - requireTime
        - createdAt
        - pk
    EventQuestionCreateDto:
      type: object
      properties:
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          description: >-
            Type of answer expected (e.g., text, textarea, radio, checkbox,
            etc.).
          allOf:
            - $ref: '#/components/schemas/EventQuestionAnswerType'
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
      required:
        - title
        - required
        - answerType
        - requireTime
    EventQuestionEditDto:
      type: object
      properties:
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          description: >-
            Type of answer expected (e.g., text, textarea, radio, checkbox,
            etc.).
          allOf:
            - $ref: '#/components/schemas/EventQuestionAnswerType'
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
    EventClaimInvitationDto:
      type: object
      properties:
        email:
          type: string
          description: Email address of the guest
          example: john@example.com
        name:
          type: string
          description: Name of the guest
          example: John Doe
        phone:
          type: string
          description: Phone number of the guest
          example: '+1234567890'
        questionAnswers:
          description: Answers to custom questions
          type: array
          items:
            $ref: '#/components/schemas/EventQuestionAnswerDto'
    EventAcceptInvitation:
      type: object
      properties:
        invitation:
          $ref: '#/components/schemas/EventInvitation'
        guest:
          $ref: '#/components/schemas/EventGuestProfile'
      required:
        - invitation
        - guest
    EventGuestFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
        wallet:
          type: array
          items:
            type: string
        eventId:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            $ref: '#/components/schemas/EventGuestStatus'
        questionnaireFilled:
          type: boolean
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventGuestFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: integer
        skip:
          type: integer
        filters:
          $ref: '#/components/schemas/EventGuestFilterCriteriaDto'
      required:
        - filters
    EventGuestProfileQuery:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventGuestProfile'
      required:
        - hasMoreResults
        - resources
    EventGuestExport:
      type: object
      properties:
        wallet:
          type: string
          description: Guest wallet address.
        email:
          type: string
          description: Guest email address.
        name:
          type: string
          description: Guest first name.
        phone:
          type: string
          description: Guest last name.
        status:
          description: Guest status
          allOf:
            - $ref: '#/components/schemas/EventGuestStatus'
      required:
        - wallet
        - status
    EventUserRoleCreateDto:
      type: object
      properties:
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email address
        role:
          type: array
          description: Role of the user.
          items:
            $ref: '#/components/schemas/EventUserRoles'
        permissions:
          type: array
          description: Permissions of the user.
          items:
            $ref: '#/components/schemas/EventUserRolePermission'
        endTime:
          type: integer
          description: Timestamp for when the user role will expire.
      required:
        - role
        - permissions
    EventUserRole:
      type: object
      properties:
        dataType:
          description: Type of the document.
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        eventId:
          type: string
          description: Unique identifier for the event.
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email address
        role:
          type: array
          description: Role of the user.
          items:
            $ref: '#/components/schemas/EventUserRoles'
        permissions:
          type: array
          description: Permissions of the user.
          items:
            $ref: '#/components/schemas/EventUserRolePermission'
        createdAt:
          type: integer
          description: Timestamp for when the user role was created.
        endTime:
          type: integer
          description: Timestamp for when the user role will expire.
        id:
          type: string
          description: Unique identifier for the document.
        status:
          description: Status of the user role.
          allOf:
            - $ref: '#/components/schemas/RoleStatus'
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        _ts:
          type: integer
          description: Timestamp for document in Cosmos DB.
        profile:
          type: string
          description: User profile picture.
        herotag:
          type: string
          description: User wallet herotag.
      required:
        - dataType
        - role
        - permissions
        - profile
        - herotag
    EventUserRoleEditDto:
      type: object
      properties:
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email address
        role:
          type: array
          description: Role of the user.
          items:
            $ref: '#/components/schemas/EventUserRoles'
        permissions:
          type: array
          description: Permissions of the user.
          items:
            $ref: '#/components/schemas/EventUserRolePermission'
        endTime:
          type: integer
          description: Timestamp for when the user role will expire.
    EventTicketQrType:
      type: string
      enum:
        - badge
        - offline
        - google
        - manual
      description: The type of the QR code.
    BageQRData:
      type: object
      properties:
        type:
          description: The type of the QR code.
          example: badge
          allOf:
            - $ref: '#/components/schemas/EventTicketQrType'
        data:
          type: string
          description: The data of the QR code.
          example: base64
      required:
        - type
        - data
    QRBody:
      type: object
      properties:
        type:
          description: QR Type
          allOf:
            - $ref: '#/components/schemas/EventTicketQrType'
        data:
          type: string
          description: Encrypted QR data
      required:
        - type
        - data
    EventCheckInQR:
      type: object
      properties:
        qr:
          description: User wallet address
          allOf:
            - $ref: '#/components/schemas/QRBody'
        tickets:
          description: Selected Tickets
          type: array
          items:
            $ref: '#/components/schemas/TicketsType'
      required:
        - qr
    EventScanStatus:
      type: string
      enum:
        - error
        - success
        - select
      description: Staus of the scan
    EventScanMessage:
      type: string
      enum:
        - qr-type-invalid
        - qr-valid
        - qr-invalid
        - invitation-not-found
        - invitation-not-valid
        - event-not-found
        - guest-not-found
        - guest-valid
        - qr-code-expired
        - check-in-completed
        - guest-not-active
        - no-tickets-available
        - tickets-no-valid
        - guest-already-in
        - valid-check-in
        - select-tickets
        - tickets-valid
      description: QR Code type
    TicketSelection:
      type: object
      properties:
        identifier:
          type: string
          description: Ticket Profile ID
        ticketId:
          type: string
          description: Ticket Profile ID
        quantity:
          type: integer
          description: Ticket Profile quantity
        ticketProfile:
          description: Ticket Profile
          allOf:
            - $ref: '#/components/schemas/TicketProfileSummary'
      required:
        - identifier
        - ticketId
        - quantity
    TicketValidationResult:
      type: object
      properties:
        status:
          description: Staus of the scan
          allOf:
            - $ref: '#/components/schemas/EventScanStatus'
        type:
          description: QR Code type
          allOf:
            - $ref: '#/components/schemas/EventTicketQrType'
        message:
          description: QR Code type
          allOf:
            - $ref: '#/components/schemas/EventScanMessage'
        guest:
          description: GuestDoc profile extended
          allOf:
            - $ref: '#/components/schemas/EventGuestProfile'
        invitation:
          description: InvitationDoc profile
          allOf:
            - $ref: '#/components/schemas/EventInvitation'
        nfts:
          description: NFTs used for check in, if any
          type: array
          items:
            $ref: '#/components/schemas/NftDocHydrated'
        availableTickets:
          description: Tickets to select from when required for bulk scan
          type: array
          items:
            $ref: '#/components/schemas/TicketSelection'
      required:
        - status
        - type
        - message
    EventVoucherCreateDto:
      type: object
      properties:
        code:
          type: string
          description: Unique voucher code.
        type:
          description: Type of discount provided by the voucher.
          allOf:
            - $ref: '#/components/schemas/VoucherType'
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: integer
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: integer
          description: Maximum uses allowed per user.
        eventId:
          type: string
          description: List of specific event IDs where the voucher can be applied.
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: integer
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: integer
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: integer
          description: Timestamp when the voucher becomes valid.
          example: 1759714023
        endDate:
          type: integer
          description: Timestamp when the voucher expires.
          example: 1759714023
        isActive:
          type: boolean
          description: Indicates whether the voucher is currently active.
          default: true
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
        pk:
          type: string
          description: Partition key for Cosmos DB document.
    EventVoucherEditDto:
      type: object
      properties:
        type:
          description: Type of discount provided by the voucher.
          allOf:
            - $ref: '#/components/schemas/VoucherType'
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: integer
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: integer
          description: Maximum uses allowed per user.
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: integer
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: integer
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: integer
          description: Timestamp when the voucher becomes valid.
          example: 1759714023
        endDate:
          type: integer
          description: Timestamp when the voucher expires.
          example: 1759714023
        isActive:
          type: boolean
          description: Indicates whether the voucher is currently active.
          default: true
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
        pk:
          type: string
          description: Partition key for Cosmos DB document.
    ManualCheckInDto:
      type: object
      properties:
        invitationIdOrAddress:
          type: string
          description: Invitation ID or wallet address for check-in
        selectedTickets:
          description: Selected tickets for check-in (optional)
          type: array
          items:
            $ref: '#/components/schemas/TicketsType'
      required:
        - invitationIdOrAddress
    EventGuestAnswerDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          default: event-question-answer
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        id:
          type: string
          description: Unique identifier for this guest answer.
          example: 2ce45a55-e92e-42b1-9142-e2356d3e587d
        wallet:
          type: string
          description: The address of the guest who provided the answer.
        questionId:
          type: string
          description: The ID of the question that was answered.
        eventId:
          type: string
          description: The event ID this answer is linked to.
        answer:
          type: object
          description: The actual answer provided by the guest.
        createdAt:
          type: integer
          description: Timestamp when the answer was provided.
          example: 1759714023
        ttl:
          type: integer
          description: Time to live in seconds. Only set when status is pending.
      required:
        - dataType
        - id
        - wallet
        - questionId
        - eventId
        - answer
        - createdAt
    AnsweredQuestionWithDetails:
      type: object
      properties:
        answer:
          description: The answer provided by the guest
          allOf:
            - $ref: '#/components/schemas/EventGuestAnswerDoc'
        question:
          description: The question details
          allOf:
            - $ref: '#/components/schemas/EventQuestionDoc'
    EventGuestApproveDto:
      type: object
      properties:
        address:
          type: string
        isApproved:
          type: boolean
      required:
        - isApproved
    EventLocationCities:
      type: object
      properties:
        city:
          type: string
          description: City
          example: New York
        eventCount:
          type: integer
          description: Event count
          example: 100
      required:
        - city
        - eventCount
    EventCountGroupedByCountry:
      type: object
      properties:
        country:
          type: string
          description: Country
          example: United States
        eventCount:
          type: integer
          description: Event count
          example: 100
        cities:
          description: Cities
          example:
            - city: New York
              eventCount: 50
          type: array
          items:
            $ref: '#/components/schemas/EventLocationCities'
      required:
        - country
        - eventCount
        - cities
    ShortVoucherDoc:
      type: object
      properties:
        type:
          description: Type of discount provided by the voucher.
          allOf:
            - $ref: '#/components/schemas/VoucherType'
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
      required:
        - type
        - amount
    EventReferralEnum:
      type: string
      enum:
        - voucher
        - invitation
        - other
      description: Specifies the type of reward given to the referral owner.
    ReferralConditionType:
      type: string
      enum:
        - ticketsSoldCount
        - revenueCount
      description: Condition type representing the activation of the voucher
    RewardDetails:
      type: object
      properties:
        rewardType:
          description: Specifies the type of reward given to the referral owner.
          allOf:
            - $ref: '#/components/schemas/EventReferralEnum'
        conditionType:
          description: Condition type representing the activation of the voucher
          allOf:
            - $ref: '#/components/schemas/ReferralConditionType'
        condition:
          type: number
          description: >-
            Condition (number of successful referrals or revenue threshold)
            required to earn the reward.
        currency:
          type: string
          example: RON
          description: Currency type in case of conditionType = revenueCount
        voucherInfo:
          description: Voucher details that will be issued when the condition is met.
          allOf:
            - $ref: '#/components/schemas/ShortVoucherDoc'
      required:
        - rewardType
        - conditionType
        - condition
    EventReferralConfigCreateDto:
      type: object
      properties:
        appliedVoucher:
          description: >-
            Indicates if a voucher should be automatically applied as a discount
            when this referral code is used.
          allOf:
            - $ref: '#/components/schemas/ShortVoucherDoc'
        rewardDetails:
          description: >-
            Details about the reward issued to the referral owner after a
            certain number of successful referrals or revenue thresholds.
          allOf:
            - $ref: '#/components/schemas/RewardDetails'
        isSelfService:
          type: boolean
          description: >-
            Indicates whether normal guests can generate and share their unique
            referral codes for this event.
        isActive:
          type: boolean
          description: Indicates whether the referral program is currently active.
      required:
        - isSelfService
        - isActive
    EventReferralConfigDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          default: event-referral-config
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        id:
          type: string
          description: Unique identifier for this referral configuration.
          example: e3cd0214-7588-4692-97cb-fbf9858a4e28
        eventId:
          type: string
          description: The event this referral configuration is linked to.
        appliedVoucher:
          description: >-
            Indicates if a voucher should be automatically applied as a discount
            when this referral code is used.
          allOf:
            - $ref: '#/components/schemas/ShortVoucherDoc'
        rewardDetails:
          description: >-
            Details about the reward issued to the referral owner after a
            certain number of successful referrals or revenue thresholds.
          allOf:
            - $ref: '#/components/schemas/RewardDetails'
        isSelfService:
          type: boolean
          description: >-
            Indicates whether normal guests can generate and share their unique
            referral codes for this event.
        isActive:
          type: boolean
          description: Indicates whether the referral program is currently active.
        createdAt:
          type: integer
          description: Timestamp when the referral configuration was created.
          example: 1759714023
        createdBy:
          type: string
          description: The address of the user who created this referral configuration.
        pk:
          type: string
          description: Partition key for Cosmos DB document.
      required:
        - dataType
        - id
        - eventId
        - isSelfService
        - isActive
        - createdAt
        - createdBy
        - pk
    EventReferralConfigEditDto:
      type: object
      properties:
        appliedVoucher:
          description: >-
            Indicates if a voucher should be automatically applied as a discount
            when this referral code is used.
          allOf:
            - $ref: '#/components/schemas/ShortVoucherDoc'
        rewardDetails:
          description: >-
            Details about the reward issued to the referral owner after a
            certain number of successful referrals or revenue thresholds.
          allOf:
            - $ref: '#/components/schemas/RewardDetails'
        isSelfService:
          type: boolean
          description: >-
            Indicates whether normal guests can generate and share their unique
            referral codes for this event.
        isActive:
          type: boolean
          description: Indicates whether the referral program is currently active.
    EventReferralConfigFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
          description: Search text for config or other attributes.
        ownerId:
          type: string
          description: Filter by owner ID of the config.
        isActive:
          type: boolean
          description: Filter by active status of the config.
        isSelfService:
          type: boolean
          description: Filter by self service status of the config.
        createdAt:
          description: Filter referrals within a range of dates.
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventReferralConfigFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
          description: Include total count of results.
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          description: Criteria to filter event referral configs.
          allOf:
            - $ref: '#/components/schemas/EventReferralConfigFilterCriteriaDto'
      required:
        - filters
    EventReferralConfigPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventReferralConfigDoc'
      required:
        - hasMoreResults
        - resources
    EventReferralCreateDto:
      type: object
      properties:
        referralCode:
          type: string
          description: The code shared by the referral owner.
        referralConfigId:
          type: string
          description: The ID of the referral configuration this referral follows.
      required:
        - referralCode
        - referralConfigId
    EventReferralDoc:
      type: object
      properties:
        dataType:
          description: The type of event data.
          default: event-referral-code
          allOf:
            - $ref: '#/components/schemas/TicketingDataType'
        id:
          type: string
          description: Unique identifier for this referral.
          example: 45c67f0f-7ca2-4124-a2f1-e5ba07ea1054
        pk:
          type: string
          description: Partition key for Cosmos DB document.
        referralCode:
          type: string
          description: The code shared by the referral owner.
        ownerId:
          type: string
          description: The user ID of the referral owner.
        eventId:
          type: string
          description: The event this referral applies to.
        referralConfigId:
          type: string
          description: The ID of the referral configuration this referral follows.
        successfulReferrals:
          type: integer
          description: Count of successful paid tickets with referrals.
        createdAt:
          type: integer
          description: Timestamp when the referral was created.
          example: 1759714023
        isActive:
          type: boolean
          description: Indicates whether the referral code is currently active.
      required:
        - dataType
        - id
        - pk
        - referralCode
        - eventId
        - referralConfigId
        - successfulReferrals
        - createdAt
        - isActive
    EventReferralEditDto:
      type: object
      properties:
        isActive:
          type: boolean
          description: Indicates whether the referral code is currently active.
    EventReferralFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
          description: Search text for referral code or other attributes.
        referralCode:
          description: Filter by specific referral codes.
          type: array
          items:
            type: string
        ownerId:
          type: string
          description: Filter by owner ID of the referral.
        referralConfigId:
          type: string
          description: The ID of the referral configuration this referral follows.
        isActive:
          type: boolean
          description: Filter by active status of the referral.
        minSuccessfulReferrals:
          type: integer
          description: Filter referrals by minimum successful referrals count.
        maxSuccessfulReferrals:
          type: integer
          description: Filter referrals by maximum successful referrals count.
        conditionType:
          type: array
          description: Filter referrals by condition type.
          items:
            $ref: '#/components/schemas/ReferralConditionType'
        createdAt:
          description: Filter referrals within a range of dates.
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventReferralFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
        orderBy:
          type: array
          items:
            type: string
        includeCount:
          type: boolean
          default: false
          description: Include total count of results.
        strictSelect:
          type: boolean
        top:
          type: integer
        skip:
          type: integer
        filters:
          description: Criteria to filter event referrals.
          allOf:
            - $ref: '#/components/schemas/EventReferralFilterCriteriaDto'
      required:
        - filters
    EventReferralPaginated:
      type: object
      properties:
        count:
          type: object
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventReferralDoc'
      required:
        - hasMoreResults
        - resources
    NftSaleInfo:
      type: object
      properties:
        auctionId:
          type: number
          description: Unique identifier of the auction
          example: 12345
        seller:
          type: string
          description: Wallet address of the NFT seller
          example: erd1qqqqqqqqqqqqqpgqw0t0ef0jdpeva2v7qy7q7qjjfq6yq0wq0w0qjjfq6yq
        minBid:
          type: string
          description: Minimum bid amount in smallest token units as string
          example: '1000000000000000000'
        maxBid:
          type: string
          description: >-
            Maximum bid amount or Buy Now price in smallest token units as
            string
          example: '5000000000000000000'
        currentBid:
          type: string
          description: Current highest bid amount in smallest token units as string
          example: '2000000000000000000'
        startTime:
          type: integer
          description: Unix timestamp when the auction started
          example: 1640995200
        deadline:
          type: integer
          description: Unix timestamp when the auction ends
          example: 1641081600
        paymentToken:
          type: string
          description: Token identifier used for payment
          example: EGLD
        paymentTokenNonce:
          type: integer
          description: Nonce of the payment token (0 for EGLD)
          example: 0
        auctionType:
          description: Type of auction (e.g., Nft, SftAll, SftOnePerPayment)
          allOf:
            - $ref: '#/components/schemas/XoxnoAuctionTypeString'
        timestamp:
          type: integer
          description: Unix timestamp when the listing was created
          example: 1640995200
        minBidShort:
          type: number
          description: Minimum bid amount as a decimal number
          example: 1.5
        minBidUsdValue:
          type: number
          description: Minimum bid amount in USD
          example: 150.75
        maxBidShort:
          type: number
          description: Maximum bid amount or Buy Now price as a decimal number
          example: 5
        maxBidUsdValue:
          type: number
          description: Maximum bid amount or Buy Now price in USD
          example: 502.5
        currentBidShort:
          type: number
          description: Current highest bid amount as a decimal number
          example: 2.5
        quantity:
          type: number
          description: Number of NFTs being sold (1 for NFTs, can be higher for SFTs)
          example: 1
        marketplace:
          example: xoxno
          allOf:
            - $ref: '#/components/schemas/MarketplacesOnSaleNames'
        royalties:
          type: number
          example: 10
          description: This value is the one set by the owner at listing time
        currentWinner:
          type: string
      required:
        - auctionId
        - seller
        - minBid
        - maxBid
        - startTime
        - deadline
        - paymentToken
        - paymentTokenNonce
        - auctionType
        - timestamp
        - minBidShort
        - maxBidShort
        - quantity
        - marketplace
    EventGuestCheckIn:
      type: object
      properties:
        ticketId:
          type: string
          description: Unique identifier for the ticket type.
          example: 34d8abbc-9484-4c94-a5ba-db741161c57e
        ticketProfile:
          description: Profile of the ticket.
          allOf:
            - $ref: '#/components/schemas/TicketProfileSummary'
        isCheckIn:
          type: boolean
          description: Status of check-in.
          example: true
        freeTicket:
          type: boolean
          description: Indicates whether the ticket is free.
          example: true
          default: false
        receivedAt:
          type: integer
          description: Timestamp for when the ticket was received by the guest.
          example: 1759714023
        invitationId:
          type: string
          description: Invitation ID for the ticket
          example: 44d50fcd-9c87-49b0-8fa5-7c3202c50c5d
        timestamp:
          type: integer
          description: Timestamp of check-in.
          example: 1759714023
        quantity:
          type: integer
          description: Quantity of tickets.
          example: 1
        transactionId:
          type: string
          description: Transaction ID for the ticket.
          example: ec087b88-9810-4547-882d-54b72ec05dba
      required:
        - ticketId
        - isCheckIn
        - freeTicket
        - receivedAt