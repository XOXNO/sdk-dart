openapi: 3.0.0
paths:
  /user/login:
    post:
      operationId: UserDataController_loginUser
      summary: Login and get access token
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequestDto'
      responses:
        '201':
          description: Access token and expiration time
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginAccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/network-account:
    get:
      operationId: UserDataController_retrieveUserMvxAccount
      summary: Get user network info
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User network info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNetworkInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/token-inventory:
    get:
      operationId: UserDataController_retrieveUserTokenBalance
      summary: Get User Token Inventory
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User token inventory response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserTokenInventoryResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/network-account:
    post:
      operationId: UserDataController_retrieveBulkUserMvxAccount
      summary: Get user bulk network info
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        '201':
          description: User bulk network info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNetworkInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/me/profile:
    get:
      operationId: UserDataController_retrieveMyProfile
      summary: Get user private profile response with email
      parameters: []
      responses:
        '200':
          description: User private profile info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/profile:
    get:
      operationId: UserDataController_retrieveUserProfile
      summary: Get User Public Profile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User public profile response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
    patch:
      operationId: UserDataController_editUserProfile
      summary: Edit user profile
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserProfileDto'
      responses:
        '200':
          description: User edit profile patch response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/me:
    get:
      operationId: UserDataController_retrieveUserMyProfile
      summary: Get me user profile
      parameters: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/me/settings:
    get:
      operationId: UserDataController_retrieveMySettings
      summary: Get user settings
      parameters: []
      responses:
        '200':
          description: User settings retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/me/settings/notification-preferences:
    patch:
      operationId: UserDataController_setNotificationPreferences
      summary: Get user notification settings after update
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationPreferencesDto'
      responses:
        '200':
          description: User notification settings saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/me/settings/email:
    patch:
      operationId: UserDataController_updateEmailSettings
      summary: Path user email settings
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetEmailDto'
      responses:
        '200':
          description: User settings updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
    delete:
      operationId: UserDataController_deleteEmailSettings
      summary: Delete user email settings
      parameters: []
      responses:
        '200':
          description: Delete settings successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/me/settings/verify-email:
    post:
      operationId: UserDataController_verifyEmailAddress
      summary: Verify user pending email!
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailDto'
      responses:
        '201':
          description: Email verification flow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSettingsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/upload-picture:
    put:
      operationId: UserDataController_setUserProfilePicture
      summary: Set user profile public picture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: User profile picture upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/upload-banner:
    put:
      operationId: UserDataController_setUserBannerPicture
      summary: Set user public banner image
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: User public banner image upload response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/reset-picture:
    put:
      operationId: UserDataController_resetUserProfilePicture
      summary: Reset to default the public profile picture of a user
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Response of a public profile picture reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/reset-banner:
    put:
      operationId: UserDataController_resetUserBanner
      summary: Reset to default the public banner picture of a user
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Response of a public banner picture reset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{tag}/creator/is-registered:
    get:
      operationId: UserDataController_retrieveUserTagIsCreator
      summary: Is the creator/organisor unique brand tag registered
      parameters:
        - name: tag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Check if a the brand name is registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/creator/profile:
    get:
      operationId: UserDataController_retrieveUserCreatorProfile
      summary: Get creator profile information
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile information fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
    patch:
      operationId: CollectionDataController_editUserCreatorProfile
      summary: Update creator profile information
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditUserCreatorProfileDto'
      responses:
        '200':
          description: Creator profile information updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - User
  /user/{address}/creator/upload-picture:
    put:
      operationId: UserDataController_setUserCreatorProfilePicture
      summary: Update creator profile picture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Creator profile picture updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/creator/upload-banner:
    put:
      operationId: UserDataController_setUserCreatorBannerPicture
      summary: Update creator profile banner
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Creator profile banner updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/creator/reset-picture:
    put:
      operationId: UserDataController_resetUserCreatorProfilePicture
      summary: Reset creator profile picture
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile picture reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/creator/reset-banner:
    put:
      operationId: UserDataController_resetUserCreatorBanner
      summary: Reset creator profile banner
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator profile banner reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/{address}/favorite/collections:
    get:
      operationId: UserDataController_retrieveUserFavoriteCollections
      summary: Get user followed collections tickers
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Explore collections statistics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExploreCollectionsStatisticsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
        - User
  /user/favorite/{favoriteId}:
    get:
      operationId: UserDataController_retrieveUserFavorite
      summary: Check if user has liked an NFT
      parameters:
        - name: favoriteId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Like status checked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckLikeStatusResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
        - User
      security:
        - bearer: []
  /user/{address}/follow:
    post:
      operationId: UserDataController_followUser
      summary: Follow or unfollow a user
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: User follow status updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserFavoriteResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
        - User
      security:
        - bearer: []
  /user/{address}/favorite/users:
    get:
      operationId: UserDataController_retrieveUserFavoriteUsers
      summary: Check user list of followed addresses
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of followed addresses
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
        - User
  /tokens:
    get:
      operationId: TokenDataController_retrieveTokens
      summary: Get tokens
      parameters:
        - name: identifier
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: string
        - name: category
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: string
      responses:
        '200':
          description: List of tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDocDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/swap:
    get:
      operationId: TokenDataController_retrieveTokensForSwap
      summary: Get tokens for swap
      parameters: []
      responses:
        '200':
          description: List of tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenDocDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/usd-price:
    get:
      operationId: TokenDataController_retrieveTokensPrice
      parameters:
        - name: identifier
          required: false
          in: query
          description: Comma separated token identifiers
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/egld/fiat-price:
    get:
      operationId: TokenDataController_retrieveEgldFiatPrice
      parameters:
        - name: value
          required: false
          in: query
          description: Value to convert. Default is 1
          schema:
            type: number
        - name: fiatCurrencies
          required: false
          in: query
          description: Comma separated fiat currencies. Default is EUR
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/xoxno:
    get:
      operationId: TokenDataController_retrieveXoxnoTokenInfo
      summary: Fetch XOXNO metrics
      parameters: []
      responses:
        '200':
          description: XOXNO metrics info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IMetrics'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/xoxno/info:
    get:
      operationId: TokenDataController_getXOXNOSummaryLending
      summary: Fetch XOXNO statistics
      parameters: []
      responses:
        '200':
          description: XOXNO info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/XoxnoInfo'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /tokens/xoxno/liquid:
    get:
      operationId: TokenDataController_retrieveXoxnoLiquidTokenInfo
      parameters: []
      responses:
        '200':
          description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
  /liquid/xoxno/stats:
    get:
      operationId: TokenDataController_getXoxnoLiquidStats
      summary: Fetch XOXNO liquid staking statistics
      parameters: []
      responses:
        '200':
          description: Xoxno Liquid statistics
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/XoxnoLiquidStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Token
        - LiquidXOXNO
  /liquid/xoxno/rate:
    get:
      operationId: XoxnoLiquidScController_getExchangeRate
      summary: Fetch XOXNO liquid staking ratio
      parameters: []
      responses:
        '200':
          description: Liquid XOXNO rates
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateType'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - LiquidXOXNO
  /liquid/xoxno/liquid-supply:
    get:
      operationId: XoxnoLiquidScController_getTotalLSSupply
      summary: Fetch XOXNO liquid staking supply
      parameters: []
      responses:
        '200':
          description: Liquid XOXNO supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - LiquidXOXNO
  /liquid/xoxno/staked:
    get:
      operationId: XoxnoLiquidScController_getTotalStaked
      summary: Fetch XOXNO liquid staking total staked supply
      parameters: []
      responses:
        '200':
          description: XOXNO staked supply as long string
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - LiquidXOXNO
  /ash/min-token-quantity:
    get:
      operationId: AshAggregatorController_getMinTokenQuantity
      summary: Fetch swap routes
      parameters:
        - name: originalToken
          required: true
          in: query
          schema:
            type: string
        - name: originalTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchSwapRoutesResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Ash Aggregator
  /ash/max-token-quantity:
    get:
      operationId: AshAggregatorController_getMaxTokenQuantity
      summary: Fetch swap routes
      parameters:
        - name: paymentTokenValue
          required: true
          in: query
          schema:
            type: string
        - name: paymentToken
          required: true
          in: query
          schema:
            type: string
        - name: wantedToken
          required: true
          in: query
          schema:
            type: string
        - name: slippage
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Swap routes fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchSwapRoutesResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Ash Aggregator
  /collection/{collection}/profile:
    get:
      operationId: CollectionDataController_retrieveCollectionProfile
      summary: Get collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
    patch:
      operationId: CollectionDataController_editCollectionProfile
      summary: Update collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionProfileDto'
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/floor-price:
    get:
      operationId: CollectionDataController_retrieveCollectionFloorPrice
      summary: Get floor price of a collection
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - name: token
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Floor price of the collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FloorPriceDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/floor-price:
    get:
      operationId: CollectionDataController_retrieveBulkCollectionFloorPrice
      summary: Get floor price of a list of collections
      parameters:
        - name: collection
          required: false
          in: query
          description: >-
            A comma-separated list of collection tickers. For example:
            collection=TEST-123,TEST2-123. Maximum 10 collections.
          schema:
            type: string
      responses:
        '200':
          description: Floor price of the collections
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: number
                example:
                  collection1: 123.45
                  collection2: 67.89
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/pinned:
    get:
      operationId: CollectionDataController_retrievePinnedCollection
      summary: Get pinned collections
      parameters: []
      responses:
        '200':
          description: Pinned collections
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PinnedCollectionDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/pinned-drops:
    get:
      operationId: CollectionDataController_retrieveCollectionPinnedToDrops
      summary: Return pin status for collection within drops page
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drops page pinned status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPinnedStatusDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/pinned:
    get:
      operationId: CollectionDataController_retrieveCollectionPinned
      summary: Return pin status for collection within home page
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Home page pinned status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionPinnedStatusDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/follow:
    post:
      operationId: CollectionDataController_followCollection
      summary: Follow a specific collection
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Follow a specific collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowCollectionDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/query:
    get:
      operationId: CollectionDataController_retrieveCollections
      summary: Fetch and filter collections
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Drops query response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/drops/query:
    get:
      operationId: CollectionDataController_retrieveCollectionDrops
      summary: Get drops query
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Drops query response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DropsQueryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/drop-info:
    get:
      operationId: CollectionDataController_retrieveCollectionMintInfo
      summary: Get drop info
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drop info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DropInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{creatorTag}/{collectionTag}/drop-info:
    get:
      operationId: CollectionDataController_retrieveCollectionMintInfoByTags
      summary: Get drop info
      parameters:
        - name: creatorTag
          required: true
          in: path
          schema:
            type: string
        - name: collectionTag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Drop info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DropInfoDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/upload-picture:
    put:
      operationId: CollectionDataController_setCollectionProfilePicture
      summary: Update collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/upload-banner:
    put:
      operationId: CollectionDataController_setCollectionBanner
      summary: Update collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/reset-picture:
    put:
      operationId: CollectionDataController_resetCollectionProfilePicture
      summary: Update collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/reset-banner:
    put:
      operationId: CollectionDataController_resetCollectionBanner
      summary: Update collection profile
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Updated collection profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionProfileDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/holders:
    get:
      operationId: CollectionDataController_retrieveCollectionHolders
      summary: Get collection holders by collection ID
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Details of collection holders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionHoldersDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/owner:
    get:
      operationId: CollectionDataController_retrieveCollectionOwner
      summary: Get collection owner by collection ID
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The owner of the collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionOwnerDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/stats:
    get:
      operationId: CollectionDataController_retrieveCollectionStatisticsByCollection
      summary: Get collection stats
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: The collection stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/stats/query:
    get:
      operationId: CollectionDataController_retrieveCollectionStatistics
      summary: Get explore collections statistics
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionStatsFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Explore collections statistics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExploreCollectionsStatisticsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/global-offer/query:
    get:
      operationId: CollectionDataController_retrieveCollectionOffers
      summary: Get global offers
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionOffersFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Global offers response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalOffersDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /user/{address}/creator/listing:
    get:
      operationId: CollectionDataController_retrieveCreatorListing
      summary: Get creator all listings
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get creator listings response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/creator/details:
    get:
      operationId: CollectionDataController_retrieveCreatorDetails
      summary: Get creator details information
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Creator details fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /nft/query:
    get:
      operationId: NftDataController_retrieveNfts
      summary: Fetch NFTs based on the query filter
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftDocFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: NFT query response for the used filters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftCosmosResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Nft
  /nft/{identifier}/like:
    post:
      operationId: NftDataController_likeNft
      summary: Like an NFT
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Like NFT response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeNftDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Nft
  /user/{address}/inventory-summary:
    get:
      operationId: NftDataController_retrieveUserInventorySummary
      summary: Get inventory summary for collections by user wallet
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: activeAuction
          required: false
          in: query
          description: Filter by active auctions
          schema:
            type: boolean
      responses:
        '200':
          description: List of inventory summaries
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventorySummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/offers:
    get:
      operationId: NftDataController_retrieveUserOffers
      summary: Get user offers
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: type
          required: false
          in: query
          description: 'Type of offers to retrieve: received | placed'
          schema:
            type: string
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOffersResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /nft/offer/query:
    get:
      operationId: NftDataController_retrieveNftOffers
      summary: Get nft offers
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftOfferDocFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: User offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOffersResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Nft
  /user/{address}/favorite/nfts:
    get:
      operationId: NftDataController_retrieveUserFavoriteNfts
      summary: Get the liked NFTs by an user
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User favorite NFTs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftCosmosResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /collection/{collection}/attributes:
    get:
      operationId: NftDataController_retrieveCollectionAttributes
      summary: Get attributes
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Fetch collection unique attributes and their information
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
                  additionalProperties:
                    type: '#/components/schemas/TraitInfo'
                example:
                  Background:
                    Blue:
                      onSale: 23
                  Type:
                    General:
                      onSale: 23
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /nft/{identifier}/offers:
    get:
      operationId: NftDataController_retrieveSingleNftOffers
      summary: Get single NFT offers
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
        - name: skip
          required: true
          in: query
          schema:
            type: number
        - name: top
          required: true
          in: query
          schema:
            type: number
      responses:
        '200':
          description: Single NFT offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSingleNftOfferResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Nft
  /collection/{collection}/ranks:
    get:
      operationId: NftDataController_retrieveCollectionRanks
      summary: Fetch collection ranks
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: List of ranks order from 1 to the latest
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CollectionRanksDTO'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/{collection}/listings:
    get:
      operationId: NftDataController_retrieveCollectionListings
      summary: Get collection listings
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Listings of a collection
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingsResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /nft/pinned:
    get:
      operationId: NftDataController_retrievePinnedCollection
      summary: Get homepage pinned NFTs
      parameters: []
      responses:
        '200':
          description: Pinned NFTs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NftProps'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Nft
  /nft/sign-withdraw:
    post:
      operationId: NftDataController_signListingWithdraw
      summary: Get signed data
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignWithdrawDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Nft
  /collection/{collection}/sign-offer:
    post:
      operationId: NftDataController_signOffer
      summary: Get signed data
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignAcceptGlobalOfferDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /collection/{collection}/sign-mint:
    post:
      operationId: NftDataController_signMint
      summary: Get signed data
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignMintDto'
      responses:
        '201':
          description: Signed data and signature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignDataDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Collection
  /nft/{identifier}:
    get:
      operationId: NftDataController_retrieveSingleNft
      summary: Get a single NFT
      parameters:
        - name: identifier
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Single NFT response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftProps'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Nft
  /pool/{poolId}/profile:
    get:
      operationId: StakingDataController_retrievePoolDetails
      summary: Get collection staking pool summary
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: Staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Staking
    patch:
      operationId: StakingDataController_editStakingPoolProfile
      summary: Update collection staking pool summary
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StakingPostDTO'
      responses:
        '200':
          description: Update staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Staking
  /pool/{poolId}/whitelist:
    get:
      operationId: StakingDataController_retrievePoolWhitelist
      summary: Get the whitelisted NFTs of a staking pool
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: NFTs whitelisted by staking pool id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NftDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Staking
  /pool/{poolId}/upload-picture:
    put:
      operationId: StakingDataController_setCollectionProfilePicture
      summary: Update collection staking pool summary
      parameters:
        - name: poolId
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Update staking pool summary response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Staking
  /user/{address}/staking/available-pools:
    get:
      operationId: StakingDataController_retrieveUserAvailablePools
      summary: Get collection staking pool summary
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking pool summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/owned-collections:
    get:
      operationId: StakingDataController_retrieveUserOwnedCollections
      summary: Get owned collections by user ID
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Details of owned collections
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedCollectionsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/owned-pools:
    get:
      operationId: StakingDataController_retrieveUserOwnedPools
      summary: Get owned collections staking pools summary
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking owned staking pools summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/summary:
    get:
      operationId: StakingDataController_retrieveUserStakingSummary
      summary: Get user staking summary by user ID
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User staking summary
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStakingSummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/creator:
    get:
      operationId: StakingDataController_retrieveUserStakingCreator
      summary: Get creator settings for staking
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get staking creator config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingCreatorDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/collection/{collection}:
    get:
      operationId: StakingDataController_retrieveUserCollectionStaking
      summary: Get user staking details by collection
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get staking creator config
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/{address}/staking/pool/{poolId}/nfts:
    get:
      operationId: StakingDataController_retrieveUserPoolStaking
      summary: Get user staking NFTs by poolId and status
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: poolId
          required: true
          in: path
          schema:
            type: number
        - name: status
          required: false
          in: query
          description: >-
            The status of the NFTs to retrieve. Options are: staked, unStaked,
            available. Default is staked.
          schema:
            type: string
      responses:
        '200':
          description: Get user staking NFTs by poolId and status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StakingUserPoolNfts'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /collection/{collection}/staking/summary:
    get:
      operationId: StakingDataController_retrieveCollectionPoolStaking
      summary: Get collection staking summary
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Staking summary response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingSummary'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /collection/staking/explore:
    get:
      operationId: StakingDataController_exploreCollectionPoolStaking
      summary: Get explore staking pools
      parameters: []
      responses:
        '200':
          description: List of staking pools and their details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StakingExploreDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /user/{creatorTag}/owned-services:
    get:
      operationId: StakingDataController_retrieveCreatorOwnedServicesByTag
      summary: Get all owned services by a brand
      parameters:
        - name: creatorTag
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: All owned services by a brand identity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnedServicesDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /user/native-token:
    get:
      operationId: Web2UserDataController_getNativeToken
      summary: Get native token for the user
      parameters: []
      responses:
        '200':
          description: Returns the native token
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2:
    get:
      operationId: Web2UserDataController_getWeb2User
      summary: Get Web2 user data
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2/session-cookie:
    post:
      operationId: Web2UserDataController_createSessionCookie
      summary: Create session cookie
      parameters: []
      responses:
        '200':
          description: Returns session cookie creation result
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2/wallet:
    post:
      operationId: Web2UserDataController_createWeb2UserWallet
      summary: Create Web2 user native wallet
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NativeWalletDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2/wallet-link:
    post:
      operationId: Web2UserDataController_linkExternalWallet
      summary: Link external wallet
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Web2WalletDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2/{index}/wallet-link:
    delete:
      operationId: Web2UserDataController_unlinkExternalWallet
      summary: Unlink external wallet
      parameters:
        - name: index
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /user/web2/shards:
    get:
      operationId: Web2UserDataController_getWeb2UserShards
      summary: Get Web2 user shards
      parameters: []
      responses:
        '200':
          description: Returns user shards
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Web2UserShardsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Web2User
      security:
        - bearer: []
  /activity/query:
    get:
      operationId: NftActivityDataController_retrieveNftActivity
      summary: Query activity history
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftActivityFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Activity history response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityHistoryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - NftActivity
  /analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveVolumeGraphData
      summary: Get analytics volume
      parameters:
        - name: startTime
          required: false
          in: query
          description: Start date as 'yyyy-MM-dd'
          schema:
            type: string
        - name: endTime
          required: false
          in: query
          description: End date as yyyy-MM-dd
          schema:
            type: string
        - name: bin
          required: false
          in: query
          description: Bin size in days, as a number followed by a letter (e.g. 1d)
          schema:
            type: string
      responses:
        '200':
          description: Analytics volume response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsVolumeResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - NftActivity
  /collection/{collection}/analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveCollectionVolumeGraphData
      summary: Get analytics volume
      parameters:
        - name: collection
          required: true
          in: path
          schema:
            type: string
        - name: startTime
          required: false
          in: query
          description: Start date as 'yyyy-MM-dd'
          schema:
            type: string
        - name: endTime
          required: false
          in: query
          description: End date as yyyy-MM-dd
          schema:
            type: string
        - name: bin
          required: false
          in: query
          description: Bin size in days, as a number followed by a letter (e.g. 1d)
          schema:
            type: string
      responses:
        '200':
          description: Collection analytics volume response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnalyticsVolumeDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Collection
  /user/{address}/analytics/volume:
    get:
      operationId: NftActivityDataController_retrieveUserTradingSummary
      summary: Fetch user analytics
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User analytics fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAnalyticsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /analytics/overview:
    get:
      operationId: NftActivityDataController_retrieveOverallStatistics
      summary: Get global analytics overview
      parameters: []
      responses:
        '200':
          description: Global analytics overview response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalAnalyticsOverviewResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - NftActivity
  /user/stats:
    get:
      operationId: NftActivityDataController_retrieveUserStatistics
      summary: Get users stats
      parameters:
        - name: top
          required: false
          in: query
          description: The number of records to return
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: The number of records to skip
          schema:
            type: number
        - name: orderDirection
          required: false
          in: query
          description: 'The order direction. Possible values: asc | desc'
          schema:
            type: string
        - name: orderBy
          required: false
          in: query
          description: 'The field to order by. Possible values: totalVolume'
          schema:
            type: string
      responses:
        '200':
          description: List of user stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUsersStatsResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
  /transactions/{txHash}/status:
    get:
      operationId: TransactionController_getTransactionStatus
      summary: Check the final transaction status
      parameters:
        - name: txHash
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Transaction status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionProcessStatus'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Transactions
  /transactions:
    post:
      operationId: TransactionController_createTransaction
      summary: Send a transaction to the blockchain
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionSendResult'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Transactions
  /transactions/batch:
    post:
      operationId: TransactionController_createTransactionBatch
      summary: Send a transaction to the blockchain
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/TransactionCreate'
      responses:
        '201':
          description: Transaction details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BatchTransactionResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Transactions
  /search:
    get:
      operationId: SearchDataController_globalSearch
      summary: Global Search
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Global search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Search
  /user/search:
    get:
      operationId: SearchDataController_userSearch
      summary: Global User Search
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Global user search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Search
  /collection/search:
    get:
      operationId: SearchDataController_collectionSearch
      summary: Global collection Search
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Global collection search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Search
  /collection/drops/search:
    get:
      operationId: SearchDataController_collectionDropsSearch
      summary: Global collection drops Search
      parameters:
        - name: filter
          required: false
          in: query
          description: >-
            A JSON string representing the filter criteria. For example: {"key":
            "value"}
          schema:
            type: string
      responses:
        '200':
          description: Global collection drops search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalSearchResponseDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Search
  /nft/search/query:
    get:
      operationId: SearchDataController_nftSearch
      summary: Global nft search
      parameters:
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NftDocFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Search
  /user/chat/message:
    post:
      operationId: ChatDataController_sendChatMessage
      summary: Send a private message
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendChatMessageDto'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessageDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/conversation:
    get:
      operationId: ChatDataController_getChatConversation
      summary: Fetch user chat conversations summary
      parameters:
        - name: isGroupChat
          required: false
          in: query
          description: >-
            If undefined, will return all conversations. If true, will return
            group chats. If false, will return direct messages.
          schema:
            type: boolean
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User chat conversations summary retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchChatConversationsSummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/conversation/{conversationId}:
    get:
      operationId: ChatDataController_getConversationMessageById
      summary: Fetch user chat conversation messages
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
        - name: receiver
          required: true
          in: query
          schema:
            type: string
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: User chat conversation messages retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchChatMessagesDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
    delete:
      operationId: ChatDataController_deleteConversation
      summary: Delete a user conversation
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/conversation-summary:
    get:
      operationId: ChatDataController_getUserConversationSummary
      summary: Fetch global conversation summary
      parameters: []
      responses:
        '200':
          description: Global conversation summary fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GlobalConversationSummaryDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/conversation/{conversationId}/message/{messageId}:
    delete:
      operationId: ChatDataController_deleteUserConversationMessage
      summary: Delete a user conversation
      parameters:
        - name: conversationId
          required: true
          in: path
          schema:
            type: string
        - name: messageId
          required: true
          in: path
          schema:
            type: string
        - name: deleteForAll
          required: false
          in: query
          description: Delete message for all users
          schema:
            type: boolean
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/block:
    get:
      operationId: ChatDataController_getBlockedUsers
      summary: Fetch blocked chats
      parameters: []
      responses:
        '200':
          description: Blocked chats fetched successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchBlockedChatsDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/block/{address}:
    post:
      operationId: ChatDataController_blockUser
      summary: Block a user
      parameters:
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: User blocked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - Chat
      security:
        - bearer: []
  /user/chat/token:
    post:
      operationId: AzureWsController_generateChatAccessToken
      summary: Get WebSocket connection token
      parameters: []
      responses:
        '201':
          description: WebSocket connection token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebSocketTokenDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      security:
        - bearer: []
      tags:
        - Chat
  /user/notifications:
    get:
      operationId: NotificationDataController_getNotifications
      summary: Get notifications of an user
      parameters:
        - name: top
          required: false
          in: query
          description: Number of items to retrieve
          schema:
            type: number
        - name: skip
          required: false
          in: query
          description: Number of items to skip
          schema:
            type: number
      responses:
        '200':
          description: Get user notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/notifications/unread-count:
    get:
      operationId: NotificationDataController_getNotificationCount
      summary: Get the un read notification count
      parameters: []
      responses:
        '200':
          description: User notifications count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationCountResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/notifications/clear:
    delete:
      operationId: NotificationDataController_clearAllNotifications
      summary: Delete a user conversation
      parameters: []
      responses:
        '200':
          description: User conversation deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessDto'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /user/notifications/read:
    patch:
      operationId: NotificationDataController_setNotificationAsRead
      summary: Set as read notifications, leave empty ID to read all
      parameters:
        - name: id
          required: false
          in: query
          description: Notification id
          schema:
            type: string
      responses:
        '200':
          description: Updated notification is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationDoc'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '403':
          description: Forbidden resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - User
      security:
        - bearer: []
  /event/{eventId}/calculate-prices:
    post:
      operationId: TicketingDataController_calculateTicketPrices
      summary: Calculate ticket prices with discounts
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                referralCode:
                  type: string
                  nullable: true
                discountCode:
                  type: string
                  nullable: true
                ticketSelections:
                  type: array
                  items:
                    $ref: '#/components/schemas/TicketSelectionDto'
      responses:
        '201':
          description: Ticket prices calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  currency:
                    type: string
                  stagePrices:
                    type: array
                    items:
                      type: object
                      properties:
                        stageId:
                          type: string
                        stageName:
                          type: string
                        ticketTypeId:
                          type: string
                        ticketTypeName:
                          type: string
                        normalPrice:
                          type: number
                        discountedPrice:
                          type: number
                        quantity:
                          type: number
                  vat:
                    type: number
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/validate-discount:
    post:
      operationId: TicketingDataController_validateDiscountCode
      summary: Validate discount code
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                discountCode:
                  type: string
              required:
                - discountCode
      responses:
        '200':
          description: Discount code validated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isValid:
                    type: boolean
                  discountType:
                    type: string
                  discountAmount:
                    type: number
                  discountMaxAmount:
                    type: number
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/register:
    post:
      operationId: TicketingDataController_registerForEvent
      summary: Register for an event
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventGuestRegistrationDto'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventRegistrationResponseDto'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event:
    post:
      operationId: TicketingDataController_createEvent
      summary: Create new event
      parameters:
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventProfileCreateDto'
      responses:
        '201':
          description: Event created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}:
    get:
      operationId: TicketingDataController_getEventById
      summary: Get event details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
    patch:
      operationId: TicketingDataController_editEvent
      summary: Update event details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventProfileEditDto'
      responses:
        '201':
          description: Event updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/profile:
    put:
      operationId: TicketingDataController_setEventProfilePicture
      summary: Update event profile image
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/background:
    put:
      operationId: TicketingDataController_setEventBackgroundPicture
      summary: Update event background image
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event background
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/description:
    put:
      operationId: TicketingDataController_setEventDescription
      summary: Update event description
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Updated event description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/description/image:
    put:
      operationId: TicketingDataController_uploadEventDescriptionImage
      summary: Upload event description image
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded event description image url
          content:
            application/json:
              schema:
                type: string
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/description/image/{imageId}:
    delete:
      operationId: TicketingDataController_deleteEventDescriptionImage
      summary: Delete event description image
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: imageId
          required: true
          in: path
          description: Image file name without extension
          schema:
            type: string
      responses:
        '200':
          description: Deleted event description image
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/ticket:
    post:
      operationId: TicketingDataController_createEventTicketType
      summary: Create new event ticket
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTicketProfileCreateDto'
      responses:
        '201':
          description: Event ticket created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    get:
      operationId: TicketingDataController_getEventTickets
      summary: Get event tickets
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event ticket details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventTicketProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/ticket/{ticketId}:
    get:
      operationId: TicketingDataController_getEventTicketById
      summary: Get event ticket details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      responses:
        '200':
          description: Event ticket details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    patch:
      operationId: TicketingDataController_editEventTicket
      summary: Update event ticket details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventTicketProfileEditDto'
      responses:
        '201':
          description: Event ticket updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/ticket/{ticketId}/profile:
    put:
      operationId: TicketingDataController_uploadEventTicketImage
      summary: Upload event ticket profile
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          description: ID of the ticket
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Uploaded event ticket profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTicketProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/stage:
    post:
      operationId: TicketingDataController_createEventTicketStage
      summary: Create new event stage
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventStageProfileCreateDto'
      responses:
        '201':
          description: Event stage created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    get:
      operationId: TicketingDataController_getEventStages
      summary: Get event stages
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event stage details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventStageProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/stage/{stageId}:
    get:
      operationId: TicketingDataController_getEventStageById
      summary: Get event stage details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
      responses:
        '200':
          description: Event stage details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    patch:
      operationId: TicketingDataController_editEventStage
      summary: Update event stage details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventStageProfileEditDto'
      responses:
        '201':
          description: Event stage updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventStageProfileDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    delete:
      operationId: TicketingDataController_deleteEventStage
      summary: Delete event stage
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: stageId
          required: true
          in: path
          description: ID of the stage
          schema:
            type: string
      responses:
        '200':
          description: Event stage deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
  /user/{address}/creator/events:
    get:
      operationId: TicketingDataController_getCreatorEvents
      summary: Get creator events created
      parameters:
        - name: address
          required: true
          in: path
          description: Address of the creator
          schema:
            type: string
      responses:
        '200':
          description: Creator events details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatorDetailsDto'
      tags:
        - Ticketing
        - User
      security:
        - bearer: []
  /event/{eventId}/invite:
    post:
      operationId: TicketingDataController_createInvitation
      summary: Create event invitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/EventInvitationCreateDto'
      responses:
        '201':
          description: Invitations created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventInvitationDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/invite/query:
    get:
      operationId: TicketingDataController_getEventInvitations
      summary: Get event invitations
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitationFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Event invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/invite/{inviteId}:
    get:
      operationId: TicketingDataController_getVoucherData
      summary: Get event invitation details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
      responses:
        '200':
          description: Invitation details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitation'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/voucher/query:
    get:
      operationId: TicketingDataController_getEventVouchers
      summary: Get event vouchers for event
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: List of vouchers for the event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CosmosPaginatedResponse'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/questions:
    get:
      operationId: TicketingDataController_getEventQuestions
      summary: Get event custom questions
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: List of custom questions for the event
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventQuestionDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/question:
    post:
      operationId: TicketingDataController_createEventQuestion
      summary: Create custom question for event
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventQuestionCreateDto'
      responses:
        '201':
          description: Custom question created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventQuestionDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/question/{questionId}:
    patch:
      operationId: TicketingDataController_editEventQuestion
      summary: Edit custom question for event
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: questionId
          required: true
          in: path
          description: ID of the question
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventQuestionEditDto'
      responses:
        '200':
          description: Custom question updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventQuestionDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    delete:
      operationId: TicketingDataController_deleteEventQuestion
      summary: Delete custom question for event
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: questionId
          required: true
          in: path
          description: ID of the question
          schema:
            type: string
      responses:
        '200':
          description: Custom question deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/invite/{inviteId}/claim:
    post:
      operationId: TicketingDataController_claimInvitation
      summary: Claim invitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventGuestRegistrationDto'
      responses:
        '201':
          description: Invitation claimed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitation'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/invite/{inviteId}/cancel:
    post:
      operationId: TicketingDataController_cancelInvitation
      summary: Cancel invitation
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: inviteId
          required: true
          in: path
          description: ID of the invitation
          schema:
            type: string
      responses:
        '201':
          description: Invitation claimed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventInvitationDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/guest/query:
    get:
      operationId: TicketingDataController_getEventGuests
      summary: Get event guests
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: filter
          required: true
          in: query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGuestFilter'
          description: >-
            A JSON object representing the filter criteria. Example:
            {"includeCount":true,"top":25,"skip":0,"strictSelect":false}
          schema:
            type: string
      responses:
        '200':
          description: Event guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/guest/{address}:
    get:
      operationId: TicketingDataController_getEventGuest
      summary: Get event guest details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: Guest wallet address
          schema:
            type: string
      responses:
        '200':
          description: Event guest details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventGuestProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/role:
    post:
      operationId: TicketingDataController_createUserRole
      summary: Create event user role
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUserRoleCreateDto'
      responses:
        '201':
          description: Role created
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventUserRoleDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    get:
      operationId: TicketingDataController_getEventUserRoles
      summary: Get event roles
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventUserRoleDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/role/{address}:
    delete:
      operationId: TicketingDataController_deleteRole
      summary: Delete event user role
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          description: ID of the role
          schema:
            type: string
      responses:
        '200':
          description: Event user role deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
    get:
      operationId: TicketingDataController_getEventUserRole
      summary: Get event user role details
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: address
          required: true
          in: path
          description: User wallet address
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/guest:
    delete:
      operationId: TicketingDataController_deleteGuest
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      responses:
        '200':
          description: Guest deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/role/{roleId}/accept:
    post:
      operationId: TicketingDataController_acceptRole
      summary: Accept event user role
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          description: ID of the role
          schema:
            type: string
      responses:
        '201':
          description: Event user role accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/roleId/{roleId}:
    get:
      operationId: TicketingDataController_getEventUserRolesById
      summary: Get event roles by id
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: roleId
          required: true
          in: path
          description: ID of the role
          schema:
            type: string
      responses:
        '200':
          description: Event user role details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventUserRoleDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /user/me/event:
    get:
      operationId: TicketingDataController_getMyEvents
      summary: Get my events
      parameters: []
      responses:
        '200':
          description: Event details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventProfile'
      tags:
        - Ticketing
      security:
        - bearer: []
  /user/me/event/badge:
    get:
      operationId: TicketingDataController_generateQR
      summary: Create badge QR
      parameters: []
      responses:
        '200':
          description: BASE64 Badge QR
          content:
            application/json:
              schema:
                type: string
      tags:
        - Ticketing
      security:
        - bearer: []
  /user/me/event/badge/payload:
    get:
      operationId: TicketingDataController_generateQRPayload
      summary: Create badge QR
      parameters: []
      responses:
        '200':
          description: String Badge QR
          content:
            application/json:
              schema:
                type: string
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/scan:
    post:
      operationId: TicketingDataController_eventScanTickets
      summary: Validate QR
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventCheckInQR'
      responses:
        '201':
          description: String Badge QR
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketValidationResult'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/voucher:
    post:
      operationId: TicketingDataController_createEventVoucher
      summary: Create a new event voucher
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventVoucherCreateDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/voucher/{voucherCode}:
    patch:
      operationId: TicketingDataController_editEventVoucher
      summary: Edit an existing event voucher
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: voucherCode
          required: true
          in: path
          description: Code of the voucher
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventVoucherEditDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventVoucherDoc'
      tags:
        - Ticketing
      security:
        - bearer: []
    delete:
      operationId: TicketingDataController_deleteEventVoucher
      summary: Delete an existing event voucher
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - name: voucherCode
          required: true
          in: path
          description: Code of the voucher
          schema:
            type: string
      responses:
        '200':
          description: Deleted event description image
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/manual-check-in:
    post:
      operationId: TicketingDataController_manualCheckIn
      summary: Manual check-in
      parameters:
        - name: eventId
          required: true
          in: path
          description: ID of the event
          schema:
            type: string
        - schema: {}
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ManualCheckInDto'
      responses:
        '200':
          description: Check-in result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketValidationResult'
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/guest/{guestId}/answered-questions:
    get:
      operationId: TicketingDataController_getAnsweredQuestions
      summary: Get answered questions with details for a guest
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
        - name: guestId
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnsweredQuestionWithDetails'
      tags:
        - Ticketing
        - Guest
      security:
        - bearer: []
  /event/{eventId}/ticket/{ticketId}/google/class:
    post:
      operationId: TicketingDataController_createGooglePassClass
      summary: Create or update Google Pass class
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
        - name: ticketId
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Google Pass class created or updated
      tags:
        - Ticketing
      security:
        - bearer: []
  /event/{eventId}/guest/{address}/google/pass:
    get:
      operationId: TicketingDataController_createGooglePassForGuest
      summary: Create Google Pass for guest
      parameters:
        - name: eventId
          required: true
          in: path
          schema:
            type: string
        - name: address
          required: true
          in: path
          schema:
            type: string
      responses:
        '201':
          description: Google Pass created for guest
      tags:
        - Ticketing
      security:
        - bearer: []
info:
  title: XOXNO APIs
  description: APIs for XOXNO marketplace
  version: 1.0.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    ErrorResponseDto:
      type: object
      properties:
        statusCode:
          type: number
          example: 400
        message:
          type: string
          example: Error message explaining what happened
        timestamp:
          type: string
          example: '2024-07-10T13:36:22.603Z'
        path:
          type: string
          example: /user/abd/network-account
      required:
        - statusCode
        - message
        - timestamp
        - path
    LoginRequestDto:
      type: object
      properties:
        address:
          type: string
          description: The address of the user
        loginToken:
          type: string
          description: The login token
        signature:
          type: string
          description: The signature of the login token
        data:
          type: object
          description: Additional data as key-value pairs
      required:
        - address
        - loginToken
        - signature
        - data
    LoginAccessDto:
      type: object
      properties:
        access_token:
          type: string
          description: Access token for authentication
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expires:
          type: number
          description: Expiration time of the token in seconds
          example: 3600
      required:
        - access_token
        - expires
    ActiveGuardianDto:
      type: object
      properties:
        activationEpoch:
          type: number
          example: 1099
        address:
          type: string
          example: erd1vhe5a5wyf62ylu4cvwjm0rg3ukwp8tusj0t2vxme5c3aav9jd9ws2c43dq
        serviceUID:
          type: string
          example: INVISIBLE_GUARDIAN
      required:
        - activationEpoch
        - address
        - serviceUID
    UserNetworkInfoDto:
      type: object
      properties:
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        nonce:
          type: number
          example: 3339
        balanceShort:
          type: number
          example: 0.5
        username:
          type: string
          example: '@mihaieremia'
        isUpgradeable:
          type: boolean
          example: false
        isReadable:
          type: boolean
          example: false
        isGuarded:
          type: boolean
          example: true
        isPayable:
          type: boolean
          example: false
        isPayableBySmartContract:
          type: boolean
          example: false
        balance:
          type: string
          example: '499779492251062403'
        shard:
          type: number
          example: 2
        guarded:
          type: boolean
          example: true
        activeGuardian:
          $ref: '#/components/schemas/ActiveGuardianDto'
        usdValue:
          type: number
          example: 18.254
      required:
        - address
        - nonce
        - balanceShort
        - username
        - balance
        - shard
        - guarded
        - usdValue
    WalletDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 7514.91
        egldValue:
          type: number
          example: 205.899
        weight:
          type: number
          example: 100
      required:
        - usdValue
        - egldValue
        - weight
    EsdtsDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 7496.669
        egldValue:
          type: number
          example: 205.399
        weight:
          type: number
          example: 99.74
      required:
        - usdValue
        - egldValue
        - weight
    StablesDto:
      type: object
      properties:
        usdValue:
          type: number
          example: 0
        egldValue:
          type: number
          example: 0
        weight:
          type: number
          example: 0
      required:
        - usdValue
        - egldValue
        - weight
    TokenAssetsDto:
      type: object
      properties:
        pngUrl:
          type: string
          example: https://media.xoxno.com/tokens/TIME-84518f/logo.png
        svgUrl:
          type: string
          example: https://media.xoxno.com/tokens/TIME-84518f/logo.svg
      required:
        - pngUrl
        - svgUrl
    TokenDto:
      type: object
      properties:
        nonce:
          type: number
          example: 0
        identifier:
          type: string
          example: TIME-84518f
        decimals:
          type: number
          example: 18
        balance:
          type: string
          example: '514203000000000000000'
        ticker:
          type: string
          example: TIME
        name:
          type: string
          example: TIME
        shortBalance:
          type: number
          example: 514.203
        usdPrice:
          type: number
          example: 12.160648172030305
        usdValue:
          type: number
          example: 6253.041772002499
        egldValue:
          type: number
          example: 171.32505804164822
        assets:
          $ref: '#/components/schemas/TokenAssetsDto'
        isAshSupported:
          type: boolean
          example: false
        weight:
          type: number
          example: 83.21
      required:
        - nonce
        - identifier
        - decimals
        - balance
        - ticker
        - name
        - shortBalance
        - usdPrice
        - usdValue
        - egldValue
        - assets
        - isAshSupported
        - weight
    UserTokenInventoryResponseDto:
      type: object
      properties:
        wallet:
          $ref: '#/components/schemas/WalletDto'
        esdts:
          $ref: '#/components/schemas/EsdtsDto'
        stables:
          $ref: '#/components/schemas/StablesDto'
        tokens:
          type: array
          items:
            $ref: '#/components/schemas/TokenDto'
      required:
        - wallet
        - esdts
        - stables
        - tokens
    SocialsDto:
      type: object
      properties:
        twitter:
          type: string
          example: https://twitter.com/example
        instagram:
          type: string
          example: https://instagram.com/example
        website:
          type: string
          example: https://example.com
        telegram:
          type: string
          example: https://t.me/example
        discord:
          type: string
          example: https://discord.com/invite/example
        facebook:
          type: string
          example: ''
        youtube:
          type: string
          example: ''
      required:
        - twitter
        - instagram
        - website
        - telegram
        - discord
        - facebook
        - youtube
    UserDepositDto:
      type: object
      properties:
        balance:
          type: string
          example: '1000000000000000000'
        balanceShort:
          type: number
          example: 1
        usdPrice:
          type: number
          example: 1
        paymentToken:
          type: string
          example: EGLD
        paymentTokenNonce:
          type: number
          example: 0
      required:
        - balance
        - balanceShort
        - usdPrice
        - paymentToken
        - paymentTokenNonce
    EmailNotificationsDto:
      type: object
      properties:
        enabled:
          type: boolean
          example: true
        emailAddress:
          type: string
          example: me@dani.ro
        isEmailVerificationPending:
          type: boolean
          example: false
        isEmailVerified:
          type: boolean
          example: true
        isWeb2User:
          type: boolean
          example: false
        timestamp:
          type: number
          example: 1720462258
      required:
        - enabled
        - emailAddress
        - isEmailVerificationPending
        - isEmailVerified
        - isWeb2User
        - timestamp
    NotificationPreferencesDto:
      type: object
      properties:
        sales:
          type: boolean
          description: Notification preference for sales
          example: true
        bids:
          type: boolean
          description: Notification preference for bids
          example: true
        offersReceived:
          type: boolean
          description: Notification preference for offers received
          example: true
        offersAccepted:
          type: boolean
          description: Notification preference for offers accepted
          example: true
        offersRejected:
          type: boolean
          description: Notification preference for offers rejected
          example: true
        deposits:
          type: boolean
          description: Notification preference for deposits
          example: true
      required:
        - sales
        - bids
        - offersReceived
        - offersAccepted
        - offersRejected
        - deposits
    UserSettingsDto:
      type: object
      properties:
        dataType:
          type: string
          example: userSettings
        emailNotifications:
          $ref: '#/components/schemas/EmailNotificationsDto'
        notificationPreferences:
          $ref: '#/components/schemas/NotificationPreferencesDto'
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        id:
          type: string
          example: >-
            erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57-userSettings
        _ts:
          type: number
          example: 1720462258
      required:
        - dataType
        - emailNotifications
        - notificationPreferences
        - address
        - id
        - _ts
    UserProfileDto:
      type: object
      properties:
        dataType:
          type: string
          example: userProfile
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        isBanned:
          type: boolean
          example: false
        isVerified:
          type: boolean
          example: false
        socials:
          $ref: '#/components/schemas/SocialsDto'
        joinedDate:
          type: number
          example: 1643381871
        id:
          type: string
          example: >-
            erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57-userProfile
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57/profilePicture.webp?ts=1718876966
        banner:
          type: string
          example: >-
            https://media.xoxno.com/userprofile/erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57/profileBanner.webp?ts=1718876966
        description:
          type: string
          example: Testing XOXNO V3.2
        herotag:
          type: string
          example: '@mihaieremia'
        isCreator:
          type: boolean
          example: false
        isPoolOwner:
          type: boolean
          example: true
        userDeposit:
          type: array
          items:
            $ref: '#/components/schemas/UserDepositDto'
        followCount:
          type: number
          example: 0
        shard:
          type: number
          example: 0
        _ts:
          type: number
          example: 1720724856
        userSettings:
          $ref: '#/components/schemas/UserSettingsDto'
      required:
        - dataType
        - address
        - isBanned
        - isVerified
        - socials
        - joinedDate
        - id
        - profile
        - banner
        - description
        - herotag
        - isCreator
        - isPoolOwner
        - userDeposit
        - followCount
        - shard
        - _ts
        - userSettings
    SetEmailDto:
      type: object
      properties:
        enabled:
          type: boolean
          description: Indicates if the email feature is enabled
          example: true
        emailAddress:
          type: string
          description: The email address to be set
          example: example@example.com
      required:
        - enabled
    VerifyEmailDto:
      type: object
      properties:
        verificationCode:
          type: string
          description: Verification code sent to the user
          example: '123456'
          minLength: 6
          maxLength: 6
      required:
        - verificationCode
    EditUserProfileDto:
      type: object
      properties:
        description:
          type: string
          description: User description
          maxLength: 300
          example: I am a user
        profile:
          type: string
          description: Profile picture URL
          example: https://media.xoxno.com/example-01
        socials:
          description: Social media profiles
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
    SuccessDto:
      type: object
      properties:
        success:
          type: boolean
          example: true
      required:
        - success
    CreatorProfileDto:
      type: object
      properties:
        name:
          type: string
          example: Bananas
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqutf9carlkckyn36t5uvp23m9fs877kfsys5s8axpe8
        address:
          type: string
          example: erd1vn9s8uj4e7r6skmqfw5py3hxnluw3ftv6dh47yt449vtvdnn9w2stmwm7l
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/erd1vn9s8uj4e7r6skmqfw5py3hxnluw3ftv6dh47yt449vtvdnn9w2stmwm7l/creatorProfilePicture.webp?ts=1717019144
        banner:
          type: string
          example: >-
            https://media.xoxno.com/userprofile/erd1vn9s8uj4e7r6skmqfw5py3hxnluw3ftv6dh47yt449vtvdnn9w2stmwm7l/profileBanner.webp?ts=1717019141
        joinedDate:
          type: number
          example: 1641773364
        socials:
          $ref: '#/components/schemas/SocialsDto'
        description:
          type: string
          example: Best creator
        creatorTag:
          type: string
          example: Bananas
        followCount:
          type: number
          example: 0
      required:
        - name
        - contractAddress
        - address
        - profile
        - banner
        - joinedDate
        - socials
        - description
        - creatorTag
        - followCount
    DayTradingStatsDto:
      type: object
      properties:
        volume:
          type: number
          description: Trading volume for the day
        volumeMargin:
          type: number
          description: Margin of volume change for the day
        trades:
          type: number
          description: Number of trades for the day
        tradesMargin:
          type: number
          description: Margin of trades change for the day
        minPrice:
          type: number
          description: Minimum price for the day
        maxPrice:
          type: number
          description: Maximum price for the day
        averagePrice:
          type: number
          description: Average price for the day
      required:
        - volume
        - volumeMargin
        - trades
        - tradesMargin
        - minPrice
        - maxPrice
        - averagePrice
    TradingStatsDto:
      type: object
      properties:
        day:
          description: Daily trading statistics
          allOf:
            - $ref: '#/components/schemas/DayTradingStatsDto'
      required:
        - day
    CollectionInfoDto:
      type: object
      properties:
        name:
          type: string
          example: EBMC
        socials:
          $ref: '#/components/schemas/SocialsDto'
        isVerified:
          type: boolean
          example: false
        isVisible:
          type: boolean
          example: true
        description:
          type: string
          example: Test collection
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EBMC-8a2d40/profilePicture.webp
        banner:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EBMC-8a2d40/profilePicture.webp
        collectionSize:
          type: number
          example: 2955
        followCount:
          type: number
          example: 16
        holdersCount:
          type: number
          example: 0
        owner:
          type: string
          example: erd10ugfytgdndw5qmnykemjfpd7xrjs63f0r2qjhug0ek9gnfdjxq4s8qjvcx
        volume:
          type: number
          example: 1230.34
      required:
        - name
        - socials
        - isVerified
        - isVisible
        - description
        - profile
        - banner
        - collectionSize
        - followCount
        - holdersCount
        - owner
        - volume
    CollectionStatsDto:
      type: object
      properties:
        collection:
          type: string
          description: Identifier of the collection
        tradingStats:
          description: Trading statistics of the collection
          allOf:
            - $ref: '#/components/schemas/TradingStatsDto'
        floorPrice:
          type: number
          description: Current floor price
        listedCount:
          type: number
          description: Number of listed items
        collectionInfo:
          description: Information about the collection
          allOf:
            - $ref: '#/components/schemas/CollectionInfoDto'
      required:
        - collection
        - tradingStats
        - floorPrice
        - listedCount
        - collectionInfo
    ExploreCollectionsStatisticsDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/CollectionStatsDto'
        hasMoreResults:
          type: boolean
          example: true
      required:
        - resources
        - hasMoreResults
    CheckLikeStatusResponseDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          example: false
      required:
        - isFavorite
    UserFavoriteResponseDto:
      type: object
      properties:
        isFollowed:
          type: boolean
          description: The follow status of a user
          example: true
        addressFavorite:
          type: string
          description: The user that is followed or unfollowed
          example: erd12131241213
      required:
        - isFollowed
        - addressFavorite
    TokenDocDto:
      type: object
      properties:
        id:
          type: string
          description: ID of the token
          example: EGLD
        identifier:
          type: string
          description: Identifier of the token
          example: EGLD
        collection:
          type: string
          description: Collection of the token
          example: FungibleTokenInfo
        dataType:
          type: string
          description: Data type of the token
          example: fungibleTokenProfile
        decimals:
          type: number
          description: Decimals of the token
          example: 18
        name:
          type: string
          description: Name of the token
          example: EGLD
        type:
          type: string
          description: Type of the token
          example: FungibleESDT
        category:
          description: Categories of the token
          example:
            - all
            - trade
            - staking
            - minting
            - p2p
          type: array
          items:
            type: string
        svgUrl:
          type: string
          description: SVG URL of the token logo
          example: https://media.xoxno.com/tokens/EGLD/logo.svg
        pngUrl:
          type: string
          description: PNG URL of the token logo
          example: https://media.xoxno.com/tokens/EGLD/logo.png
        ticker:
          type: string
          description: Ticker of the token
          example: EGLD
        _ts:
          type: number
          description: Timestamp
          example: 1705933418
        usdPrice:
          type: number
          description: USD price of the token
          example: 35.70543073773239
      required:
        - id
        - identifier
        - collection
        - dataType
        - decimals
        - name
        - type
        - category
        - svgUrl
        - pngUrl
        - ticker
        - _ts
        - usdPrice
    RateType:
      type: object
      properties:
        rateShort:
          type: number
        rate:
          type: string
        reverseRate:
          type: string
        reverseRateShort:
          type: number
      required:
        - rateShort
        - rate
        - reverseRate
        - reverseRateShort
    IMetrics:
      type: object
      properties:
        supply:
          type: string
        minted:
          type: string
        burned:
          type: string
        initialMinted:
          type: string
        recomputedSupply:
          type: boolean
        burnedShort:
          type: number
        initialMintedShort:
          type: number
        minterShort:
          type: number
        supplyShort:
          type: number
        transfersCount:
          type: number
        holdersCount:
          type: number
        rate:
          $ref: '#/components/schemas/RateType'
        apr:
          type: number
        totalStakedCount:
          type: number
        totalStakedCountUsd:
          type: number
        userStakedCount:
          type: number
        totalRewardsPaid:
          type: number
        totalRewardsPaidUsd:
          type: number
        uniqueStakersCount:
          type: number
        instakeUnstake:
          type: number
        serviceFee:
          type: number
      required:
        - supply
        - minted
        - burned
        - initialMinted
        - recomputedSupply
        - burnedShort
        - initialMintedShort
        - minterShort
        - supplyShort
        - transfersCount
        - holdersCount
        - rate
        - apr
        - totalStakedCount
        - totalStakedCountUsd
        - userStakedCount
        - totalRewardsPaid
        - totalRewardsPaidUsd
        - uniqueStakersCount
        - instakeUnstake
        - serviceFee
    XoxnoInfo:
      type: object
      properties:
        price:
          type: number
        marketCap:
          type: number
        fdv:
          type: number
        tradeVol:
          type: number
        supply:
          type: number
        burnedShort:
          type: number
        circulatingSupply:
          type: number
        holdersCount:
          type: number
        totalSupply:
          type: number
        idoPrice:
          type: number
        listingDate:
          format: date-time
          type: string
      required:
        - price
        - marketCap
        - fdv
        - tradeVol
        - supply
        - burnedShort
        - circulatingSupply
        - holdersCount
        - totalSupply
        - idoPrice
        - listingDate
    XoxnoLiquidStatsDto:
      type: object
      properties:
        participants:
          type: number
          description: Number of protocol participants
          example: 270
        totalRewards:
          type: number
          description: Total rewards awarded
          example: 768.42
        totalRewardsEgldValue:
          type: number
          description: Total rewards awarded as EGLD
          example: 4.85
        totalStaked:
          type: number
          description: Total staked amount
          example: 785386.47
        yearlyAPR:
          type: number
          description: Yearly APR
          example: 13.07
        totalRewardsUsdValue:
          type: number
          description: Total rewards as USD value
          example: 171.65
        totalStakedUsdValue:
          type: number
          description: Total staked amount as USD value
          example: 140274.99
        rateInfo:
          description: Exchange rate information
          allOf:
            - $ref: '#/components/schemas/RateType'
        serviceFee:
          type: number
          description: Service fee
          example: 0
        instantUnstake:
          type: number
          description: Amount available for instant unstake
          example: 0
      required:
        - participants
        - totalRewards
        - totalRewardsEgldValue
        - totalStaked
        - yearlyAPR
        - totalRewardsUsdValue
        - totalStakedUsdValue
        - rateInfo
        - serviceFee
        - instantUnstake
    SwapDto:
      type: object
      properties:
        poolId:
          type: string
          example: erd1qqqqqqqqqqqqqpgqqz6vp9y50ep867vnr296mqf3dduh6guvmvlsu3sujc
        assetInIndex:
          type: number
          example: 0
        assetOutIndex:
          type: number
          example: 1
        amount:
          type: string
          example: '4182199770163362929142'
        returnAmount:
          type: string
          example: '1776845552107565998'
        assetIn:
          type: string
          example: PADAWAN-a17f58
        assetOut:
          type: string
          example: WEGLD-bd4d79
        functionName:
          type: string
          example: swapMultiTokensFixedInput
        arguments:
          example:
            - AQ==
            - ''
            - UEFEQVdBTi1hMTdmNTg=
            - V0VHTEQtYmQ0ZDc5
          type: array
          items:
            type: string
      required:
        - poolId
        - assetInIndex
        - assetOutIndex
        - amount
        - returnAmount
        - assetIn
        - assetOut
        - functionName
        - arguments
    AshTokenDto:
      type: object
      properties:
        address:
          type: string
          example: PADAWAN-a17f58
        decimal:
          type: number
          example: 18
      required:
        - address
        - decimal
    PoolDto:
      type: object
      properties:
        allTokens:
          type: array
          items:
            $ref: '#/components/schemas/AshTokenDto'
        type:
          type: string
          example: onedex
      required:
        - allTokens
        - type
    HopDto:
      type: object
      properties:
        poolId:
          type: string
          example: erd1qqqqqqqqqqqqqpgqqz6vp9y50ep867vnr296mqf3dduh6guvmvlsu3sujc
        pool:
          $ref: '#/components/schemas/PoolDto'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenInAmount:
          type: string
          example: '4182.199770163362929142'
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        tokenOutAmount:
          type: string
          example: '1.776845552107565998'
      required:
        - poolId
        - pool
        - tokenIn
        - tokenInAmount
        - tokenOut
        - tokenOutAmount
    RouteDto:
      type: object
      properties:
        hops:
          type: array
          items:
            $ref: '#/components/schemas/HopDto'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenInAmount:
          type: string
          example: '4182.199770163362929142'
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        tokenOutAmount:
          type: string
          example: '1.776845552107565998'
      required:
        - hops
        - tokenIn
        - tokenInAmount
        - tokenOut
        - tokenOutAmount
    OriginalDto:
      type: object
      properties:
        tokenAddresses:
          type: array
          items:
            type: string
        swaps:
          type: array
          items:
            $ref: '#/components/schemas/SwapDto'
        swapAmount:
          type: string
          example: '7551.21881510239555991'
        returnAmount:
          type: string
          example: '3.208300850633318163'
        swapAmountWithDecimal:
          type: string
          example: '7551218815102395559910'
        returnAmountWithDecimal:
          type: string
          example: '3208300850633318163'
        tokenIn:
          type: string
          example: PADAWAN-a17f58
        tokenOut:
          type: string
          example: WEGLD-bd4d79
        marketSp:
          type: string
          example: '2348.014436081921556678'
        routes:
          type: array
          items:
            $ref: '#/components/schemas/RouteDto'
        effectivePrice:
          type: number
          example: 2353.650473150542
        effectivePriceReserved:
          type: number
          example: 0.00042487192189646716
        priceImpact:
          type: number
          example: 0.002394593901224484
        warning:
          type: string
          example: None
        minReturnAmount:
          type: string
          example: '3.192259346380151572'
        minReturnAmountWithDecimal:
          type: string
          example: '3192259346380151572'
        __from:
          type: string
          example: PADAWAN-a17f58
        __to:
          type: string
          example: WEGLD-bd4d79
        __amount:
          type: string
          example: '7551218815102395559910.6223'
      required:
        - tokenAddresses
        - swaps
        - swapAmount
        - returnAmount
        - swapAmountWithDecimal
        - returnAmountWithDecimal
        - tokenIn
        - tokenOut
        - marketSp
        - routes
        - effectivePrice
        - effectivePriceReserved
        - priceImpact
        - warning
        - minReturnAmount
        - minReturnAmountWithDecimal
        - __from
        - __to
        - __amount
    FetchSwapRoutesResponseDto:
      type: object
      properties:
        argument:
          type: string
          example: >-
            0000000e5041444157414e2d6131376635380000000c5745474c442d62643464373900000009e2b7ae54b8339019f60000000000000000050000b4c094947e427d79931a8bad81316b797d238cdb3f00000019737761704d756c7469546f6b656e734669786564496e707574000000040000000101000000000000000e5041444157414e2d6131376635380000000c5745474c442d6264346437390000000e5041444157414e2d6131376635380000000c424f4245522d39656237363400000009b6a2880b8b4cd315f00000000000000000050000b4c094947e427d79931a8bad81316b797d238cdb3f00000019737761704d756c7469546f6b656e734669786564496e707574000000040000000101000000000000000e5041444157414e2d6131376635380000000c424f4245522d3965623736340000000c424f4245522d3965623736340000000c5745474c442d6264346437390000000000000000000000000500490c9a6ff1c993e899c9d9df08eecca3f748bd2954830000001473776170546f6b656e734669786564496e707574000000020000000c5745474c442d6264346437390000000101
        limits:
          type: string
          example: >-
            0000000e5041444157414e2d613137663538000000000000000c424f4245522d396562373634000000000000000c5745474c442d626434643739000000082c4d2ef653e8db14
        extraGasLimit:
          type: number
          example: 75000000
        swapAmount:
          type: number
          example: 7551.218815102396
        paymentToken:
          type: string
          example: PADAWAN-a17f58
        bigUintAmount:
          type: string
          example: '7.55121881510239555991e+21'
        original:
          $ref: '#/components/schemas/OriginalDto'
      required:
        - argument
        - limits
        - extraGasLimit
        - swapAmount
        - paymentToken
        - bigUintAmount
        - original
    OtherDataDto:
      type: object
      properties:
        nftCount:
          type: number
          example: 5579
        followCount:
          type: number
          example: 200
        holdersCount:
          type: number
          example: 764
      required:
        - nftCount
        - followCount
        - holdersCount
    StatisticsDto:
      type: object
      properties:
        other:
          $ref: '#/components/schemas/OtherDataDto'
      required:
        - other
    CollectionProfileDto:
      type: object
      properties:
        dataType:
          type: string
          example: collectionProfile
        collection:
          type: string
          example: MICE-a0c447
        name:
          type: string
          example: MiceCity
        description:
          type: string
          example: >-
            Welcome to the 1980s, set in an alternative Miami populated by mice!
            Our collection of 8000 uniquely generated retro mice is the ultimate
            blast from the past, bringing the decade of big hair, excess, pastel
            suits & neon lights to the MultiversX Blockchain!
        isVisible:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: true
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilePicture.webp?ts=1679309756
        banner:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilebanner.webp
        statistics:
          $ref: '#/components/schemas/StatisticsDto'
        owner:
          type: string
          example: erd10ugfytgdndw5qmnykemjfpd7xrjs63f0r2qjhug0ek9gnfdjxq4s8qjvcx
        creator:
          type: string
          example: erd1qqqqqqqqqqqqqpgq2t6ef4u9ts3j86504sx0zlvw0vujfq6yys5sqfg40f
        isMintable:
          type: boolean
          example: true
        hasStaking:
          type: boolean
          example: true
        id:
          type: string
          example: MICE-a0c447-collectionProfile
        socials:
          $ref: '#/components/schemas/SocialsDto'
        type:
          type: string
          example: NonFungibleESDT
        _ts:
          type: number
          example: 1720568178
      required:
        - dataType
        - collection
        - name
        - description
        - isVisible
        - isVerified
        - profile
        - banner
        - statistics
        - owner
        - creator
        - isMintable
        - hasStaking
        - id
        - socials
        - type
        - _ts
    FloorPriceDto:
      type: object
      properties:
        collection:
          type: string
          example: MICE-a0c447
        price:
          type: number
          example: 0.18
        usdPrice:
          type: number
          example: 0.18
      required:
        - collection
        - price
        - usdPrice
    PinnedCollectionDto:
      type: object
      properties:
        collection:
          type: string
          example: EAPES-8f3c1f
        name:
          type: string
          example: EAPES
        isVerified:
          type: boolean
          example: true
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EAPES-8f3c1f/profilePicture.webp?ts=1691359925
        banner:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EAPES-8f3c1f/profilebanner.webp
        description:
          type: string
          example: >-
            EAPES is a collection of 10,000 unique 3D APEs living on the
            MultiversX blockchain
        creator:
          type: string
          example: erd1qqqqqqqqqqqqqpgq7gma4udjeh3mwuq4lmk7wccgh0tenxu6yv5qc2csfy
        isMintable:
          type: boolean
          example: false
      required:
        - collection
        - name
        - isVerified
        - profile
        - banner
        - description
        - creator
    CollectionPinnedStatusDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection ticker
        status:
          type: boolean
          description: Pinned status
      required:
        - collection
        - status
    FollowCollectionDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          description: Indicates if the collection is favorited
          example: true
        collection:
          type: string
          description: Collection followed, empty when unfollow
          example: Mice-213123
      required:
        - isFavorite
    EgldOrEsdtTokenPayment:
      type: object
      properties:
        tokenIdentifier:
          type: string
          example: EGLD
        tokenNonce:
          type: number
          example: 0
        amount:
          type: string
          example: '500000000000000000'
        amountShort:
          type: number
          example: 0.5
        decimals:
          type: number
          example: 18
        usdValue:
          type: number
          example: 18.34
      required:
        - tokenIdentifier
        - tokenNonce
        - amount
        - amountShort
        - decimals
        - usdValue
    CreatorInfoDto:
      type: object
      properties:
        name:
          type: string
          example: Marcel81
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqzty6ekd0dwte8r3d45kt78el9yle5vmkys5sr86uws
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
      required:
        - name
        - contractAddress
        - profile
    DropResourceDto:
      type: object
      properties:
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        startTime:
          type: number
          example: 1720587300
        isSoldOut:
          type: boolean
          example: false
        collectionTag:
          type: string
          example: Nfthero
        collectionSize:
          type: number
          example: 4
        totalNftMinted:
          type: number
          example: 0
        collection:
          type: string
          example: 1000-76443d
        creatorTag:
          type: string
          example: Marcel81
        creatorName:
          type: string
          example: Marcel81
        endTime:
          type: number
          example: 1722401700
        collectionInfo:
          $ref: '#/components/schemas/CollectionInfoDto'
        creatorInfo:
          $ref: '#/components/schemas/CreatorInfoDto'
      required:
        - prices
        - startTime
        - isSoldOut
        - collectionTag
        - collectionSize
        - totalNftMinted
        - collection
        - creatorTag
        - creatorName
        - endTime
        - collectionInfo
        - creatorInfo
    DropsQueryDto:
      type: object
      properties:
        count:
          type: number
          example: null
        hasMoreResults:
          type: boolean
          example: true
        resources:
          type: array
          items:
            $ref: '#/components/schemas/DropResourceDto'
      required:
        - hasMoreResults
        - resources
    MintStageDto:
      type: object
      properties:
        dataType:
          type: string
          example: mintStage
        collection:
          type: string
          example: MICE-a0c447
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgq2t6ef4u9ts3j86504sx0zlvw0vujfq6yys5sqfg40f
        collectionTag:
          type: string
          example: MiceCity
        name:
          type: string
          example: MiceCity
        startTime:
          type: number
          example: 1645210800
        endTime:
          type: number
          example: 0
        mintCount:
          type: number
          example: 5583
        mintLimit:
          type: number
          example: 8000
        mintEnabled:
          type: boolean
          example: true
        isWhitelist:
          type: boolean
          example: false
        walletLimit:
          type: number
          example: 0
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        id:
          type: string
          example: MICE-a0c447-MiceCity-mintStage
        _ts:
          type: number
          example: 1720568180
        walletLimitReached:
          type: boolean
          example: false
        maxBuyable:
          type: number
          example: null
          nullable: true
      required:
        - dataType
        - collection
        - contractAddress
        - collectionTag
        - name
        - startTime
        - endTime
        - mintCount
        - mintLimit
        - mintEnabled
        - isWhitelist
        - walletLimit
        - prices
        - id
        - _ts
        - walletLimitReached
        - maxBuyable
    DropInfoDto:
      type: object
      properties:
        collection:
          type: string
          example: MICE-a0c447
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgq2t6ef4u9ts3j86504sx0zlvw0vujfq6yys5sqfg40f
        collectionTag:
          type: string
          example: MiceCity
        nftTransferLimited:
          type: boolean
          example: false
        hasBotProtection:
          type: boolean
          example: false
        kycRequired:
          type: boolean
          example: false
        totalNftMinted:
          type: number
          example: 5583
        collectionSize:
          type: number
          example: 8000
        cid:
          type: string
          example: QmWEwSi9AhgMPeu4CJfLpWq1yKSfmERZXt76b429pVSU9R
        mediaType:
          type: string
          example: .png
        userMintsGlobal:
          type: number
          example: 0
        globalWalletLimit:
          type: number
          example: 0
        mintStages:
          type: array
          items:
            $ref: '#/components/schemas/MintStageDto'
        collectionInfo:
          $ref: '#/components/schemas/CollectionInfoDto'
        creatorInfo:
          $ref: '#/components/schemas/CreatorInfoDto'
      required:
        - collection
        - contractAddress
        - collectionTag
        - nftTransferLimited
        - hasBotProtection
        - kycRequired
        - totalNftMinted
        - collectionSize
        - cid
        - mediaType
        - userMintsGlobal
        - globalWalletLimit
        - mintStages
        - collectionInfo
        - creatorInfo
    WalletDetailDto:
      type: object
      properties:
        count:
          type: number
          description: Count of NFTs
          example: 4827
        weight:
          type: number
          description: Weight percentage
          example: 86.51
        address:
          type: string
          description: Address of the holder
          example: erd1qqqqqqqqqqqqqpgqvpkd3g3uwludduv3797j54qt6c888wa59w2shntt6z
        username:
          type: string
          description: Username of the holder
          example: 'Staking: XOXNO'
        type:
          type: string
          description: Type of the holder
          example: staking
      required:
        - count
        - weight
        - address
        - username
        - type
    CollectionHoldersDto:
      type: object
      properties:
        totalSupply:
          type: number
          description: Total supply of NFTs
          example: 5580
        walletDetails:
          type: array
          items:
            $ref: '#/components/schemas/WalletDetailDto'
        onMarket:
          type: object
          description: Details of NFTs on market
          example:
            count: 211
            weight: 3.78
        staked:
          type: object
          description: Details of staked NFTs
          example:
            count: 4827
            weight: 86.51
        otherSCs:
          type: object
          description: Details of NFTs in other smart contracts
          example:
            count: 10
            weight: 0.18
        burnWallet:
          type: object
          description: Details of NFTs in burn wallet
          example:
            count: 0
            weight: 0
        uniqueHolders:
          type: object
          description: Details of unique holders
          example:
            count: 764
            weight: 13.69
        holded:
          type: object
          description: Details of holded NFTs
          example:
            count: 532
            weight: 9.53
            avgPerHodler: 2.18
      required:
        - totalSupply
        - walletDetails
        - onMarket
        - staked
        - otherSCs
        - burnWallet
        - uniqueHolders
        - holded
    CollectionOwnerDto:
      type: object
      properties:
        owner:
          type: string
          description: Owner address
          example: erd10ugfytgdndw5qmnykemjfpd7xrjs63f0r2qjhug0ek9gnfdjxq4s8qjvcx
      required:
        - owner
    AttributeDto:
      type: object
      properties:
        trait_type:
          type: string
          example: Divinity
        value:
          type: string
          example: '95'
      required:
        - trait_type
        - value
    OwnerDto:
      type: object
      properties:
        address:
          type: string
          example: erd1xkhvemdwfnn43rhx6vz7yy3pk6hg305qpgaefh9rtdk343dplsvqn7zsam
        profile:
          type: string
          example: >-
            https://media.xoxno.com/userprofile/erd1xkhvemdwfnn43rhx6vz7yy3pk6hg305qpgaefh9rtdk343dplsvqn7zsam/profilePicture.webp
        username:
          type: string
          example: '@sospvp'
      required:
        - address
        - profile
        - username
    ResourceDto:
      type: object
      properties:
        offerId:
          type: number
          example: 156453
        collection:
          type: string
          example: VPRNFT-0a0ee5
        quantity:
          type: number
          example: 1
        paymentToken:
          type: string
          example: EGLD
        paymentTokenNonce:
          type: number
          example: 0
        price:
          type: string
          example: '800000000000000000'
        priceShort:
          type: number
          example: 0.8
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/AttributeDto'
        owner:
          $ref: '#/components/schemas/OwnerDto'
        timestamp:
          type: number
          example: 1688827110
        marketplace:
          type: string
          example: xoxno
        uniqueKey:
          type: string
          example: VPRNFT-0a0ee5-156453-xoxno-globalOffer
        isActive:
          type: boolean
          example: true
        usdValue:
          type: number
          example: 29.143
      required:
        - offerId
        - collection
        - quantity
        - paymentToken
        - paymentTokenNonce
        - price
        - priceShort
        - attributes
        - owner
        - timestamp
        - marketplace
        - uniqueKey
        - isActive
        - usdValue
    GlobalOffersDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceDto'
        hasMoreResults:
          type: boolean
          example: true
      required:
        - resources
        - hasMoreResults
    MintingListingDto:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          default: mintProfile
        collection:
          type: string
        contractAddress:
          type: string
        collectionTag:
          type: string
        creatorTag:
          type: string
        creatorName:
          type: string
        cid:
          type: string
        mediaType:
          type: string
        baseNftName:
          type: string
        hasAttributes:
          type: boolean
        ownerTransferred:
          type: boolean
        collectionSize:
          type: number
        totalNftMinted:
          type: number
        globalWalletLimit:
          type: number
        royalties:
          type: number
        oldVersion:
          type: boolean
        nameShuffle:
          type: boolean
        nftTransferLimited:
          type: boolean
        allowsPublicBurn:
          type: boolean
        kycRequired:
          type: boolean
        allowsRefund:
          type: boolean
        hasBotProtection:
          type: boolean
        hasReveal:
          type: boolean
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        startTime:
          type: object
        endTime:
          type: number
        isSoldOut:
          type: object
        tags:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        id:
          type: string
        _ts:
          type: number
        collectionInfo:
          $ref: '#/components/schemas/CollectionInfoDto'
      required:
        - dataType
        - collection
        - contractAddress
        - collectionTag
        - creatorTag
        - creatorName
        - cid
        - mediaType
        - baseNftName
        - hasAttributes
        - ownerTransferred
        - collectionSize
        - totalNftMinted
        - globalWalletLimit
        - royalties
        - oldVersion
        - nameShuffle
        - nftTransferLimited
        - kycRequired
        - allowsRefund
        - hasBotProtection
        - hasReveal
        - prices
        - startTime
        - endTime
        - isSoldOut
        - tags
        - id
        - _ts
        - collectionInfo
    EventLocationDto:
      type: object
      properties:
        address:
          type: string
        placeId:
          type: string
        lat:
          type: number
          minimum: -90
          maximum: 90
          description: Latitude must be between -90 and 90
        long:
          type: number
          minimum: -180
          maximum: 180
          description: Longitude must be between -180 and 180
        instructions:
          type: string
        onlineLink:
          type: string
      required:
        - address
        - placeId
        - lat
        - long
    EventUserRoleDoc:
      type: object
      properties:
        dataType:
          type: string
          description: Type of the document.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
        eventId:
          type: string
          description: Unique identifier for the event.
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email address
        role:
          type: array
          description: Role of the user.
          items:
            type: string
            enum:
              - event-reader
              - event-manager
              - check-in-manager
        permissions:
          type: array
          description: Permissions of the user.
          items:
            type: string
            enum:
              - event-reader-view
              - event-manager-edit-page
              - event-manager-create-ticket
              - event-manager-edit-ticket
              - event-manager-delete-ticket
              - event-manager-edit-guest
              - event-manager-create-stage
              - event-manager-edit-stage
        createdAt:
          type: number
          description: Timestamp for when the user role was created.
        endTime:
          type: number
          description: Timestamp for when the user role will expire.
        id:
          type: string
          description: Unique identifier for the document.
        status:
          type: string
          description: Status of the user role.
          enum:
            - active
            - pending
      required:
        - dataType
        - eventId
        - wallet
        - name
        - email
        - role
        - permissions
        - createdAt
        - endTime
        - id
        - status
    EventProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of user data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-profile
        creatorAddress:
          type: string
          description: Wallet address of the creator of the event.
        title:
          type: string
          description: Title of the event.
        startTime:
          type: number
          description: Start time of the event as a Unix timestamp in seconds.
        endTime:
          type: number
          description: End time of the event as a Unix timestamp in seconds.
        descriptionUrl:
          type: string
          description: >-
            URL to the markdown file in Azure storage containing the event
            description.
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultEventDescription.md
        location:
          description: >-
            Location details including geo points, address, and optional
            instructions.
          allOf:
            - $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
          description: Define if the event happens in real life or virtual on Zoom/Meet
        slug:
          type: string
          description: Unique slug for the event URL.
        profile:
          type: string
          description: URL to the profile image in Azure storage.
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultProfilePic.webp
        background:
          type: string
          description: URL to the background image in Azure storage, optional.
        registration:
          type: object
          description: >-
            Registration details such as visibility, max capacity, and ticket
            limits.
        contractAddress:
          type: string
          description: The address of the contract that manages the event.
        collection:
          type: string
          description: The NFT collection the event is associated with.
        seo:
          type: object
          description: >-
            SEO-related information such as short description, tags, and
            alternative title.
        id:
          type: string
          description: Automatically generated unique identifier for the event.
        eventPermissions:
          description: Permissions for the event.
          allOf:
            - $ref: '#/components/schemas/EventUserRoleDoc'
      required:
        - dataType
        - creatorAddress
        - title
        - startTime
        - endTime
        - descriptionUrl
        - location
        - isVirtualEvent
        - slug
        - profile
        - registration
        - id
        - eventPermissions
    CreatorDetailsDto:
      type: object
      properties:
        name:
          type: string
          example: MiceCityClub
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgq2t6ef4u9ts3j86504sx0zlvw0vujfq6yys5sqfg40f
        address:
          type: string
          example: erd10ugfytgdndw5qmnykemjfpd7xrjs63f0r2qjhug0ek9gnfdjxq4s8qjvcx
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
        banner:
          type: string
          example: https://media.xoxno.com/utils/defaultBanner.webp
        joinedDate:
          type: number
          example: 1645192020
        creatorTag:
          type: string
          example: MiceCityClub
        listing:
          type: array
          items:
            $ref: '#/components/schemas/MintingListingDto'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventProfileDoc'
      required:
        - name
        - contractAddress
        - address
        - profile
        - banner
        - joinedDate
        - creatorTag
        - listing
        - events
    EditUserCreatorProfileDto:
      type: object
      properties:
        description:
          type: string
          description: User description
          maxLength: 300
          example: I am a creator
        socials:
          description: Social media profiles
          allOf:
            - $ref: '#/components/schemas/SocialsDto'
        name:
          type: string
          description: Creator name
          maxLength: 30
          example: Creator Name
    OriginalMedia:
      type: object
      properties:
        contentType:
          type: string
        contentLength:
          type: number
      required:
        - contentType
        - contentLength
    NftMedia:
      type: object
      properties:
        avifUrl:
          type: string
        webpUrl:
          type: string
        retries:
          type: number
        originalMedia:
          $ref: '#/components/schemas/OriginalMedia'
      required:
        - avifUrl
        - webpUrl
        - retries
        - originalMedia
    NftSaleInfo:
      type: object
      properties:
        auctionId:
          type: number
        seller:
          type: string
        currentWinner:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
        minBid:
          type: string
        maxBid:
          type: string
        currentBid:
          type: string
        startTime:
          type: number
        deadline:
          type: number
        paymentToken:
          type: string
        paymentTokenNonce:
          type: number
        auctionType:
          type: string
        timestamp:
          type: number
        minBidShort:
          type: number
        minBidUsdValue:
          type: number
        maxBidShort:
          type: number
        maxBidUsdValue:
          type: number
        currentBidShort:
          type: number
        quantity:
          type: number
        marketplace:
          type: string
          enum:
            - xoxno
            - frameit
            - deadrare
            - krogan
          example: xoxno
        royalties:
          type: number
          example: 10
          description: This value is the one set by the owner at listing time
      required:
        - auctionId
        - seller
        - minBid
        - maxBid
        - startTime
        - deadline
        - paymentToken
        - paymentTokenNonce
        - auctionType
        - timestamp
        - minBidShort
        - maxBidShort
        - quantity
        - marketplace
        - royalties
    NftStats:
      type: object
      properties:
        likedCount:
          type: number
      required:
        - likedCount
    NftMetadataAttributes:
      type: object
      properties:
        trait_type:
          type: string
          example: Background
        value:
          type: string
          example: Black
      required:
        - trait_type
        - value
    Rarity:
      type: object
      properties:
        rank:
          type: number
          description: The rarity rank of an asset, the smaller represents the rarest
        rarityScore:
          type: number
          description: Rarity score on an asset
      required:
        - rank
    NftMetadata:
      type: object
      properties:
        description:
          type: string
          description: Description of an asset
        attributes:
          description: The list of attributes for this asset
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
        rarity:
          description: The rarity info about an asset
          allOf:
            - $ref: '#/components/schemas/Rarity'
    NFTEventData:
      type: object
      properties:
        eventId:
          type: string
          description: ID of the event associated with this NFT.
        ticketId:
          type: string
          description: Ticket type ID associated with this NFT.
        checkInStatus:
          type: object
          description: Check-in status of the NFT.
          example: false
      required:
        - eventId
        - ticketId
        - checkInStatus
    NftDoc:
      type: object
      properties:
        identifier:
          type: string
          description: Unique identifier of the asset
        collection:
          type: string
          description: Unique collection ID
        originalCollection:
          type: string
          description: >-
            For syntetic NFTs this unique collection represents the underlaying
            collection
        attributes:
          type: string
          description: Base64 attributes
        nonce:
          type: number
          description: The unique number of an asset
        type:
          type: string
          enum:
            - FungibleESDT
            - NonFungibleESDT
            - SemiFungibleESDT
            - MetaESDT
          description: The type of the asset
        supply:
          type: number
          description: >-
            In case of an SFT/MetaESDT we show the total supply minted for this
            unique asset
        name:
          type: string
          description: The name of the asset
        royalties:
          type: number
          description: >-
            The original royalties set by the creator at mint time, to be
            compared with custom settings
        url:
          type: string
          description: The original asset media URL
        uris:
          description: All media URLs of an asset
          type: array
          items:
            type: string
        creator:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The creator profile information
        wasProcessed:
          type: boolean
          default: false
          description: >-
            Indicates if the specific asset has the media processed and
            optimized WEBP/AVIF
        media:
          description: Processed URLs and types of the specific asset
          allOf:
            - $ref: '#/components/schemas/NftMedia'
        currentOwner:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The current owner profile information
        owner:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The owner profile information
        onSale:
          type: boolean
          default: false
          description: Indicates if the specific asset is on sale or not
        isTicket:
          type: boolean
          default: false
          description: Indicates if the specific asset is a ticket
        saleInfo:
          description: When onSale = true, saleInfo keeps the info about the listing
          allOf:
            - $ref: '#/components/schemas/NftSaleInfo'
        statistics:
          description: Statistics about the asset
          allOf:
            - $ref: '#/components/schemas/NftStats'
        metadata:
          description: When onSale = true, saleInfo keeps the info about the listing
          allOf:
            - $ref: '#/components/schemas/NftMetadata'
        eventData:
          description: Event-specific data associated with this NFT.
          allOf:
            - $ref: '#/components/schemas/NFTEventData'
        tags:
          description: A list of hashtags parts of the asset
          type: array
          items:
            type: string
        id:
          type: string
          description: The unique long ID of an asset in our database
      required:
        - identifier
        - collection
        - attributes
        - nonce
        - type
        - name
        - royalties
        - url
        - uris
        - creator
        - wasProcessed
        - media
        - currentOwner
        - owner
        - onSale
        - isTicket
        - statistics
        - eventData
        - tags
        - id
    NftCosmosResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/NftDoc'
        hasMoreResults:
          type: boolean
          example: true
        count:
          type: number
          example: 12
      required:
        - resources
        - hasMoreResults
        - count
    LikeNftDto:
      type: object
      properties:
        isFavorite:
          type: boolean
          description: Is favorite flag
          example: true
        collection:
          type: string
          description: Collection identifier
          example: EAPES-8f3c1f
        identifier:
          type: string
          description: NFT identifier
          example: EAPES-8f3c1f-1047
      required:
        - isFavorite
        - collection
        - identifier
    InventorySummaryDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
        inventoryCount:
          type: number
          description: Number of NFTs in inventory
        listedCount:
          type: number
          description: Number of listed NFTs
        stakedCount:
          type: number
          description: Number of staked NFTs
        floorPrice:
          type: number
          description: Floor price of the collection
        name:
          type: string
          description: Name of the collection
        isVerified:
          type: boolean
          description: Verification status of the collection
        isVisible:
          type: boolean
          description: Visibility status of the collection
        profile:
          type: string
          description: Profile picture URL of the collection
        value:
          type: number
          description: Value of the collection
      required:
        - collection
        - inventoryCount
        - listedCount
        - stakedCount
        - floorPrice
        - name
        - isVerified
        - isVisible
        - profile
        - value
    NftInfoDto:
      type: object
      properties:
        identifier:
          type: string
          example: HLSR-374950-1934
        nonce:
          type: number
          example: 6452
        name:
          type: string
          example: 37.43 EGLD
        url:
          type: string
          example: >-
            https://arweave.net/mfjIHO6ckE8m1ck_b46BdV4ZFVGEEHJSno2MnFKuzgk/undelegate-nft.png
        wasProcessed:
          type: boolean
          example: true
        media:
          type: object
          example:
            avifUrl: https://media.xoxno.com/nftmedia/HLSR-374950/receipt.avif
            webpUrl: https://media.xoxno.com/nftmedia/HLSR-374950/receipt.webp
            originalMedia:
              contentLength: 2639394
              contentType: image/png
        onSale:
          type: boolean
          example: false
        saleInfo:
          type: object
          example: {}
        metadata:
          type: object
          example:
            rarity:
              rank: 202
        owner:
          example:
            address: erd1vdr8jnyhp0wlk3cwe2j5ejwkzwepexqgtnqxanravgv0d6vg59dqnfkjmm
            profile: >-
              https://media.xoxno.com/userprofile/erd1vdr8jnyhp0wlk3cwe2j5ejwkzwepexqgtnqxanravgv0d6vg59dqnfkjmm/profilePicture.webp
            username: '@xtrading'
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        currentOwner:
          example:
            address: erd1vdr8jnyhp0wlk3cwe2j5ejwkzwepexqgtnqxanravgv0d6vg59dqnfkjmm
            profile: >-
              https://media.xoxno.com/userprofile/erd1vdr8jnyhp0wlk3cwe2j5ejwkzwepexqgtnqxanravgv0d6vg59dqnfkjmm/profilePicture.webp
            username: '@xtrading'
          allOf:
            - $ref: '#/components/schemas/OwnerDto'
        receiverIsNotOwner:
          type: boolean
          example: true
      required:
        - identifier
        - nonce
        - name
        - url
        - wasProcessed
        - media
        - onSale
        - saleInfo
        - metadata
        - owner
        - currentOwner
        - receiverIsNotOwner
    OfferDto:
      type: object
      properties:
        isActive:
          type: boolean
          example: true
        identifier:
          type: string
          example: HLSR-374950-1934
        collection:
          type: string
          example: HLSR-374950
        offerId:
          type: number
          example: 336875
        paymentToken:
          type: string
          example: EGLD
        paymentTokenNonce:
          type: number
          example: 0
        price:
          type: string
          example: '36700000000000000000'
        priceShort:
          type: number
          example: 36.7
        deadline:
          type: number
          example: 1721220240
        timestamp:
          type: number
          example: 1720615494
        owner:
          $ref: '#/components/schemas/OwnerDto'
        quantity:
          type: number
          example: 1
        marketplace:
          type: string
          example: xoxno
        usdValue:
          type: number
          example: 1323.373
        floorPriceMargin:
          type: number
          example: -1.95
        floorPrice:
          type: number
          example: 1
        nftInfo:
          $ref: '#/components/schemas/NftInfoDto'
      required:
        - isActive
        - identifier
        - collection
        - offerId
        - paymentToken
        - paymentTokenNonce
        - price
        - priceShort
        - deadline
        - timestamp
        - owner
        - quantity
        - marketplace
        - usdValue
        - floorPriceMargin
        - floorPrice
        - nftInfo
    GetUserOffersResponseDto:
      type: object
      properties:
        count:
          type: number
          example: 11
        hasMoreResults:
          type: boolean
          example: false
        resources:
          type: array
          items:
            $ref: '#/components/schemas/OfferDto'
      required:
        - count
        - hasMoreResults
        - resources
    GetSingleNftOfferResponseDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/OfferDto'
        hasMoreResults:
          type: boolean
          example: false
      required:
        - resources
        - hasMoreResults
    CollectionRanksDTO:
      type: object
      properties:
        identifier:
          type: string
          example: MICE-a0c447-0b99
        name:
          type: string
          example: 'MiceCity #2969'
        rank:
          type: number
          example: 1
      required:
        - identifier
        - name
        - rank
    DensityDto:
      type: object
      properties:
        key:
          type: string
          example: '0.180'
        intervalName:
          type: string
          example: 0.180 - 0.180
        intervalCount:
          type: number
          example: 0
        totalCount:
          type: number
          example: 0
      required:
        - key
        - intervalName
        - intervalCount
        - totalCount
    RarityDto:
      type: object
      properties:
        rank:
          type: number
          example: 3769
      required:
        - rank
    MetadataDto:
      type: object
      properties:
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
    MediaDto:
      type: object
      properties:
        avifUrl:
          type: string
          example: https://media.xoxno.com/nftmedia/HLSR-374950/receipt.avif
        webpUrl:
          type: string
          example: https://media.xoxno.com/nftmedia/HLSR-374950/receipt.webp
        originalMedia:
          type: object
          example:
            contentLength: 2639394
            contentType: image/png
      required:
        - avifUrl
        - webpUrl
        - originalMedia
    SaleInfoDto:
      type: object
      properties:
        minBidShort:
          type: number
          example: 0.18
        marketplace:
          type: string
          example: xoxno
      required:
        - minBidShort
        - marketplace
    ListingDto:
      type: object
      properties:
        identifier:
          type: string
          example: MICE-a0c447-10fd
        name:
          type: string
          example: 'MiceCity #4349'
        collection:
          type: string
          example: MICE-a0c447
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        url:
          type: string
          example: >-
            https://media.elrond.com/nfts/asset/QmWEwSi9AhgMPeu4CJfLpWq1yKSfmERZXt76b429pVSU9R/2287.png
        media:
          $ref: '#/components/schemas/MediaDto'
        wasProcessed:
          type: boolean
          example: true
        saleInfo:
          $ref: '#/components/schemas/SaleInfoDto'
      required:
        - identifier
        - name
        - collection
        - metadata
        - url
        - media
        - wasProcessed
        - saleInfo
    ListingsResponseDto:
      type: object
      properties:
        density:
          type: array
          items:
            $ref: '#/components/schemas/DensityDto'
        listings:
          type: array
          items:
            $ref: '#/components/schemas/ListingDto'
      required:
        - density
        - listings
    CollectionExtraFeesConfig:
      type: object
      properties:
        amount:
          type: number
        address:
          type: string
      required:
        - amount
        - address
    XoxnoMarketplaceScCollectionConfig:
      type: object
      properties:
        reversedCutFees:
          type: object
          default: false
        reversedRoyalties:
          type: object
          default: false
        customRoyalties:
          type: object
          default: false
        minRoyalties:
          type: object
          default: 0
        maxRoyalties:
          type: object
          default: 0
        extraFees:
          $ref: '#/components/schemas/CollectionExtraFeesConfig'
        adminAddress:
          type: string
      required:
        - reversedCutFees
        - reversedRoyalties
        - customRoyalties
        - minRoyalties
        - maxRoyalties
    CollectionProfileSummary:
      type: object
      properties:
        name:
          type: string
          example: MiceCity
        profile:
          type: string
          example: MiceCity
        owner:
          type: string
        banner:
          type: string
        socials:
          $ref: '#/components/schemas/SocialsDto'
        isVerified:
          type: boolean
        isVisible:
          type: boolean
        collectionSize:
          type: number
        description:
          type: string
        followCount:
          type: number
        holdersCount:
          type: number
        customConfig:
          $ref: '#/components/schemas/XoxnoMarketplaceScCollectionConfig'
        roles:
          type: object
      required:
        - name
        - profile
        - socials
    NftProps:
      type: object
      properties:
        identifier:
          type: string
          description: Unique identifier of the asset
        collection:
          type: string
          description: Unique collection ID
        originalCollection:
          type: string
          description: >-
            For syntetic NFTs this unique collection represents the underlaying
            collection
        attributes:
          type: string
          description: Base64 attributes
        nonce:
          type: number
          description: The unique number of an asset
        type:
          type: string
          enum:
            - FungibleESDT
            - NonFungibleESDT
            - SemiFungibleESDT
            - MetaESDT
          description: The type of the asset
        supply:
          type: number
          description: >-
            In case of an SFT/MetaESDT we show the total supply minted for this
            unique asset
        name:
          type: string
          description: The name of the asset
        royalties:
          type: number
          description: >-
            The original royalties set by the creator at mint time, to be
            compared with custom settings
        url:
          type: string
          description: The original asset media URL
        uris:
          description: All media URLs of an asset
          type: array
          items:
            type: string
        creator:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The creator profile information
        wasProcessed:
          type: boolean
          default: false
          description: >-
            Indicates if the specific asset has the media processed and
            optimized WEBP/AVIF
        media:
          description: Processed URLs and types of the specific asset
          allOf:
            - $ref: '#/components/schemas/NftMedia'
        currentOwner:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The current owner profile information
        owner:
          oneOf:
            - type: string
            - $ref: '#/components/schemas/OwnerDto'
          description: The owner profile information
        onSale:
          type: boolean
          default: false
          description: Indicates if the specific asset is on sale or not
        isTicket:
          type: boolean
          default: false
          description: Indicates if the specific asset is a ticket
        saleInfo:
          description: When onSale = true, saleInfo keeps the info about the listing
          allOf:
            - $ref: '#/components/schemas/NftSaleInfo'
        statistics:
          description: Statistics about the asset
          allOf:
            - $ref: '#/components/schemas/NftStats'
        metadata:
          description: When onSale = true, saleInfo keeps the info about the listing
          allOf:
            - $ref: '#/components/schemas/NftMetadata'
        eventData:
          description: Event-specific data associated with this NFT.
          allOf:
            - $ref: '#/components/schemas/NFTEventData'
        tags:
          description: A list of hashtags parts of the asset
          type: array
          items:
            type: string
        id:
          type: string
          description: The unique long ID of an asset in our database
        receiverIsNotOwner:
          type: boolean
        balance:
          type: number
          description: Balance owned by the user
        unboundDaysLeft:
          type: number
          description: Left days until the staked NFT can be claimed back
        unboundEpoch:
          type: number
          description: The epoch day when the NFT will be available for claiming
        collectionInfo:
          description: The extra information about the collection of this specific NFT
          allOf:
            - $ref: '#/components/schemas/CollectionProfileSummary'
        extraProperties:
          type: object
          description: Extra props for the specific NFT
      required:
        - identifier
        - collection
        - attributes
        - nonce
        - type
        - name
        - royalties
        - url
        - uris
        - creator
        - wasProcessed
        - media
        - currentOwner
        - owner
        - onSale
        - isTicket
        - statistics
        - eventData
        - tags
        - id
    SignWithdrawDto:
      type: object
      properties:
        auctionId:
          description: Array of auction IDs that have to be signed
          example:
            - 123123
            - 15555
          type: array
          items:
            type: number
      required:
        - auctionId
    SignDataDto:
      type: object
      properties:
        data:
          type: string
          example: hex-encoded-data
        signature:
          type: string
          example: hex-encoded-signature
      required:
        - data
        - signature
    SignAcceptGlobalOfferDto:
      type: object
      properties:
        offerId:
          type: number
          example: 1233
          description: The offer ID that has to be removed
        identifier:
          example:
            - ABC-asdasd-01
          description: The unique identifiers that will be sold
          type: array
          items:
            type: string
      required:
        - offerId
        - identifier
    SignMintDto:
      type: object
      properties:
        quantity:
          type: number
          description: The quantity of the requested mint amount
        stage:
          type: string
          description: The stage unique name
      required:
        - quantity
        - stage
    Reward:
      type: object
      properties:
        tokenIdentifier:
          type: string
          description: Token identifier
          example: RARE-99e8b0
        tokenNonce:
          type: number
          description: Token nonce
          example: 0
        rewardBalance:
          type: string
          description: Reward balance
          example: '322605500000000000000000'
        rewardBalanceShort:
          type: number
          description: Short reward balance
          example: 322605.5
        rewardPerEpochShort:
          type: number
          description: Reward per epoch short
          example: 8000
        rewardPerDayPerNft:
          type: number
          description: Reward per day per NFT
          example: 1
        usdValue:
          type: number
          description: USD value
          example: 27.64023234925034
      required:
        - tokenIdentifier
        - tokenNonce
        - rewardBalance
        - rewardBalanceShort
        - rewardPerEpochShort
        - rewardPerDayPerNft
        - usdValue
    StakingSummary:
      type: object
      properties:
        poolId:
          type: number
          description: Pool ID
          example: 3
        name:
          type: string
          description: Pool name
          example: SRB - MiceCity
        description:
          type: string
          description: Pool description
          example: The largest staking pool
        stakingEnabled:
          type: boolean
          description: Staking enabled
          example: true
        profile:
          type: string
          description: Profile picture URL
          example: >-
            https://media.xoxno.com/stakingpools/3/stakingPoolPicture_3.webp?_ts=1716838395
        collection:
          description: Collection identifiers
          example:
            - MICE-a0c447
            - SRB-61daf7
          type: array
          items:
            type: string
        poolStakedCount:
          type: number
          description: Pool staked count
          example: 5895
        userStakedCount:
          type: number
          description: User staked count
          example: 0
        delegatorCount:
          type: number
          description: Delegator count
          example: 267
        rewardDuration:
          type: number
          description: Reward duration in days
          example: 63
        poolReward:
          description: Pool reward details
          type: array
          items:
            $ref: '#/components/schemas/Reward'
        userReward:
          description: User reward details
          type: array
          items:
            $ref: '#/components/schemas/Reward'
        poolType:
          type: string
          description: Pool type
          example: Duo
        issuingType:
          type: string
          description: Issuing type
          example: Fixed
        unBoundPeriod:
          type: number
          description: Unbound period in days
          example: 0
        hasUnboundPeriod:
          type: boolean
          description: Has unbound period
          example: false
        maxPoolLimit:
          type: number
          description: Max pool limit
          example: 16000
        hasMaxWalletLimit:
          type: boolean
          description: Has max wallet limit
          example: true
        maxWalletLimit:
          type: number
          description: Max wallet limit
          example: 8000
        startEpoch:
          type: number
          description: Start epoch
          example: 1381
        endEpoch:
          type: number
          description: End epoch
          example: 1444
        owner:
          type: string
          description: Pool owner address
          example: erd13sj3r6xuh708nhv6t5tqquznwcve4nhaghwdz9lac0zpmw0qe0hqysg4w6
        currentEpoch:
          type: number
          description: Current epoch
          example: 1442
        isActive:
          type: boolean
          description: Is active flag
          example: true
        daysLeft:
          type: number
          description: Days left for staking
          example: 2
        cutFee:
          type: number
          description: Cut fee percentage
          example: 0
        percentageFilled:
          type: number
          description: Percentage filled
          example: 36.84375
      required:
        - poolId
        - name
        - description
        - stakingEnabled
        - profile
        - collection
        - poolStakedCount
        - userStakedCount
        - delegatorCount
        - rewardDuration
        - poolReward
        - userReward
        - poolType
        - issuingType
        - unBoundPeriod
        - hasUnboundPeriod
        - maxPoolLimit
        - hasMaxWalletLimit
        - maxWalletLimit
        - startEpoch
        - endEpoch
        - owner
        - currentEpoch
        - isActive
        - daysLeft
        - cutFee
        - percentageFilled
    StakingPostDTO:
      type: object
      properties:
        name:
          type: string
          description: Pool name
          example: SRB - MiceCity
        description:
          type: string
          description: Pool description
          example: The largest staking pool
      required:
        - name
        - description
    OwnedCollectionsDto:
      type: object
      properties:
        registered:
          description: List of registered collections
          example:
            - EGIRL-443b95
            - MONKEY-ac9bdf
            - BLZ-1d0442
            - MAFIALEGEN-826144
          type: array
          items:
            type: string
        availableForRegister:
          description: List of collections available for registration
          example:
            - XOXNO-a52799
          type: array
          items:
            type: string
      required:
        - registered
        - availableForRegister
    RewardDto:
      type: object
      properties:
        tokenIdentifier:
          type: string
          description: Token identifier
          example: WXMEX-794dbd
        tokenNonce:
          type: number
          description: Token nonce
          example: 0
        amount:
          type: string
          description: Amount of reward
          example: '140649439520333680917622'
        amountShort:
          type: number
          description: Short amount of reward
          example: 140649.4395
        usdValue:
          type: number
          description: USD value of reward
          example: 0.6295776701542604
      required:
        - tokenIdentifier
        - tokenNonce
        - amount
        - amountShort
        - usdValue
    UserStakingSummaryDto:
      type: object
      properties:
        collection:
          type: string
          description: Collection identifier
          example: MICE-a0c447
        stakedCount:
          type: number
          description: Number of staked items
          example: 21
        name:
          type: string
          description: Name of the collection
          example: MiceCity
        isVerified:
          type: boolean
          description: Verification status
          example: true
        profile:
          type: string
          description: Profile image URL
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilePicture.webp?ts=1679309756
        banner:
          type: string
          description: Banner image URL
          example: >-
            https://media.xoxno.com/collectionprofile/MICE-a0c447/profilebanner.webp
        reward:
          description: Rewards information
          type: array
          items:
            $ref: '#/components/schemas/RewardDto'
      required:
        - collection
        - stakedCount
        - name
        - isVerified
        - profile
        - banner
        - reward
    StakingCreatorDoc:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - pool
            - delegator
            - creator
          default: creator
        address:
          type: string
        ownedPools:
          type: array
          items:
            type: number
        ownedCollections:
          type: array
          items:
            type: string
        cutFee:
          type: number
        id:
          type: string
        pk:
          type: string
      required:
        - dataType
        - address
        - ownedPools
        - ownedCollections
        - cutFee
    StakingUserPoolNfts:
      type: object
      properties:
        poolInfo:
          $ref: '#/components/schemas/StakingSummary'
        nftDocs:
          type: array
          items:
            $ref: '#/components/schemas/NftProps'
        count:
          type: number
          example: 12
      required:
        - poolInfo
        - nftDocs
        - count
    StakingExploreDto:
      type: object
      properties:
        collection:
          type: string
        activePools:
          type: number
        totalPoolStakedCount:
          type: number
        totalDelegatorCount:
          type: number
        rewardTickers:
          type: array
          items:
            type: string
        collectionInfo:
          $ref: '#/components/schemas/CollectionInfoDto'
      required:
        - collection
        - activePools
        - totalPoolStakedCount
        - totalDelegatorCount
        - rewardTickers
        - collectionInfo
    CollectionMintProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          default: mintProfile
        collection:
          type: string
        contractAddress:
          type: string
        collectionTag:
          type: string
        creatorTag:
          type: string
        creatorName:
          type: string
        cid:
          type: string
        mediaType:
          type: string
        baseNftName:
          type: string
        hasAttributes:
          type: boolean
        ownerTransferred:
          type: boolean
        collectionSize:
          type: number
        totalNftMinted:
          type: number
        globalWalletLimit:
          type: number
        royalties:
          type: number
        oldVersion:
          type: boolean
        nameShuffle:
          type: boolean
        nftTransferLimited:
          type: boolean
        allowsPublicBurn:
          type: boolean
        kycRequired:
          type: boolean
        allowsRefund:
          type: boolean
        hasBotProtection:
          type: boolean
        hasReveal:
          type: boolean
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        startTime:
          type: object
        endTime:
          type: number
        isSoldOut:
          type: object
        tags:
          oneOf:
            - type: string
            - type: array
              items:
                type: string
        id:
          type: string
        _ts:
          type: number
      required:
        - dataType
        - collection
        - contractAddress
        - collectionTag
        - creatorTag
        - creatorName
        - cid
        - mediaType
        - baseNftName
        - hasAttributes
        - ownerTransferred
        - collectionSize
        - totalNftMinted
        - globalWalletLimit
        - royalties
        - oldVersion
        - nameShuffle
        - nftTransferLimited
        - kycRequired
        - allowsRefund
        - hasBotProtection
        - hasReveal
        - prices
        - startTime
        - endTime
        - isSoldOut
        - tags
        - id
        - _ts
    OwnedServicesDto:
      type: object
      properties:
        mintProfiles:
          type: array
          items:
            $ref: '#/components/schemas/CollectionMintProfileDoc'
        stakingPools:
          type: array
          items:
            $ref: '#/components/schemas/StakingSummary'
        events:
          type: array
          items:
            $ref: '#/components/schemas/EventProfileDoc'
        creatorProfile:
          $ref: '#/components/schemas/CreatorProfileDto'
        address:
          type: string
          example: erd1312
      required:
        - mintProfiles
        - stakingPools
        - events
        - creatorProfile
        - address
    Web2UserWallet:
      type: object
      properties:
        type:
          type: string
          enum:
            - wallet
            - passkey
            - google_oauth
            - apple_oauth
          default: wallet
        address:
          type: string
          description: Wallet address
        index:
          type: number
          description: Wallet index
        signature:
          type: string
          description: Signature for the wallet
        chain:
          type: string
          description: Blockchain network
        walletClientType:
          type: string
          enum:
            - xoxno
            - xPortal
            - webwallet
            - maiar_v2
            - ledger
            - extension
            - native
          description: Type of wallet client
        recoveryMethod:
          type: string
          description: Method used for wallet recovery
        id:
          type: string
          description: Unique identifier for the wallet
          default: auto-generated UUID
      required:
        - type
        - address
        - chain
        - walletClientType
    Web2UserAccount:
      type: object
      properties:
        type:
          type: string
          enum:
            - wallet
            - passkey
            - google_oauth
            - apple_oauth
          description: Type of linked account
          example: google_oauth
        subject:
          type: string
          description: User ID from the provider
          example: '123456789'
        name:
          type: string
          description: User's name
          example: John Doe
        profilePicture:
          type: string
          description: URL of the user's profile picture
          example: https://example.com/profile.jpg
        email:
          type: string
          description: User's email address
          example: john.doe@example.com
        username:
          type: string
          description: User's username
          example: johndoe123
      required:
        - type
        - subject
    Web2UserDoc:
      type: object
      properties:
        createdOn:
          type: number
          description: Timestamp of user creation
        id:
          type: string
          description: Unique identifier for the user
        linkedAccounts:
          description: Array of linked accounts (Web2UserWallet or Web2UserAccount)
          type: array
          items:
            type: object
        shards:
          description: Array of shard identifiers
          type: array
          items:
            type: string
        hasNativeWallet:
          type: object
          default: false
          description: Indicates if the user has a native wallet
        wallet:
          description: User's wallet information
          allOf:
            - $ref: '#/components/schemas/Web2UserWallet'
        google:
          description: User's Google account information
          allOf:
            - $ref: '#/components/schemas/Web2UserAccount'
        apple:
          description: User's Apple account information
          allOf:
            - $ref: '#/components/schemas/Web2UserAccount'
        pk:
          type: string
          description: Primary key for the user document
        _ts:
          type: number
          description: Timestamp of the last update
      required:
        - createdOn
        - id
        - linkedAccounts
        - shards
        - hasNativeWallet
        - pk
    Web2WalletDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - wallet
            - passkey
            - google_oauth
            - apple_oauth
          description: Type of linked account
        address:
          type: string
          description: Wallet address
        chain:
          type: string
          description: Blockchain network
        signature:
          type: string
          description: Signature for authentication
        authToken:
          type: string
          description: Authentication token
        walletClientType:
          type: string
          enum:
            - xoxno
            - xPortal
            - webwallet
            - maiar_v2
            - ledger
            - extension
            - native
          description: Type of wallet client
        index:
          type: number
          description: Index of the wallet
        recoveryMethod:
          type: string
          description: Method used for wallet recovery
      required:
        - type
        - address
        - chain
        - walletClientType
    NativeWalletDto:
      type: object
      properties:
        shards:
          description: Array of wallet shards
          minItems: 4
          maxItems: 4
          example:
            - shard1
            - shard2
            - shard3
            - shard4
          type: array
          items:
            type: string
        wallet:
          description: Web2 wallet information
          allOf:
            - $ref: '#/components/schemas/Web2WalletDto'
      required:
        - shards
        - wallet
    Web2UserShardsDto:
      type: object
      properties:
        shards:
          description: Shards of the user
          type: array
          items:
            type: string
      required:
        - shards
    FromToDto:
      type: object
      properties:
        address:
          type: string
          example: erd1p98x64g8642n6sykjcs64fm69ll92tj7a204tadcn3d92a8gqx7sgn6hks
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
        username:
          type: string
          example: erd1...6hks
      required:
        - address
        - profile
        - username
    ActivityDataDto:
      type: object
      properties:
        collection:
          type: string
          example: EBMC-8a2d40
        identifier:
          type: string
          example: EBMC-8a2d40-0ad0
        price:
          type: number
          example: 0.05
        paymentToken:
          type: string
          example: EGLD
        quantity:
          type: number
          example: 1
        scId:
          type: number
          example: 489392
        usdValue:
          type: number
          example: 1.6446
        egldValue:
          type: number
          example: 0.05
        auctionType:
          type: string
          example: Nft
        nftInfo:
          $ref: '#/components/schemas/NftInfoDto'
        collectionInfo:
          $ref: '#/components/schemas/CollectionInfoDto'
      required:
        - collection
        - identifier
        - price
        - paymentToken
        - quantity
        - scId
        - usdValue
        - egldValue
        - auctionType
        - nftInfo
        - collectionInfo
    ActivityBodyDto:
      type: object
      properties:
        txHash:
          type: string
          example: 0ee3f1f8effcfa49e0b397cae16e24382087581da5c9f47a64a071e7e5dd2cb4
        eventIdentifier:
          type: string
          example: listing
        timestamp:
          type: number
          example: 1672531200
        activityType:
          type: string
          example: listingCreate
        source:
          type: string
          example: xoxno
        from:
          $ref: '#/components/schemas/FromToDto'
        to:
          $ref: '#/components/schemas/FromToDto'
        activityData:
          $ref: '#/components/schemas/ActivityDataDto'
      required:
        - txHash
        - eventIdentifier
        - timestamp
        - activityType
        - source
        - from
        - to
        - activityData
    ActivityHistoryDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ActivityBodyDto'
        hasMoreResults:
          type: boolean
          example: true
      required:
        - resources
        - hasMoreResults
    AnalyticsVolumeDto:
      type: object
      properties:
        marketplace:
          type: string
          example: xoxno
        timestamp:
          example:
            - '2024-07-04T00:00:00.0000000Z'
            - '2024-07-05T00:00:00.0000000Z'
          type: array
          items:
            type: string
        totalEgldVolume:
          example:
            - 169.92
            - 189.7
          type: array
          items:
            type: string
        totalUsdVolume:
          example:
            - 5166.86
            - 5849.23
          type: array
          items:
            type: string
        totalTrades:
          example:
            - 254
            - 290
          type: array
          items:
            type: string
        floorPrice:
          example: []
          type: array
          items:
            type: string
        athPrice:
          example: []
          type: array
          items:
            type: string
        avgPrice:
          example: []
          type: array
          items:
            type: string
      required:
        - marketplace
        - timestamp
        - totalEgldVolume
        - totalUsdVolume
        - totalTrades
        - floorPrice
        - athPrice
        - avgPrice
    AnalyticsVolumeResponseDto:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/AnalyticsVolumeDto'
      required:
        - resources
    TransactionDetailsDto:
      type: object
      properties:
        price:
          type: number
          example: 0
        txHash:
          type: string
          example: 7bb66ddd5682070b42c6d4a77acc2920ad21680ad73a75a2a531dfed888c6bed
        timestamp:
          type: number
          example: 1642719714
        identifier:
          type: string
          example: BANANA-e955fd-05a0
      required:
        - price
        - txHash
        - timestamp
        - identifier
    AveragePriceDto:
      type: object
      properties:
        price:
          type: number
          example: 0.225
      required:
        - price
    AnalyticsDto:
      type: object
      properties:
        count:
          type: number
          example: 141
        volume:
          type: number
          example: 31.758
        min:
          $ref: '#/components/schemas/TransactionDetailsDto'
        max:
          $ref: '#/components/schemas/TransactionDetailsDto'
        avg:
          $ref: '#/components/schemas/AveragePriceDto'
      required:
        - count
        - volume
        - min
        - max
        - avg
    UserAnalyticsDto:
      type: object
      properties:
        Purchase:
          $ref: '#/components/schemas/AnalyticsDto'
        Sale:
          $ref: '#/components/schemas/AnalyticsDto'
      required:
        - Purchase
        - Sale
    GlobalAnalyticsOverviewResponseDto:
      type: object
      properties:
        userCount:
          type: number
          example: 138418
        listingsCount:
          type: number
          example: 185538
        tradingStats:
          $ref: '#/components/schemas/TradingStatsDto'
      required:
        - userCount
        - listingsCount
        - tradingStats
    PriceDataDto:
      type: object
      properties:
        price:
          type: number
          description: Price of the NFT
        timestamp:
          type: number
          description: Timestamp of the transaction
        identifier:
          type: string
          description: NFT identifier
        txHash:
          type: string
          description: Transaction hash
        usdValue:
          type: number
          description: USD value of the transaction
        nftInfo:
          description: NFT information
          allOf:
            - $ref: '#/components/schemas/NftInfoDto'
      required:
        - price
        - timestamp
        - identifier
        - txHash
        - usdValue
        - nftInfo
    UserStatsDto:
      type: object
      properties:
        wallet:
          description: User wallet information
          allOf:
            - $ref: '#/components/schemas/WalletDto'
        totalVolume:
          type: number
          description: Total trading volume
        totalTrades:
          type: number
          description: Total number of trades
        totalCollections:
          type: number
          description: Total number of collections
        totalNfts:
          type: number
          description: Total number of NFTs
        totalPartners:
          type: number
          description: Total number of partners
        buyerVolume:
          type: number
          description: Buyer volume
        buyerTrades:
          type: number
          description: Buyer trades
        buyerNfts:
          type: number
          description: Buyer NFTs
        buyerCollections:
          type: number
          description: Buyer collections
        buyerPartners:
          type: number
          description: Buyer partners
        buyerMaxPriceData:
          description: Buyer maximum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        buyerMinPriceData:
          description: Buyer minimum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        sellerVolume:
          type: number
          description: Seller volume
        sellerTrades:
          type: number
          description: Seller trades
        sellerNfts:
          type: number
          description: Seller NFTs
        sellerCollections:
          type: number
          description: Seller collections
        sellerPartners:
          type: number
          description: Seller partners
        sellerMaxPriceData:
          description: Seller maximum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
        sellerMinPriceData:
          description: Seller minimum price data
          allOf:
            - $ref: '#/components/schemas/PriceDataDto'
      required:
        - wallet
        - totalVolume
        - totalTrades
        - totalCollections
        - totalNfts
        - totalPartners
        - buyerVolume
        - buyerTrades
        - buyerNfts
        - buyerCollections
        - buyerPartners
        - buyerMaxPriceData
        - buyerMinPriceData
        - sellerVolume
        - sellerTrades
        - sellerNfts
        - sellerCollections
        - sellerPartners
        - sellerMaxPriceData
        - sellerMinPriceData
    GetUsersStatsResponseDto:
      type: object
      properties:
        usersStats:
          description: List of user stats
          type: array
          items:
            $ref: '#/components/schemas/UserStatsDto'
      required:
        - usersStats
    TransactionProcessStatus:
      type: object
      properties:
        reason:
          type: object
          description: The error reason
          default: ''
        status:
          type: string
          description: The status of the transaction
          enum:
            - success
            - pending
            - invalid
            - fail
            - notFound
      required:
        - reason
        - status
    TransactionCreate:
      type: object
      properties:
        chainId:
          type: string
          description: The chain ID
        data:
          type: object
          description: The transaction data
        gasLimit:
          type: number
          description: The gas limit for the transaction
        gasPrice:
          type: number
          description: The gas price for the transaction
        nonce:
          type: number
          description: The nonce for the transaction
        receiver:
          type: string
          description: The receiver address
        receiverUsername:
          type: string
          description: The receiver username
        sender:
          type: string
          description: The sender address
        senderUsername:
          type: string
          description: The sender username
        signature:
          type: string
          description: The signature of the transaction
        value:
          type: string
          description: The value of the transaction
        version:
          type: number
          description: The version of the transaction
        options:
          type: number
          description: Optional transaction options
        guardian:
          type: string
          description: Optional guardian address
        guardianSignature:
          type: string
          description: Optional guardian signature
      required:
        - chainId
        - data
        - gasLimit
        - gasPrice
        - nonce
        - receiver
        - sender
        - signature
        - value
        - version
    TransactionSendResult:
      type: object
      properties:
        receiver:
          type: string
          description: The receiver address
        receiverShard:
          type: number
          description: The shard of the receiver
        sender:
          type: string
          description: The sender address
        senderShard:
          type: number
          description: The shard of the sender
        status:
          type: string
          description: The status of the transaction
          enum:
            - success
            - pending
            - invalid
            - fail
            - notFound
        txHash:
          type: string
          description: The transaction hash
      required:
        - receiver
        - receiverShard
        - sender
        - senderShard
        - status
        - txHash
    BatchTransactionResponse:
      type: object
      properties:
        status:
          type: string
          description: The status of the transaction
          enum:
            - success
            - pending
            - invalid
            - fail
            - notFound
        txHash:
          type: string
          description: The transaction hash
      required:
        - status
        - txHash
    CollectionDto:
      type: object
      properties:
        collection:
          type: string
          example: EAPES-8f3c1f
        name:
          type: string
          example: EAPES
        isVisible:
          type: boolean
          example: true
        isVerified:
          type: boolean
          example: true
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/EAPES-8f3c1f/profilePicture.webp?ts=1691359925
        type:
          type: string
          example: NonFungibleESDT
        statistics:
          $ref: '#/components/schemas/StatisticsDto'
        floorPrice:
          type: number
          example: 3.1
      required:
        - collection
        - name
        - isVisible
        - isVerified
        - profile
        - type
        - statistics
        - floorPrice
    UserDto:
      type: object
      properties:
        address:
          type: string
          example: erd10hsfh2xhn4qzatc0vguxgfdu8aegurnep7zzyg0ht9ddw50g5xfq8ccu4q
        herotag:
          type: string
          example: erd1...cu4q
        isVerified:
          type: boolean
          example: false
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
        isCreator:
          type: boolean
          example: true
        addressTrimmed:
          type: string
          example: erd1...cu4q
      required:
        - address
        - herotag
        - isVerified
        - profile
        - isCreator
        - addressTrimmed
    CreatorDto:
      type: object
      properties:
        address:
          type: string
          example: erd10hsfh2xhn4qzatc0vguxgfdu8aegurnep7zzyg0ht9ddw50g5xfq8ccu4q
        herotag:
          type: string
          example: erd1...cu4q
        addressTrimmed:
          type: string
          example: erd1...cu4q
        isCreator:
          type: boolean
          example: true
        contractAddress:
          type: string
          example: erd1qqqqqqqqqqqqqpgqfnmr778ef8z9mk79rcwzwdhywraahs7hys5sute79u
        name:
          type: string
          example: Ep1xStudio
        creatorTag:
          type: string
          example: Ep1xStudio
        joinedDate:
          type: number
          example: 1643145426
        profile:
          type: string
          example: https://media.xoxno.com/utils/defaultProfilePic.webp
      required:
        - address
        - herotag
        - addressTrimmed
        - isCreator
        - contractAddress
        - name
        - creatorTag
        - joinedDate
        - profile
    GlobalSearchResourcesDto:
      type: object
      properties:
        collections:
          type: array
          items:
            $ref: '#/components/schemas/CollectionDto'
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserDto'
        creators:
          type: array
          items:
            $ref: '#/components/schemas/CreatorDto'
        nft:
          type: array
          items:
            type: object
      required:
        - collections
        - users
        - creators
        - nft
    GlobalSearchResponseDto:
      type: object
      properties:
        count:
          type: number
          example: 30
        hasMoreResults:
          type: boolean
          example: true
        resources:
          $ref: '#/components/schemas/GlobalSearchResourcesDto'
      required:
        - count
        - hasMoreResults
        - resources
    ChatMessageReplyDto:
      type: object
      properties:
        sender:
          type: string
          description: Message sender
        content:
          description: Message value
          allOf:
            - $ref: '#/components/schemas/ChatMessageReplyDto'
        timestamp:
          type: number
          description: Message timestamp
        id:
          type: string
          description: Message id
      required:
        - sender
        - content
        - timestamp
        - id
    ChatMessageContentDto:
      type: object
      properties:
        type:
          type: string
          description: Message type
        value:
          type: string
          description: Message value
        replyTo:
          description: Message reply to user
          allOf:
            - $ref: '#/components/schemas/ChatMessageReplyDto'
      required:
        - type
        - value
        - replyTo
    SendChatMessageDto:
      type: object
      properties:
        sender:
          type: string
        content:
          $ref: '#/components/schemas/ChatMessageContentDto'
        receiver:
          type: string
      required:
        - sender
        - content
        - receiver
    ProfileDto:
      type: object
      properties:
        address:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        username:
          type: string
          example: '@mihaieremia'
        profile:
          type: string
          example: >-
            https://media.xoxno.com/collectionprofile/erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57/profilePicture.webp?ts=1718876966
      required:
        - address
        - username
        - profile
    MessageContentDto:
      type: object
      properties:
        type:
          type: string
          example: message
        value:
          type: string
          example: Vv
        replyTo:
          type: object
      required:
        - type
        - value
    MessageDto:
      type: object
      properties:
        content:
          $ref: '#/components/schemas/MessageContentDto'
        isRead:
          type: boolean
          example: true
        timestamp:
          type: number
          example: 1720468991
      required:
        - content
        - isRead
        - timestamp
    ChatMessageDto:
      type: object
      properties:
        dataType:
          type: string
          example: message
        chatId:
          type: string
          example: a0vzrplk37ls7swz5ypz78f83grt9qm6pn57
        receiver:
          $ref: '#/components/schemas/ProfileDto'
        sender:
          $ref: '#/components/schemas/ProfileDto'
        isGroupChat:
          type: boolean
          example: false
        message:
          $ref: '#/components/schemas/MessageDto'
        id:
          type: string
          example: b02f639a-abcf-4db8-9397-bdb3b60cef6a
        chatName:
          type: string
          example: '@mihaieremia'
      required:
        - dataType
        - chatId
        - receiver
        - sender
        - isGroupChat
        - message
        - id
        - chatName
    ChatConversationDto:
      type: object
      properties:
        dataType:
          type: string
          example: conversation
        chatId:
          type: string
          example: a0vzrplk37ls7swz5y1z78283grt4qm6pn57
        sender:
          $ref: '#/components/schemas/ProfileDto'
        receiver:
          $ref: '#/components/schemas/ProfileDto'
        isGroupChat:
          type: boolean
          example: false
        message:
          $ref: '#/components/schemas/MessageDto'
        id:
          type: string
          example: a0vzrplk37ls7swz5ypz78f83grt9qm6pn57
        chatName:
          type: string
          example: erd1...wz5y
        unreadCount:
          type: number
          example: 0
      required:
        - dataType
        - chatId
        - sender
        - receiver
        - isGroupChat
        - message
        - id
        - chatName
        - unreadCount
    FetchChatConversationsSummaryDto:
      type: object
      properties:
        hasMoreResults:
          type: boolean
          example: false
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ChatConversationDto'
      required:
        - hasMoreResults
        - resources
    FetchChatMessagesDto:
      type: object
      properties:
        hasMoreResults:
          type: boolean
          example: false
        receiver:
          $ref: '#/components/schemas/ProfileDto'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ChatMessageDto'
      required:
        - hasMoreResults
        - receiver
        - resources
    UnreadMessageCountByChatIdDto:
      type: object
      properties:
        unreadCount:
          type: number
          example: 1
        chatId:
          type: string
          example: 49vtvdnn9w2stmwm7lpz78f83grt9qm6pn57
      required:
        - unreadCount
        - chatId
    GlobalConversationSummaryDto:
      type: object
      properties:
        totalUnreadChats:
          type: number
          example: 1
        totalUnreadMessages:
          type: number
          example: 1
        unreadMessageCountByChatId:
          type: array
          items:
            $ref: '#/components/schemas/UnreadMessageCountByChatIdDto'
      required:
        - totalUnreadChats
        - totalUnreadMessages
        - unreadMessageCountByChatId
    BlockedChatResourceDto:
      type: object
      properties:
        dataType:
          type: string
          example: blockedUser
        timestamp:
          type: number
          example: 1720734463
        sender:
          $ref: '#/components/schemas/OwnerDto'
        receiver:
          $ref: '#/components/schemas/OwnerDto'
        id:
          type: string
          example: erd1fmd662htrgt07xxd8me09newa9s0euzvpz3wp0c4pz78f83grt9qm6pn57
        chatName:
          type: string
          example: erd1...wm7l
      required:
        - dataType
        - timestamp
        - sender
        - receiver
        - id
        - chatName
    FetchBlockedChatsDto:
      type: object
      properties:
        hasMoreResults:
          type: boolean
          example: false
        resources:
          type: array
          items:
            $ref: '#/components/schemas/BlockedChatResourceDto'
      required:
        - hasMoreResults
        - resources
    WebSocketTokenDto:
      type: object
      properties:
        token:
          type: string
          description: WebSocket connection token
      required:
        - token
    NotificationAssetDto:
      type: object
      properties:
        type:
          type: string
          enum:
            - nft
            - user
        collection:
          type: string
        identifier:
          type: string
        address:
          type: string
        name:
          type: string
        url:
          type: string
      required:
        - type
    NotificationActivityDto:
      type: object
      properties:
        price:
          type: number
        paymentToken:
          type: string
        quantity:
          type: number
        buyer:
          type: string
        seller:
          type: string
        previousBidder:
          type: string
        deadline:
          type: number
    NotificationDoc:
      type: object
      properties:
        dataType:
          type: string
          default: notification
        txHash:
          type: string
        source:
          type: string
        activityType:
          type: string
          enum:
            - listingCreate
            - listingWithdraw
            - listingUpdate
            - auctionBid
            - auctionOutBid
            - offerCreate
            - offerWithdraw
            - offerReject
            - globalOfferCreate
            - globalOfferWithdraw
            - trade
            - bulkTrade
            - auctionTrade
            - otherTrade
            - offerTrade
            - globalOfferTrade
            - deposit
            - withdrawDeposit
        owner:
          type: string
        message:
          type: string
        asset:
          $ref: '#/components/schemas/NotificationAssetDto'
        activity:
          $ref: '#/components/schemas/NotificationActivityDto'
        isRead:
          type: object
          default: false
        timestamp:
          type: number
        id:
          type: string
        pk:
          type: string
        _ts:
          type: number
      required:
        - dataType
        - txHash
        - source
        - activityType
        - owner
        - asset
        - activity
        - isRead
        - timestamp
    NotificationResponse:
      type: object
      properties:
        resources:
          type: array
          items:
            $ref: '#/components/schemas/NotificationDoc'
        hasMoreResults:
          type: boolean
      required:
        - resources
        - hasMoreResults
    NotificationCountResponse:
      type: object
      properties:
        count:
          type: number
      required:
        - count
    TicketSelectionDto:
      type: object
      properties:
        ticketProfileId:
          type: string
          description: ID of the selected ticket profile
        ticketStageId:
          type: string
          description: ID of the selected ticket stage
        quantity:
          type: number
          description: Quantity of tickets selected for this stage
          minimum: 1
        price:
          type: number
          description: Price of the ticket
        name:
          type: string
          description: Name of the ticket
        description:
          type: string
          description: Description of the ticket
        currency:
          type: string
          description: Currency of the ticket
      required:
        - ticketProfileId
        - ticketStageId
        - quantity
        - price
        - name
        - description
        - currency
    EventQuestionAnswerDto:
      type: object
      properties:
        questionId:
          type: string
          description: The ID of the question that was answered.
        answer:
          type: object
          description: The actual answer provided by the guest.
      required:
        - questionId
        - answer
    CallbackUrl:
      type: object
      properties:
        success:
          type: string
        error:
          type: string
        successClose:
          type: string
        errorClose:
          type: string
      required:
        - success
        - error
        - successClose
        - errorClose
    EventGuestRegistrationDto:
      type: object
      properties:
        email:
          type: string
          description: Email address of the guest
          example: john@example.com
        name:
          type: string
          description: Name of the guest
          example: John Doe
        phone:
          type: string
          description: Phone number of the guest
          example: '+1234567890'
        ticketSelections:
          description: Selected tickets
          type: array
          items:
            $ref: '#/components/schemas/TicketSelectionDto'
        voucherCode:
          type: string
          description: Voucher code
        referralCode:
          type: string
          description: Referral code
        payWithCrypto:
          type: boolean
          description: Indicates if the user wants to pay with cryptocurrency
          default: false
        currency:
          type: string
          description: Currency for payment (fiat or crypto token)
          example: EUR
        questionAnswers:
          description: Answers to custom questions
          type: array
          items:
            $ref: '#/components/schemas/EventQuestionAnswerDto'
        callbackUrl:
          description: Callback URL
          allOf:
            - $ref: '#/components/schemas/CallbackUrl'
      required:
        - name
        - ticketSelections
        - currency
    EventGuestRegistration:
      type: object
      properties:
        email:
          type: string
          description: Email address.
        name:
          type: string
          description: First name.
        phone:
          type: string
          description: Last name.
      required:
        - name
        - phone
    EventGuestBilling:
      type: object
      properties:
        isCompany:
          type: boolean
          description: Indicates whether the guest is a company.
        name:
          type: string
          description: Name of the company.
        companyRegistrationNumber:
          type: string
          description: Company registration number.
        companyVatNumber:
          type: string
          description: Company VAT number.
        email:
          type: string
          description: Email address.
        country:
          type: string
          description: Country
        city:
          type: string
          description: City
        address1:
          type: string
          description: Address line 1
        address2:
          type: string
          description: Address line 2
        postalCode:
          type: string
          description: Postal code
      required:
        - isCompany
        - name
        - companyRegistrationNumber
        - email
        - country
        - city
        - address1
    EventGuestDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of document data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-guest
        wallet:
          type: string
          description: Guest wallet address.
        eventId:
          type: string
          description: Event ID that the guest is attending.
          example: event123
        ticket:
          type: object
          description: >-
            Object with dynamic keys, each representing a ticket for the event.
            The value is an object with check-in status and timestamps.
          example:
            key1:
              isCheckIn: true
              timestamp: 1724089378
              receivedAt: 1724089378
            key2:
              isCheckIn: false
              timestamp: 1724089379
              receivedAt: 1724089379
        questionnaireFilled:
          type: object
          description: Indicates whether the guest has filled out the questionnaire.
          example: true
        registration:
          description: Data from the guest registration form.
          allOf:
            - $ref: '#/components/schemas/EventGuestRegistration'
        billing:
          description: Data from the guest billing form.
          allOf:
            - $ref: '#/components/schemas/EventGuestBilling'
        status:
          type: string
          description: Current status of the guest document
          example: pending
        createdAt:
          type: number
          description: Timestamp of guest creation.
          example: 1727451263
        invitationId:
          type: string
          description: Invitation ID for the guest
          example: 66124e59-696c-4d3b-b6de-bb6e725cd8b7
        metadata:
          type: object
          description: Custom metadata for the guest
        id:
          type: string
          description: Unique identifier for the document.
          example: guest123
      required:
        - dataType
        - wallet
        - eventId
        - ticket
        - questionnaireFilled
        - status
        - createdAt
        - id
    FiatPaymentForm:
      type: object
      properties:
        type:
          type: string
          enum:
            - Twispay
            - Binance
            - Stripe
            - Crypto
        data:
          oneOf:
            - $ref: '#/components/schemas/TwispayPaymentFormData'
            - $ref: '#/components/schemas/StripePaymentFormData'
      required:
        - type
        - data
    EventRegistrationResponseDto:
      type: object
      properties:
        guestDoc:
          $ref: '#/components/schemas/EventGuestDoc'
        fiatPaymentForm:
          $ref: '#/components/schemas/FiatPaymentForm'
      required:
        - guestDoc
    RegistrationDetailsDto:
      type: object
      properties:
        visibility:
          type: string
          enum:
            - public
            - private
        maxLimit:
          type: number
        userLimit:
          type: number
        requireKYC:
          type: boolean
        requireName:
          type: boolean
        requireEmail:
          type: boolean
        requirePhoneNumber:
          type: boolean
        isPublished:
          type: boolean
        hasSideEvents:
          type: boolean
        hasWaitlist:
          type: boolean
        showGuestCount:
          type: boolean
        refundable:
          type: boolean
        nameWithNumber:
          type: boolean
        botProtection:
          type: boolean
      required:
        - visibility
        - maxLimit
        - userLimit
        - requireKYC
        - requireName
        - requireEmail
        - requirePhoneNumber
        - isPublished
        - hasSideEvents
        - hasWaitlist
        - showGuestCount
        - refundable
        - nameWithNumber
        - botProtection
    EventProfileCreateDto:
      type: object
      properties:
        title:
          type: string
        startTime:
          type: number
          minimum: 1727451263
        endTime:
          type: number
        location:
          $ref: '#/components/schemas/EventLocationDto'
        registration:
          $ref: '#/components/schemas/RegistrationDetailsDto'
        isVirtualEvent:
          type: boolean
      required:
        - title
        - startTime
        - endTime
        - location
        - registration
        - isVirtualEvent
    CreatorProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of user data.
          enum:
            - userProfile
            - creatorProfile
            - userFavorite
            - userSettings
          default: creatorProfile
        address:
          type: string
          description: Wallet address of the creator.
        name:
          type: string
          description: Name of the creator.
        creatorTag:
          type: string
          description: Tag of the creator.
        contractAddress:
          type: string
          description: Contract address of the creator.
        ticketingContractAddress:
          type: string
          description: Ticketing Contract address of the creator.
        profile:
          type: string
          description: Profile picture of the creator.
        banner:
          type: string
          description: Banner picture of the creator.
        joinedDate:
          type: number
          description: Join date of the creator as a Unix timestamp in seconds.
        description:
          type: string
          description: Description of the creator.
        socials:
          type: object
          description: Social media links of the creator.
        id:
          type: string
          description: ID of the creator.
      required:
        - dataType
        - address
        - name
        - creatorTag
        - contractAddress
        - ticketingContractAddress
        - profile
        - banner
        - joinedDate
        - description
        - socials
        - id
    EventGuestProfileSummary:
      type: object
      properties:
        address:
          type: string
          description: The address of the guest.
          example: erd1234
        profile:
          type: string
          description: The profile URL of the guest.
          example: https://example.com/profile.png
        name:
          type: string
          description: The name of the guest.
          example: John Doe
        herotag:
          type: string
          description: The herotag of the guest.
          example: john-doe
      required:
        - address
        - profile
    EventGuestSummary:
      type: object
      properties:
        count:
          type: number
          description: Total number of guests.
          example: 100
        guests:
          description: List of guests with their address, profile, name, and herotag.
          type: array
          items:
            $ref: '#/components/schemas/EventGuestProfileSummary'
      required:
        - count
        - guests
    EventProfile:
      type: object
      properties:
        dataType:
          type: string
          description: The type of user data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-profile
        creatorAddress:
          type: string
          description: Wallet address of the creator of the event.
        title:
          type: string
          description: Title of the event.
        startTime:
          type: number
          description: Start time of the event as a Unix timestamp in seconds.
        endTime:
          type: number
          description: End time of the event as a Unix timestamp in seconds.
        descriptionUrl:
          type: string
          description: >-
            URL to the markdown file in Azure storage containing the event
            description.
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultEventDescription.md
        location:
          description: >-
            Location details including geo points, address, and optional
            instructions.
          allOf:
            - $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
          description: Define if the event happens in real life or virtual on Zoom/Meet
        slug:
          type: string
          description: Unique slug for the event URL.
        profile:
          type: string
          description: URL to the profile image in Azure storage.
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultProfilePic.webp
        background:
          type: string
          description: URL to the background image in Azure storage, optional.
        registration:
          type: object
          description: >-
            Registration details such as visibility, max capacity, and ticket
            limits.
        contractAddress:
          type: string
          description: The address of the contract that manages the event.
        collection:
          type: string
          description: The NFT collection the event is associated with.
        seo:
          type: object
          description: >-
            SEO-related information such as short description, tags, and
            alternative title.
        id:
          type: string
          description: Automatically generated unique identifier for the event.
        eventPermissions:
          description: Permissions for the event.
          allOf:
            - $ref: '#/components/schemas/EventUserRoleDoc'
        creatorProfile:
          description: Creator profile data including name, profile, and herotag.
          allOf:
            - $ref: '#/components/schemas/CreatorProfileDoc'
        guestSummary:
          description: Summary of the guests attending the event.
          allOf:
            - $ref: '#/components/schemas/EventGuestSummary'
      required:
        - dataType
        - creatorAddress
        - title
        - startTime
        - endTime
        - descriptionUrl
        - location
        - isVirtualEvent
        - slug
        - profile
        - registration
        - id
        - eventPermissions
        - creatorProfile
    EventSeoDto:
      type: object
      properties:
        description:
          type: string
          example: This is a description
        tags:
          example:
            - tag1
            - tag2
          type: array
          items:
            type: string
        alternativeTitle:
          type: string
          example: Alternative Title
      required:
        - description
        - tags
        - alternativeTitle
    EventProfileEditDto:
      type: object
      properties:
        title:
          type: string
          example: Event Title
        startTime:
          type: number
          example: 1727451264
        endTime:
          type: number
          example: 1727451264
        location:
          $ref: '#/components/schemas/EventLocationDto'
        isVirtualEvent:
          type: boolean
        registration:
          $ref: '#/components/schemas/RegistrationDetailsDto'
        slug:
          type: string
          example: my-awesome-event
        seo:
          $ref: '#/components/schemas/EventSeoDto'
      required:
        - title
        - startTime
        - endTime
        - location
        - isVirtualEvent
        - registration
        - slug
        - seo
    EventTicketProfileCreateDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        royalties:
          type: number
        badgeColor:
          type: string
        maxLimit:
          type: number
        userLimit:
          type: number
      required:
        - name
        - description
        - royalties
        - badgeColor
        - maxLimit
        - userLimit
    EventTicketProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of event data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-ticket-profile
        eventId:
          type: string
          description: ID of the event this ticket type is associated with.
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        profile:
          type: string
          description: >-
            URL of the image that will be used as the NFT representing this
            ticket type.
        royalties:
          type: object
          description: >-
            Royalties set for the mint of this specific NFT ticket type,
            expressed as a percentage.
          example: 5
          default: 0
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        characteristics:
          type: object
          description: Other characteristics specific to this ticket type.
        maxLimit:
          type: object
          description: >-
            Optional maximum number of tickets that can be minted for this
            ticket type.
          example: 1000
        userLimit:
          type: object
          default: 0
          description: Limit on the number of tickets a single user can buy for this type.
        soldCount:
          type: object
          description: The current count of sold tickets
          example: 1000
          default: 0
        createdAt:
          type: number
          description: Timestamp when the ticket type was created.
          example: 1727451263
        id:
          type: string
          description: Unique identifier for this ticket type.
          example: c6392166-d4b4-4623-b4ec-c7609d0149a7
      required:
        - dataType
        - eventId
        - name
        - description
        - profile
        - royalties
        - badgeColor
        - characteristics
        - userLimit
        - soldCount
        - createdAt
        - id
    EventTicketProfileEditDto:
      type: object
      properties:
        description:
          type: string
        royalties:
          type: number
        badgeColor:
          type: string
        maxLimit:
          type: number
        userLimit:
          type: number
        name:
          type: string
        characteristics:
          type: object
      required:
        - description
        - royalties
        - badgeColor
        - maxLimit
        - userLimit
        - name
        - characteristics
    EgldOrEsdtTokenPaymentDto:
      type: object
      properties:
        tokenIdentifier:
          type: string
          example: EGLD
        tokenNonce:
          type: number
          example: 0
        amount:
          type: string
          example: '500000000000000000'
      required:
        - tokenIdentifier
        - tokenNonce
        - amount
    EventStageProfileCreateDto:
      type: object
      properties:
        ticketId:
          type: string
        name:
          type: string
        startTime:
          type: number
          minimum: 1727451264
        endTime:
          type: number
          minimum: 1727537664
        maxLimit:
          type: number
        userLimit:
          type: number
        isEnabled:
          type: boolean
        isWhitelist:
          type: boolean
        requiredApproval:
          type: boolean
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPaymentDto'
      required:
        - ticketId
        - name
        - startTime
        - endTime
        - maxLimit
        - userLimit
        - isEnabled
        - isWhitelist
        - requiredApproval
        - prices
    EventStageProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of event data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-ticket-stage
        eventId:
          type: string
          description: ID of the event this stage is associated with.
        ticketId:
          type: string
          description: >-
            ID of the ticket type this stage is associated with (reference to
            TicketTypeDoc).
        name:
          type: string
          description: Name of the stage (e.g., Early Bird, Regular).
        startTime:
          type: number
          description: Timestamp when this stage starts.
          example: 1727451263
        endTime:
          type: number
          description: Timestamp when this stage ends.
          example: 1727451263
        maxLimit:
          type: object
          description: >-
            Limit on the total number of tickets that can be sold during this
            stage.
        userLimit:
          type: object
          description: >-
            Limit on the number of tickets a single user can buy during this
            stage.
        isEnabled:
          type: object
          description: Indicates whether ticket sales are enabled for this stage.
        isWhitelist:
          type: object
          description: If true, only whitelisted users can buy tickets in this stage.
        requiredApproval:
          type: object
          description: Require approval for users paying or registration
        prices:
          description: Price of the ticket during this stage, can override base price.
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPayment'
        soldCount:
          type: object
          description: Tracks the total number of tickets sold during this stage.
        id:
          type: string
          description: Unique identifier for this stage.
          example: a82877f9-8d63-46f4-b7b4-7e315d597deb
      required:
        - dataType
        - eventId
        - ticketId
        - name
        - startTime
        - endTime
        - maxLimit
        - userLimit
        - isEnabled
        - isWhitelist
        - requiredApproval
        - prices
        - soldCount
        - id
    EventStageProfileEditDto:
      type: object
      properties:
        maxLimit:
          type: number
        userLimit:
          type: number
        isEnabled:
          type: boolean
        isWhitelist:
          type: boolean
        requiredApproval:
          type: boolean
        prices:
          type: array
          items:
            $ref: '#/components/schemas/EgldOrEsdtTokenPaymentDto'
        name:
          type: string
        startTime:
          type: number
          minimum: 1727451264
        endTime:
          type: number
          minimum: 1727537664
      required:
        - maxLimit
        - userLimit
        - isEnabled
        - isWhitelist
        - requiredApproval
        - prices
        - name
        - startTime
        - endTime
    Ticket:
      type: object
      properties:
        ticketId:
          type: string
        quantity:
          type: number
      required:
        - ticketId
        - quantity
    EventInvitationCreateDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        tickets:
          type: array
          items:
            $ref: '#/components/schemas/Ticket'
        startTime:
          type: number
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: number
          description: The expiry timestamp of the invitation.
          example: 1627852800
      required:
        - name
        - email
        - tickets
        - startTime
        - endTime
    TicketProfileSummary:
      type: object
      properties:
        name:
          type: string
          description: Name of the ticket type (e.g., General, VIP).
        description:
          type: string
          description: Description of the ticket type.
        profile:
          type: string
          description: >-
            URL of the image that will be used as the NFT representing this
            ticket type.
        badgeColor:
          type: string
          description: >-
            Optional color code for the badge or wristband to be used during
            check-in.
        characteristics:
          type: object
          description: Other characteristics specific to this ticket type.
        ticketId:
          type: string
          description: The unique identifier for the ticket type.
          example: 52233859-51aa-4aa8-8a07-b95cdeb4ca42
        quantity:
          type: number
          description: The number of tickets for this type.
          example: 100
      required:
        - name
        - description
        - profile
        - badgeColor
        - characteristics
        - ticketId
    EventInvitationDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of ticket data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-invitation
        eventId:
          type: string
          description: The ID of the event.
          example: event123
        name:
          type: string
          description: The name of the person associated with the ticket invitation.
          example: John Doe
        email:
          type: string
          description: The email associated with the ticket invitation.
          example: example@example.com
        tickets:
          description: List of ticket types with their IDs and quantities.
          example:
            - ticketId: VIP123
              quantity: 2
          type: array
          items:
            $ref: '#/components/schemas/TicketProfileSummary'
        startTime:
          type: number
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: number
          description: The expiry timestamp of the invitation.
          example: 1627852800
        createdAt:
          type: number
          description: The timestamp when the ticket invitation was created.
          example: 1727451263
        isClaimed:
          type: object
          description: Indicates if the ticket has been claimed.
          example: false
        isUsed:
          type: object
          description: Indicates if the ticket has been scanned.
          example: false
        status:
          type: string
          description: The status of the ticket invitation.
          enum:
            - pending
            - accepted
            - declined
            - canceled
          default: pending
        claimedAt:
          type: object
          description: The timestamp when the ticket was claimed.
          example: 0
        claimedBy:
          type: string
          description: The identifier of the person who claimed the ticket.
          example: erd138ddea4xdtlm3mtnayssfcpyx6p0etmnz32s874v8m7y0hy3shsnnr4mz
        txHash:
          type: string
          description: The transaction hash associated with the ticket claim.
          example: f8e8ad01519a43aa7c629155d35f505a17541e3ceb779e7ed728633764354faa
        id:
          type: string
          description: The unique identifier for the ticket invitation.
          example: 466ca83c-7d49-4622-a86b-b9782069c9ff
      required:
        - dataType
        - eventId
        - name
        - email
        - tickets
        - startTime
        - endTime
        - createdAt
        - isClaimed
        - isUsed
        - status
        - claimedAt
        - id
    EventInvitation:
      type: object
      properties:
        dataType:
          type: string
          description: The type of ticket data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-invitation
        eventId:
          type: string
          description: The ID of the event.
          example: event123
        name:
          type: string
          description: The name of the person associated with the ticket invitation.
          example: John Doe
        email:
          type: string
          description: The email associated with the ticket invitation.
          example: example@example.com
        tickets:
          description: List of ticket types with their IDs and quantities.
          example:
            - ticketId: VIP123
              quantity: 2
          type: array
          items:
            $ref: '#/components/schemas/TicketProfileSummary'
        startTime:
          type: number
          description: The start timestamp of the invitation.
          example: 1627849200
        endTime:
          type: number
          description: The expiry timestamp of the invitation.
          example: 1627852800
        createdAt:
          type: number
          description: The timestamp when the ticket invitation was created.
          example: 1727451263
        isClaimed:
          type: object
          description: Indicates if the ticket has been claimed.
          example: false
        isUsed:
          type: object
          description: Indicates if the ticket has been scanned.
          example: false
        status:
          type: string
          description: The status of the ticket invitation.
          enum:
            - pending
            - accepted
            - declined
            - canceled
          default: pending
        claimedAt:
          type: object
          description: The timestamp when the ticket was claimed.
          example: 0
        claimedBy:
          type: string
          description: The identifier of the person who claimed the ticket.
          example: erd138ddea4xdtlm3mtnayssfcpyx6p0etmnz32s874v8m7y0hy3shsnnr4mz
        txHash:
          type: string
          description: The transaction hash associated with the ticket claim.
          example: f8e8ad01519a43aa7c629155d35f505a17541e3ceb779e7ed728633764354faa
        id:
          type: string
          description: The unique identifier for the ticket invitation.
          example: 466ca83c-7d49-4622-a86b-b9782069c9ff
        profile:
          type: string
          description: >-
            The profile image of the person associated with the ticket
            invitation.
        herotag:
          type: string
          description: The herotag of the person associated with the ticket invitation.
      required:
        - dataType
        - eventId
        - name
        - email
        - tickets
        - startTime
        - endTime
        - createdAt
        - isClaimed
        - isUsed
        - status
        - claimedAt
        - id
        - profile
        - herotag
    PaginatedResponse:
      type: object
      properties:
        count:
          type: number
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            $ref: '#/components/schemas/EventGuestProfile'
      required:
        - hasMoreResults
        - resources
    CosmosPaginatedResponse:
      type: object
      properties:
        count:
          type: number
          description: Total number of documents
          example: 100
        hasMoreResults:
          type: boolean
          description: Indicates if there are more documents available
          example: true
        resources:
          description: List of documents
          type: array
          items:
            type: array
      required:
        - hasMoreResults
        - resources
    EventQuestionDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of user data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-question
        id:
          type: string
          description: Automatically generated unique identifier for the question.
        eventId:
          type: string
          description: Reference to the EventDoc.
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          type: string
          description: >-
            Type of answer expected (e.g., text, textarea, radio, checkbox,
            etc.).
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
        createdAt:
          type: number
          description: Timestamp of question creation.
          example: 1727451263
      required:
        - dataType
        - id
        - eventId
        - title
        - required
        - answerType
        - requireTime
        - answers
        - createdAt
    EventQuestionCreateDto:
      type: object
      properties:
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          type: string
          description: Type of answer expected.
          enum:
            - text
            - textarea
            - radio
            - checkbox
            - time
            - date
            - dropdown
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
      required:
        - title
        - required
        - answerType
        - requireTime
    EventQuestionEditDto:
      type: object
      properties:
        title:
          type: string
          description: The actual question text.
        required:
          type: boolean
          description: Indicates whether the question is mandatory.
        answerType:
          type: string
          description: Type of answer expected.
          enum:
            - text
            - textarea
            - radio
            - checkbox
            - time
            - date
        requireTime:
          type: boolean
          description: >-
            Indicates whether the question has a time component when the answer
            type is date.
        answers:
          description: Optional array of possible answers for select-type questions.
          type: array
          items:
            type: string
      required:
        - requireTime
    EventGuestProfile:
      type: object
      properties:
        dataType:
          type: string
          description: The type of document data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-guest
        wallet:
          type: string
          description: Guest wallet address.
        eventId:
          type: string
          description: Event ID that the guest is attending.
          example: event123
        ticket:
          type: object
          description: >-
            Object with dynamic keys, each representing a ticket for the event.
            The value is an object with check-in status and timestamps.
          example:
            key1:
              isCheckIn: true
              timestamp: 1724089378
              receivedAt: 1724089378
            key2:
              isCheckIn: false
              timestamp: 1724089379
              receivedAt: 1724089379
        questionnaireFilled:
          type: object
          description: Indicates whether the guest has filled out the questionnaire.
          example: true
        registration:
          description: Data from the guest registration form.
          allOf:
            - $ref: '#/components/schemas/EventGuestRegistration'
        billing:
          description: Data from the guest billing form.
          allOf:
            - $ref: '#/components/schemas/EventGuestBilling'
        status:
          type: string
          description: Current status of the guest document
          example: pending
        createdAt:
          type: number
          description: Timestamp of guest creation.
          example: 1727451263
        invitationId:
          type: string
          description: Invitation ID for the guest
          example: 66124e59-696c-4d3b-b6de-bb6e725cd8b7
        metadata:
          type: object
          description: Custom metadata for the guest
        id:
          type: string
          description: Unique identifier for the document.
          example: guest123
        profile:
          type: string
          description: Guest profile picture.
        herotag:
          type: string
          description: Guest wallet herotag.
      required:
        - dataType
        - wallet
        - eventId
        - ticket
        - questionnaireFilled
        - status
        - createdAt
        - id
        - profile
        - herotag
    EventUserRoleCreateDto:
      type: object
      properties:
        wallet:
          type: string
          description: User wallet address
        name:
          type: string
          description: User name
        email:
          type: string
          description: User email
        role:
          type: array
          description: Assigned Roles
          items:
            type: string
            enum:
              - event-reader
              - event-manager
              - check-in-manager
        permissions:
          type: array
          description: Assigned Permissions
          items:
            type: string
            enum:
              - event-reader-view
              - event-manager-edit-page
              - event-manager-create-ticket
              - event-manager-edit-ticket
              - event-manager-delete-ticket
              - event-manager-edit-guest
              - event-manager-create-stage
              - event-manager-edit-stage
        endTime:
          type: number
          description: The expiry timestamp of the role.
          example: 1627852800
      required:
        - wallet
        - name
        - email
        - role
        - permissions
        - endTime
    QRBody:
      type: object
      properties:
        type:
          type: string
          description: QR Type
          enum:
            - badge
            - offline
            - google
            - manual
        data:
          type: string
          description: Encrypted QR data
      required:
        - type
        - data
    TicketsType:
      type: object
      properties:
        ticketId:
          type: string
          description: Ticket Profile ID
        quantity:
          type: number
          description: Ticket Profile quantity
      required:
        - ticketId
        - quantity
    EventCheckInQR:
      type: object
      properties:
        qr:
          description: User wallet address
          allOf:
            - $ref: '#/components/schemas/QRBody'
        tickets:
          description: Selected Tickets
          type: array
          items:
            $ref: '#/components/schemas/TicketsType'
      required:
        - qr
        - tickets
    TicketValidationResult:
      type: object
      properties:
        status:
          type: string
          description: Staus of the scan
          enum:
            - error
            - success
            - select
        type:
          type: string
          description: QR Code type
          enum:
            - badge
            - offline
            - google
            - manual
        message:
          type: string
          description: QR Code type
          enum:
            - qr-type-invalid
            - qr-valid
            - qr-invalid
            - invitation-not-found
            - invitation-not-valid
            - event-not-found
            - guest-not-found
            - guest-valid
            - qr-code-expired
            - check-in-completed
            - guest-not-active
            - no-tickets-available
            - tickets-no-valid
            - guest-already-in
            - valid-check-in
            - select-tickets
            - tickets-valid
        guest:
          description: GuestDoc profile extended
          allOf:
            - $ref: '#/components/schemas/EventGuestProfile'
        invitation:
          description: InvitationDoc profile
          allOf:
            - $ref: '#/components/schemas/EventInvitationDoc'
        nfts:
          description: NFTs used for check in, if any
          allOf:
            - $ref: '#/components/schemas/NftDoc'
        availableTickets:
          description: Tickets to select from when required for bulk scan
          type: array
          items:
            type: string
      required:
        - status
        - type
        - message
        - guest
        - invitation
        - nfts
        - availableTickets
    EventVoucherCreateDto:
      type: object
      properties:
        code:
          type: string
          description: Unique voucher code.
        type:
          type: string
          description: Type of discount provided by the voucher.
          enum:
            - fixed
            - percentage
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: number
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: number
          description: Maximum uses allowed per user.
        eventId:
          type: string
          description: The specific eventId where the voucher can be used
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: number
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: number
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: number
          description: Timestamp when the voucher becomes valid.
          example: 1727451264
        endDate:
          type: number
          description: Timestamp when the voucher expires.
          example: 1727451264
        isActive:
          type: object
          description: Indicates whether the voucher is currently active.
          default: true
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
    EventVoucherDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of event data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-voucher
        id:
          type: string
          description: Unique identifier for the voucher.
        code:
          type: string
          description: Unique voucher code.
        type:
          type: string
          description: Type of discount provided by the voucher.
          enum:
            - fixed
            - percentage
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: number
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: number
          description: Maximum uses allowed per user.
        usedCount:
          type: object
          description: Tracks the number of times the voucher has been used.
        eventId:
          type: string
          description: List of specific event IDs where the voucher can be applied.
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: number
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: number
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: number
          description: Timestamp when the voucher becomes valid.
          example: 1727451264
        endDate:
          type: number
          description: Timestamp when the voucher expires.
          example: 1727451264
        isActive:
          type: object
          description: Indicates whether the voucher is currently active.
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
        createdAt:
          type: number
          description: Timestamp when the voucher was created.
          example: 1727451264
        createdBy:
          type: string
          description: Reference to the admin or system that created the voucher.
      required:
        - dataType
        - id
        - code
        - type
        - amount
        - maxDiscountAmount
        - maxUses
        - maxUsesPerUser
        - usedCount
        - eventId
        - ticketTypeIds
        - stageIds
        - minTicketCount
        - maxTicketCount
        - startDate
        - endDate
        - isActive
        - ownerId
        - createdAt
        - createdBy
    EventVoucherEditDto:
      type: object
      properties:
        type:
          type: string
          description: Type of discount provided by the voucher.
          enum:
            - fixed
            - percentage
        amount:
          type: number
          description: The discount value. Fixed amount or percentage.
        maxDiscountAmount:
          type: number
          description: Optional maximum discount cap for percentage-based vouchers.
        maxUses:
          type: number
          description: Total number of uses allowed for this voucher.
        maxUsesPerUser:
          type: number
          description: Maximum uses allowed per user.
        ticketTypeIds:
          description: List of specific ticket type IDs where the voucher can be applied.
          type: array
          items:
            type: string
        stageIds:
          description: >-
            List of specific stage IDs where the voucher can be applied,
            optional.
          type: array
          items:
            type: string
        minTicketCount:
          type: number
          description: Minimum number of tickets required to use the voucher, optional.
        maxTicketCount:
          type: number
          description: >-
            Maximum number of tickets in a single transaction where the voucher
            can be applied, optional.
        startDate:
          type: number
          description: Timestamp when the voucher becomes valid.
          example: 1727451264
        endDate:
          type: number
          description: Timestamp when the voucher expires.
          example: 1727451264
        isActive:
          type: object
          description: Indicates whether the voucher is currently active.
          default: true
        ownerId:
          type: string
          description: Optional ID of the owner who can use this voucher.
    ManualCheckInDto:
      type: object
      properties:
        invitationIdOrAddress:
          type: string
          description: Invitation ID or wallet address for check-in
        selectedTickets:
          description: Selected tickets for check-in (optional)
          type: array
          items:
            $ref: '#/components/schemas/TicketsType'
      required:
        - invitationIdOrAddress
    EventGuestAnswerDoc:
      type: object
      properties:
        dataType:
          type: string
          description: The type of event data.
          enum:
            - event-voucher
            - event-invitation
            - event-profile
            - event-question
            - event-question-answer
            - event-ticket-profile
            - event-ticket-stage
            - event-guest
            - event-referral-config
            - event-referral-code
            - event-referral-usage
            - event-user-role
          default: event-question-answer
        id:
          type: string
          description: Unique identifier for this guest answer.
          example: aa4cd720-a5d0-444d-adb7-5a4ba862dfdf
        wallet:
          type: string
          description: The address of the guest who provided the answer.
        questionId:
          type: string
          description: The ID of the question that was answered.
        eventId:
          type: string
          description: The event ID this answer is linked to.
        answer:
          type: object
          description: The actual answer provided by the guest.
        createdAt:
          type: number
          description: Timestamp when the answer was provided.
          example: 1727451263
        ttl:
          type: number
          description: Time to live in seconds. Only set when status is pending.
      required:
        - dataType
        - id
        - wallet
        - questionId
        - eventId
        - answer
        - createdAt
    AnsweredQuestionWithDetails:
      type: object
      properties:
        answer:
          description: The answer provided by the guest
          allOf:
            - $ref: '#/components/schemas/EventGuestAnswerDoc'
        question:
          description: The question details
          allOf:
            - $ref: '#/components/schemas/EventQuestionDoc'
      required:
        - answer
        - question
    RangeFilter:
      type: object
      properties:
        min:
          type: number
        max:
          type: number
        field:
          type: string
    NftActivityFilterCriteriaDto:
      type: object
      properties:
        txHash:
          type: array
          items:
            type: string
        activityAddress:
          type: array
          items:
            type: string
        from:
          type: array
          items:
            type: string
        to:
          type: array
          items:
            type: string
        activityType:
          type: array
          example:
            - listingCreate
          items:
            type: string
            enum:
              - nftCreate
              - nftBurn
              - nftUpdate
              - nftTransfer
              - listingCreate
              - listingWithdraw
              - listingUpdate
              - auctionBid
              - auctionOutBid
              - offerCreate
              - offerWithdraw
              - offerReject
              - globalOfferCreate
              - globalOfferWithdraw
              - trade
              - bulkTrade
              - auctionTrade
              - otherTrade
              - offerTrade
              - globalOfferTrade
              - stake
              - unStake
        source:
          type: array
          items:
            type: string
            enum:
              - mvxBuiltIn
              - xoxno
              - frameit
              - deadrare
              - krogan
              - xoxnoLaunchpad
              - xoxnoStaking
              - xoxnoP2P
              - xoxnoLs
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        activityData:
          $ref: '#/components/schemas/ActivityDataDto'
    NftActivityFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          default: {}
          allOf:
            - $ref: '#/components/schemas/NftActivityFilterCriteriaDto'
    CollectionOffersFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          type: CollectionOffersFilterCriteriaDto
          default: {}
    CollectionOffersFilterCriteriaDto:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: globalOffer
        collection:
          example:
            - collection1
          type: array
          items:
            type: string
        offerId:
          example:
            - 123
          type: array
          items:
            type: number
        owner:
          example:
            - owner1
          type: array
          items:
            type: string
        marketplace:
          example:
            - marketplace1
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/NftMetadataAttributes'
        isActive:
          type: boolean
          example: true
        withAttributes:
          type: boolean
          example: true
    CollectionStatsFilterCriteriaDto:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          example: collectionStats
        collection:
          type: array
          items:
            type: string
        verifiedOnly:
          type: boolean
          example: true
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    CollectionProfileDoc:
      type: object
      properties:
        dataType:
          type: string
          enum:
            - collectionProfile
            - globalOffer
            - mintProfile
            - mintStage
            - collectionStats
            - collectionVerification
          default: collectionProfile
        collection:
          type: object
          description: Unique on chain identifier for the collection
        name:
          type: object
          description: Collection name
        description:
          type: object
          description: Description about the collection
        isVisible:
          type: object
          description: Collection visibility
          default: true
        isVerified:
          type: object
          description: Collection verification
          default: false
        socials:
          $ref: '#/components/schemas/SocialsDto'
        type:
          type: string
          enum:
            - FungibleESDT
            - NonFungibleESDT
            - SemiFungibleESDT
            - MetaESDT
        profile:
          type: string
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultProfilePic.webp
        banner:
          type: string
          default: >-
            https://trustmarketdevnet.blob.core.windows.net/utils/defaultBanner.webp
        statistics:
          default:
            other:
              nftCount: 0
              followCount: 0
          allOf:
            - $ref: '#/components/schemas/StatisticsDto'
        owner:
          type: object
          description: Owner wallet address
          default: ''
        creator:
          type: object
          description: Creator wallet address
          default: ''
        isMintable:
          type: object
          default: false
        hasStaking:
          type: object
          default: false
        roles:
          type: object
          description: Collection roles
        isEvent:
          type: object
          description: Indicates if this collection is an event
          default: false
        eventId:
          type: string
          description: Event Id associate with this collection
        customConfig:
          $ref: '#/components/schemas/XoxnoMarketplaceScCollectionConfig'
        id:
          type: object
          default: Collection ID
        _ts:
          type: object
          default: 0
      required:
        - dataType
        - collection
        - name
        - description
        - isVisible
        - isVerified
        - socials
        - type
        - profile
        - banner
        - statistics
        - owner
        - creator
        - isMintable
        - hasStaking
        - roles
        - isEvent
        - id
        - _ts
    CollectionStatsFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          default: {}
          allOf:
            - $ref: '#/components/schemas/CollectionStatsFilterCriteriaDto'
      required:
        - filters
    SaleInfoFilterDto:
      type: object
      properties:
        seller:
          type: array
          items:
            type: string
        paymentToken:
          type: array
          items:
            type: string
        marketplace:
          example:
            - xoxno
          type: array
          items:
            type: string
        auctionType:
          type: array
          items:
            type: string
    NftDocFilterCriteriaDto:
      type: object
      properties:
        dataType:
          type: array
          items:
            type: string
        identifier:
          type: array
          items:
            type: string
        collection:
          type: array
          items:
            type: string
        nonce:
          type: array
          items:
            type: number
        type:
          type: array
          items:
            type: string
        onSale:
          type: boolean
          example: true
        owner:
          type: array
          items:
            type: string
        currentOwner:
          type: array
          items:
            type: string
        saleInfo:
          $ref: '#/components/schemas/SaleInfoFilterDto'
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
        metadata:
          $ref: '#/components/schemas/MetadataDto'
        wasProcessed:
          type: boolean
          example: true
        cp_staked:
          type: boolean
          example: true
        activeAuction:
          type: boolean
          example: true
        verifiedOnly:
          type: boolean
          example: true
        sftOriginalDoc:
          type: boolean
          example: true
    NftDocFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          default: {}
          allOf:
            - $ref: '#/components/schemas/NftDocFilterCriteriaDto'
        applyNftExtraDetails:
          type: boolean
      required:
        - filters
    NftOfferDocFilterCriteria:
      type: object
      properties:
        isActive:
          type: array
          items:
            type: boolean
        identifier:
          type: array
          items:
            type: string
        collection:
          type: array
          items:
            type: string
        owner:
          type: array
          items:
            type: string
        nftOwner:
          type: array
          items:
            type: string
        marketplace:
          type: array
          items:
            type: string
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    NftOfferDocFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
            enum:
              - priceShort desc
          default: []
        includeCount:
          type: boolean
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          $ref: '#/components/schemas/NftOfferDocFilterCriteria'
      required:
        - filters
    EventGuestFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
        wallet:
          type: array
          items:
            type: string
        eventId:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            type: string
            enum:
              - pending
              - pendingApproval
              - inviteClaimed
              - partiallyActive
              - active
              - completed
              - partiallyCompleted
        questionnaireFilled:
          type: boolean
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventGuestFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          $ref: '#/components/schemas/EventGuestFilterCriteriaDto'
      required:
        - filters
    EventInvitationFilterCriteriaDto:
      type: object
      properties:
        searchText:
          type: string
        claimedBy:
          type: array
          items:
            type: string
        eventId:
          type: array
          items:
            type: string
        email:
          type: array
          items:
            type: string
        status:
          type: array
          items:
            type: string
            enum:
              - pending
              - accepted
              - declined
              - canceled
        isClaimed:
          type: boolean
        isUsed:
          type: boolean
        range:
          type: array
          items:
            $ref: '#/components/schemas/RangeFilter'
    EventInvitationFilter:
      type: object
      properties:
        select:
          type: array
          items:
            type: string
          default: []
        orderBy:
          type: array
          items:
            type: string
          default: []
        includeCount:
          type: boolean
          default: false
        strictSelect:
          type: boolean
          default: false
        top:
          type: number
          default: 25
        skip:
          type: number
          default: 0
        filters:
          $ref: '#/components/schemas/EventInvitationFilterCriteriaDto'
      required:
        - filters